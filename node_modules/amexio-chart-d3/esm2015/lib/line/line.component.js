/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, ElementRef, Input, ChangeDetectorRef } from "@angular/core";
import * as d3 from 'd3';
import { AmexioD3BaseLineComponent } from "./baseline.component";
import { CommanDataService } from '../services/comman.data.service';
import { DeviceQueryService } from "../services/device.query.service";
export class AmexioD3LineComponent extends AmexioD3BaseLineComponent {
    /**
     * @param {?} deviceQueryService
     * @param {?} cdf
     * @param {?} myservice
     */
    constructor(deviceQueryService, cdf, myservice) {
        super(deviceQueryService);
        this.deviceQueryService = deviceQueryService;
        this.cdf = cdf;
        this.myservice = myservice;
        this.labelcolor = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    resp = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                }), (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.data = this.getResponseData(resp);
                        this.plotD3Chart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(this.data);
                    this.plotD3Chart();
                }), 0);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.data) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.data = this.getResponseData(this.data);
                this.plotD3Chart();
            }), 0);
        }
    }
    /**
     * @return {?}
     */
    validateData() {
        if (this.data) {
        }
        else {
            return "lmask";
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                resp = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
            }), (/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(resp);
                    this.drawChart();
                }), 0);
            }));
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.plotD3Chart();
        }), 0);
    }
    //RESIZE STEP 5 STARTS
    /**
     * @return {?}
     */
    resize() {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            // this.resizewt = this.chartId.nativeElement.offsetWidth;
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotD3Chart();
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        const linechart = this.initChart();
        this.rawdata = linechart.rawdata;
        // this.svgwidth = linechart.width;
        this.plotScale(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width);
        this.plotLine(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width, [], tooltip, (1));
        if (this.multiseriesdata) {
            for (let index = 0; index < this.multiseriesdata.length; index++) {
                this.plotLine(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width, this.multiseriesdata[index], tooltip, (index + 1));
            }
        }
    }
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    validateresize() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.wt) {
            }
            else {
                this.resize();
            }
        }), 0);
    }
    //RESIZE STEP 4 ENDS
    /**
     * @private
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @param {?} data
     * @param {?} tooltip
     * @param {?} i
     * @return {?}
     */
    plotLine(g, x, y, height, width, data, tooltip, i) {
        /** @type {?} */
        const line = d3.line()
            .x((/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return x(d.label); }))
            .y((/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return y(d.value); }));
        /** @type {?} */
        const tempcolor = "black";
        g.append("path")
            .datum(data)
            .attr("fill", "none")
            .attr("stroke", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            if (this.linecolor.length > 0) {
                if (this.linecolor[i - 1]) {
                    return this.linecolor[i - 1];
                }
                else {
                    return this.predefinedcolors[i - 1];
                }
            }
            else if (this.linecolor.length < 1) {
                return this.predefinedcolors[i - 1];
                //  return tempcolor;
            }
        }))
            .attr("stroke-width", 1.5)
            .attr("d", line);
        g.selectAll('dot')
            .data(data)
            .enter()
            .append('circle')
            .attr("cx", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return x(d.label); }))
            .attr("cy", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return y(d.value); }))
            .attr('r', 2)
            .attr("fill", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            if (this.linecolor.length > 0) {
                if (this.linecolor[i - 1]) {
                    return this.linecolor[i - 1];
                }
                else {
                    return this.predefinedcolors[i - 1];
                }
            }
            else if (this.linecolor.length < 1) {
                //  return tempcolor;
                return this.predefinedcolors[i - 1];
            }
        }))
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.html(this.callTooltip(d))
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            this.lineChartClick(d);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
        }));
        //lets plot labels here
        if (this.labelflag) {
            g.selectAll('label')
                .data(data)
                .enter()
                .append('text')
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                // if (this.labelcolor && this.labelcolor.length > 0) {
                //   return this.labelcolor;
                // } else {
                //   return "black";
                // }
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else if (this.linecolor.length > 0) {
                    if (this.linecolor[i - 1]) {
                        return this.linecolor[i - 1];
                    }
                    else {
                        return this.predefinedcolors[i - 1];
                    }
                }
                else if (this.linecolor.length < 1) {
                    //  return tempcolor;
                    return this.predefinedcolors[i - 1];
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @param {?} i
             * @return {?}
             */
            (d, i) => {
                return x(d.label);
            }))
                .attr("y", (/**
             * @param {?} d
             * @param {?} i
             * @return {?}
             */
            (d, i) => {
                return y(d.value) - 10;
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return d.value;
            }))
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.html(this.callTooltip(d))
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.lineChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
        }
    }
    /**
     * @param {?} d
     * @return {?}
     */
    lineChartClick(d) {
        /** @type {?} */
        let obj = {};
        obj[d.legend] = d.value;
        obj[this.xaxisname] = d.label;
        this.chartClick(obj);
    }
    /**
     * @param {?} tooltipdata
     * @return {?}
     */
    callTooltip(tooltipdata) {
        /** @type {?} */
        let obj = {};
        obj[tooltipdata.legend] = tooltipdata.value;
        obj[this.xaxisname] = tooltipdata.label;
        return this.toolTipForBar(obj);
    }
}
AmexioD3LineComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-line',
                template: `<div  #chartId *ngIf="drillableFlag" #divid (window:resize)="validateresize()"> 
    <table [ngClass]="validateData()"  style="width: 100%;" > 
            <ng-container *ngIf = "title.length > 0">
            <tr><td style="font-size: 18px; font-weight: bold; "> {{title}} </td></tr>
            </ng-container>
            <tr>
                <td>
                    <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
                    </svg>            
                </td>
            </tr>
            <tr  *ngIf="legend">
                <td style="display: block; padding: 5px;">
                        <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="legendClick($event)" 
                                            [data]="linelegends" style="height:100%;">
                        </amexio-d3-legend>
                </td>
            
            </tr>
    </table>
    <!-- <div *ngIf="data.length < 1" class="lmask" style="padding-top:50%">
        </div> -->
    </div>
    
    <!-- {{legends | json}} -->`
            },] },
];
AmexioD3LineComponent.ctorParameters = () => [
    { type: DeviceQueryService },
    { type: ChangeDetectorRef },
    { type: CommanDataService }
];
AmexioD3LineComponent.propDecorators = {
    labelcolor: [{ type: Input, args: ['label-color',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    drillid: [{ type: ViewChild, args: ['drillid',] }]
};
if (false) {
    /** @type {?} */
    AmexioD3LineComponent.prototype.labelcolor;
    /** @type {?} */
    AmexioD3LineComponent.prototype.chartId;
    /** @type {?} */
    AmexioD3LineComponent.prototype.divid;
    /** @type {?} */
    AmexioD3LineComponent.prototype.drillid;
    /** @type {?} */
    AmexioD3LineComponent.prototype.wt;
    /** @type {?} */
    AmexioD3LineComponent.prototype.rawdata;
    /** @type {?} */
    AmexioD3LineComponent.prototype.deviceQueryService;
    /**
     * @type {?}
     * @private
     */
    AmexioD3LineComponent.prototype.cdf;
    /** @type {?} */
    AmexioD3LineComponent.prototype.myservice;
}
//# sourceMappingURL=data:application/json;base64,