/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, ElementRef, ChangeDetectorRef, } from "@angular/core";
import { AmexioD3BaseChartComponent } from "../base/base.component";
import * as d3 from 'd3';
import { CommanDataService } from '../services/comman.data.service';
import { DeviceQueryService } from '../services/device.query.service';
var AmexioD3TimelineChartComponent = /** @class */ (function (_super) {
    tslib_1.__extends(AmexioD3TimelineChartComponent, _super);
    function AmexioD3TimelineChartComponent(myservice, cdf, device) {
        var _this = _super.call(this, 'timeline') || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.device = device;
        _this.svgheight = 200;
        _this.level = 0;
        _this.drillabledatakey = [];
        _this.labelcolor = "black";
        _this.labelflag = false;
        _this.lanes = [];
        _this.timelinechartData = [];
        _this.drillableFlag = true;
        _this.resizeflag = false;
        _this.monthlist = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
        return _this;
    }
    /**
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    resp_1 = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                }), (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.data = _this.getResponseData(resp_1);
                        _this.transformTODate(_this.data);
                        _this.transformData(_this.urldata);
                        _this.plotChart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.transformData(_this.data);
                    _this.plotChart();
                }), 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                resp = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
            }), (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(resp);
                    _this.drawChart();
                }), 0);
            }));
        }
    };
    /**
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.transformTODate(_this.data);
            _this.transformData(_this.urldata);
            _this.plotChart();
        }), 0);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = tslib_1.__values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.plotChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var laneLength = this.lanes.length;
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        var m = [20, 25, 15, 120];
        /** @type {?} */
        var //top right bottom left
        width = this.svgwidth - m[1] - m[3];
        /** @type {?} */
        var height = this.svgheight - m[0] - m[2];
        /** @type {?} */
        var miniHeight = laneLength * 12 + 50;
        /** @type {?} */
        var mainHeight = height - miniHeight - 50;
        /** @type {?} */
        var mindate;
        /** @type {?} */
        var maxdate;
        /** @type {?} */
        var barheight = 20;
        if (this.httpurl && this.httpmethod) {
            mindate = this.urldata[0][1].getFullYear(),
                maxdate = this.urldata[this.urldata.length - 1][2].getFullYear();
        }
        else {
            mindate = this.data[0][1].getFullYear(),
                maxdate = this.data[this.data.length - 1][2].getFullYear();
        }
        /** @type {?} */
        var x = d3.scaleTime()
            .domain([this.mindate, this.maxdate])
            .range([0, width]);
        /** @type {?} */
        var x1 = d3.scaleLinear()
            .domain([mindate, maxdate])
            .range([m[3], width + m[3]]);
        /** @type {?} */
        var y1 = d3.scaleLinear()
            .domain([0, laneLength])
            .range([0, miniHeight]);
        this.svg = d3.select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
            .attr("width", width + m[1] + m[3])
            .attr("height", height + m[0] + m[2]);
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x1).ticks(this.xtickscount)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x1).ticks(this.xtickscount));
            }
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x1).ticks(this.xtickscount)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        /** @type {?} */
        var mini = this.svg.append("g")
            .attr("transform", "translate(" + m[3] + "," + (mainHeight + m[0]) + ")")
            .attr("width", width)
            .attr("height", mainHeight)
            .attr("class", "mini");
        //mini lanes and texts
        mini.append("g").selectAll(".laneLines")
            .data(this.timelinechartData)
            .enter().append("line")
            .attr("y1", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return y1(d.lane); }))
            .attr("x2", width)
            .attr("y2", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return y1(d.lane); }))
            .attr("stroke", "lightgray");
        mini.append("g").selectAll(".laneText")
            .data(this.lanes)
            .enter().append("text")
            .text((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d; }))
            .attr("x", -m[1])
            .attr("y", (/**
         * @param {?} d
         * @param {?} i
         * @return {?}
         */
        function (d, i) { return y1(i + .5); }))
            .attr("dy", ".5ex")
            .attr("text-anchor", "end")
            .attr("class", "laneText");
        //mini item rects
        mini.append("g").selectAll("miniItems")
            .data(this.timelinechartData)
            .enter().append("rect")
            .attr("class", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return "miniItem" + d.lane; }))
            .attr("fill", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        function (d, index) { return _this.predefinedcolors[index]; }))
            .attr("x", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return x(d.start); }))
            .attr("y", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return (y1(d.lane + .5) - 5); }))
            .attr("width", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return Math.abs(x(d.end) - x(d.start));
        }))
            .attr("height", barheight)
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.html(_this.formTooltipData(d)
            //  this.toolTipForBar(d)
            // this.toolTipContent(d)
            )
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.timelineChartClick(d);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
        }));
        /** @type {?} */
        var barwidth;
        //mini labels
        /** @type {?} */
        var monthlist1 = this.monthlist;
        if (this.labelflag) {
            mini.append("g").selectAll(".miniLabels")
                .data(this.timelinechartData)
                .enter().append("text")
                .style("font-weight", "bold")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (_this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .style("font-size", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                barwidth = Math.min(Math.abs(x(d.end) - x(d.start)));
                return barwidth / 20 + "px";
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (d.id) {
                    /** @type {?} */
                    var startfullyear = d.start.getFullYear();
                    /** @type {?} */
                    var startMonth = monthlist1[d.start.getMonth()];
                    /** @type {?} */
                    var endfullyear = d.end.getFullYear();
                    /** @type {?} */
                    var endMonth = monthlist1[d.end.getMonth()];
                    /** @type {?} */
                    var date = startMonth + " " + startfullyear + "-" + endMonth + " " + endfullyear;
                    return date;
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return x(d.start);
            }))
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return y1(d.lane + .5); }))
                .attr("dy", "1.2ex")
                .attr("dx", "9ex")
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.html(_this.formTooltipData(d)
                //  this.toolTipForBar(d)
                // this.toolTipContent(d)
                )
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.timelineChartClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
        }
    };
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.formTooltipData = /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var object = {};
        /** @type {?} */
        var mlist = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
        /** @type {?} */
        var label1 = "Duration";
        /** @type {?} */
        var label2 = "Name";
        /** @type {?} */
        var startfullyear = tooltipData.start.getFullYear();
        /** @type {?} */
        var startMonth = mlist[tooltipData.start.getMonth()];
        /** @type {?} */
        var endfullyear = tooltipData.end.getFullYear();
        /** @type {?} */
        var endMonth = mlist[tooltipData.end.getMonth()];
        /** @type {?} */
        var date = startMonth + " " + startfullyear + "-" + endMonth + " " + endfullyear;
        object[label2 + ":"] = tooltipData.id;
        object[label1 + ":"] = date;
        return this.toolTipForBar(object);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.transformTODate = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.urldata = [];
        data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var dataobj = [];
            /** @type {?} */
            var startdate = new Date(element[1]);
            /** @type {?} */
            var enddate = new Date(element[2]);
            dataobj.push(element[0]);
            dataobj.push(startdate);
            dataobj.push(enddate);
            _this.urldata.push(dataobj);
        }));
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.transformData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.lanes = [];
        this.timelinechartData = [];
        this.legends = [];
        /** @type {?} */
        var datalength = data.length - 1;
        /** @type {?} */
        var length = data.length;
        this.mindate = data[0][1];
        this.maxdate = data[datalength][2];
        /** @type {?} */
        var mlist = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
        data.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        function (element, i) {
            /** @type {?} */
            var dataObj = { "lane": "", "id": "", "start": "", "end": "" };
            _this.lanes.push(element[0]);
            dataObj["lane"] = i;
            dataObj["id"] = element[0];
            dataObj["start"] = element[1];
            dataObj["end"] = element[2];
            _this.timelinechartData.push(dataObj);
        }));
        this.timelinechartData.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        function (element, i) {
            /** @type {?} */
            var startfullyear = element.start.getFullYear();
            /** @type {?} */
            var startMonth = mlist[element.start.getMonth()];
            /** @type {?} */
            var endfullyear = element.end.getFullYear();
            /** @type {?} */
            var endMonth = mlist[element.end.getMonth()];
            /** @type {?} */
            var date = startMonth + " " + startfullyear + "-" + endMonth + " " + endfullyear;
            /** @type {?} */
            var object = { 'label': _this.lanes[i], 'color': _this.predefinedcolors[i], 'Duration': date };
            _this.legends.push(object);
        }));
        /** @type {?} */
        var Obj = { "lane": "", "id": "", "start": "", "end": "" };
        Obj["lane"] = length;
        this.timelinechartData.push(Obj);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.timelineChartClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var object = {};
        /** @type {?} */
        var mlist = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
        /** @type {?} */
        var startfullyear = event.start.getFullYear();
        /** @type {?} */
        var startMonth = mlist[event.start.getMonth()];
        /** @type {?} */
        var endfullyear = event.end.getFullYear();
        /** @type {?} */
        var endMonth = mlist[event.end.getMonth()];
        /** @type {?} */
        var date = startMonth + " " + startfullyear + "-" + endMonth + " " + endfullyear;
        object["Name"] = event.id;
        object["Duration"] = date;
        this.chartClick(object);
    };
    //RESIZE STEP 4 STARTS
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.validateresize = 
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.wt) {
            }
            else {
                _this.resize();
            }
        }), 0);
    };
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.resize = 
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    function () {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            // this.resizewt = this.chartId.nativeElement.offsetWidth;
            // console.log("", new Date().getTime(), " ", this.resizewt);
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotChart();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.timelinelegendClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var obj = {};
        try {
            for (var _a = tslib_1.__values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                if (key !== 'color') {
                    obj[key] = value;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        this.onLegendClick.emit(obj);
        var e_2, _d;
    };
    AmexioD3TimelineChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-timeline',
                    template: "\n<div  #chartId *ngIf=\"drillableFlag\"  (window:resize)=\"validateresize()\" >\n    <table style=\"width: 100%;\" position=\" relative\">\n        <tr *ngIf = \"title.length > 0\">\n            <td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n        </tr>\n        <tr>\n            <td>\n                <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\" \n              >\n                </svg>\n            </td>\n        </tr>\n        <tr *ngIf=\"legend\">\n            <td style=\"display: block; padding: 5px;\">\n                <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"timelinelegendClick($event)\" [data]=\"legends\" style=\"height:100%;\">\n                </amexio-d3-legend>\n            </td>\n        </tr>\n    </table>\n    </div>"
                },] },
    ];
    AmexioD3TimelineChartComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef },
        { type: DeviceQueryService }
    ]; };
    AmexioD3TimelineChartComponent.propDecorators = {
        data: [{ type: Input, args: ['data',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        labelflag: [{ type: Input, args: ['label',] }],
        xtickscount: [{ type: Input, args: ['xaxis-interval',] }]
    };
    return AmexioD3TimelineChartComponent;
}(AmexioD3BaseChartComponent));
export { AmexioD3TimelineChartComponent };
if (false) {
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.data;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.chartId;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.divid;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.svgwidth;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.svgheight;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.datareader;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.level;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.target;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.drillabledatakey;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.labelcolor;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.labelflag;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.xtickscount;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.lanes;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.timelinechartData;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.mindate;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.maxdate;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.legends;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.drillableFlag;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.resizeflag;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.svg;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.urldata;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.monthlist;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.wt;
    /**
     * @type {?}
     * @private
     */
    AmexioD3TimelineChartComponent.prototype.myservice;
    /**
     * @type {?}
     * @private
     */
    AmexioD3TimelineChartComponent.prototype.cdf;
    /**
     * @type {?}
     * @private
     */
    AmexioD3TimelineChartComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,