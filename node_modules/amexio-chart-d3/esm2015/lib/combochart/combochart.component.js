/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, ChangeDetectorRef, } from "@angular/core";
import { AmexioD3BaseChartComponent } from "../base/base.component";
import { CommanDataService } from '../services/comman.data.service';
import * as d3 from 'd3';
import { DeviceQueryService } from '../services/device.query.service';
export class CombochartComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     * @param {?} device
     */
    constructor(myservice, cdf, device) {
        super('combochart');
        this.myservice = myservice;
        this.cdf = cdf;
        this.device = device;
        this.svgheight = 300;
        this.lineColor = "black";
        this.label = false;
        this.horizontal = false;
        this.barwidth = 0;
        //   @Input('line-data-index') lineInput: any;
        this.lineInput = [];
        this.barInput = [];
        this.showzeroflag = true;
        this.simpleComboFlag = false;
        this.completeconverteddata = [];
        this.simpleCombodata = [];
        this.groupbarchartArray = [];
        this.highercolorindex = 0;
        this.colorflag = false;
        this.keyArray = [];
        this.transformeddata = [];
        this.legendArray = [];
        this.legends = [];
        this.LineArray = [];
        this.outputData = [];
        this.higherdot1colorindex = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    resp = response;
                    this.httpresponse = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                }), (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.data = this.getResponseData(resp);
                        this.transformData();
                        this.initializeData();
                        this.plotD3Chart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(this.data);
                    this.transformData();
                    this.initializeData();
                    this.plotD3Chart();
                }), 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                resp = response;
                this.httpresponse = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
            }), (/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    // this.data = this.getResponseData(resp);
                    this.drawChart();
                }), 0);
            }));
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.data = this.getResponseData(this.httpresponse);
            this.transformData();
            this.initializeData();
            this.plotD3Chart();
        }), 0);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    transformData() {
        this.formDatastructure();
        this.tranasforsimplejson();
    }
    /**
     * @return {?}
     */
    formDatastructure() {
        // for line
        //call createjson() for complete data for line
        this.lineflag = true;
        this.createjson(this.data);
        //validate scenarios
        //validate scenario1: bar + line + data
        if ((this.barInput.length > 0) && (this.lineInput.length > 0) &&
            (this.data[0].length > 2)) {
            this.sc1 = true;
            this.createData1(this.barInput, this.data);
        }
        else if ((this.lineInput.length > 0) &&
            //##get it checked
            (this.data[0].length > 1)) {
            this.sc2 = true;
            //decide whether only line will be plot or bar also
            //chk if data[0] has any extra column leaving lineinput array
            /** @type {?} */
            let barflag;
            //if so set sc2barflag
            this.data[0].forEach((/**
             * @param {?} column
             * @return {?}
             */
            column => {
                this.lineInput.forEach((/**
                 * @param {?} linename
                 * @return {?}
                 */
                linename => {
                    if (column !== linename) {
                        this.sc2barflag = true;
                        // u can plot bar now
                    }
                }));
            }));
            this.createData1(null, this.data);
            //chk if sc2barflag is set or reset
            if (this.sc2barflag == true) {
                //plot bar  + line
            }
            else {
                // plot only line
            }
        } //else if of sc2 ends
        else if ((this.barInput.length > 0) && (this.data[0].length > 1)) {
            this.sc3 = true;
            this.createData1(this.barInput, this.data);
        }
        else if ((this.barInput.length < 1) && (this.lineInput.length < 1) && this.data[0].length > 1) {
            this.sc4 = true;
            this.createData1(null, this.data);
        }
    }
    /**
     * @param {?} inpdata
     * @param {?} fulldata
     * @return {?}
     */
    createData1(inpdata, fulldata) {
        /** @type {?} */
        let linearr = [];
        this.lineInput.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            linearr.push(element.column);
        }));
        this.firstrow = this.data[0];
        /** @type {?} */
        let dummyArray = [];
        dummyArray.push(0);
        fulldata.forEach((/**
         * @param {?} record
         * @param {?} index
         * @return {?}
         */
        (record, index) => {
            if (index === 0) {
                // THIS LOGIC IS USED FOR FINDING INDEXS AND ADD INTO dummyArray ARRAY
                record.forEach((/**
                 * @param {?} innerObject
                 * @param {?} innerIndex
                 * @return {?}
                 */
                (innerObject, innerIndex) => {
                    //validates scenario1 and 3
                    if (this.sc1 == true || this.sc3 == true) {
                        this.barInput.forEach((/**
                         * @param {?} elementOfInputData
                         * @return {?}
                         */
                        (elementOfInputData) => {
                            //aja
                            if (innerObject === elementOfInputData.column) {
                                //dummyarray has index stack
                                dummyArray.push(innerIndex);
                            }
                        }));
                    } //sc1 and sc3 validation done
                    //validates scenario 2
                    if (this.sc2 == true) {
                        if (this.sc2barflag == true) {
                            this.lineInput.forEach((/**
                             * @param {?} elementOfLineData
                             * @return {?}
                             */
                            (elementOfLineData) => {
                                if ((innerObject !== elementOfLineData.column) && (innerIndex !== 0)) {
                                    //dummyarray has index stack
                                    // dummyArray.forEach(dummyelement => {
                                    //   if(dummyelement !== innerIndex) {
                                    // if ( (linearr.includes(innerObject) == false)) {
                                    linearr.includes(innerObject);
                                    if (linearr.includes(innerObject) == false) {
                                        if (dummyArray.includes(innerIndex)) {
                                        }
                                        else {
                                            dummyArray.push(innerIndex);
                                            return;
                                        }
                                    } // }
                                    //   }
                                    // });
                                }
                            }));
                        }
                    }
                }));
                //validates scenario 4
                if (this.sc4 == true) {
                    // chk if barflag is set
                    /** @type {?} */
                    let columns = this.data[0].length;
                    if (columns > 1) {
                        dummyArray.push(1);
                    }
                }
                // dummyArray.push(0);
                /** @type {?} */
                let firstArray = [];
                // FOR FIRST RECORD
                dummyArray.forEach((/**
                 * @param {?} object
                 * @param {?} dummyIndex
                 * @return {?}
                 */
                (object, dummyIndex) => {
                    firstArray.push(record[object]);
                }));
                this.outputData.push(firstArray);
            }
            else {
                /** @type {?} */
                let newData = [];
                record.forEach((/**
                 * @param {?} innerObject
                 * @param {?} innerIndex
                 * @return {?}
                 */
                (innerObject, innerIndex) => {
                    dummyArray.forEach((/**
                     * @param {?} object
                     * @param {?} dummyIndex
                     * @return {?}
                     */
                    (object, dummyIndex) => {
                        if (innerIndex === object) {
                            newData.push(innerObject);
                        }
                    }));
                }));
                this.outputData.push(newData);
            }
        }));
        this.createjson(this.outputData);
        // this.formLegendData(this.outputData);
    }
    /**
     * @param {?} arraydata
     * @return {?}
     */
    createjson(arraydata) {
        /** @type {?} */
        let groupChartObj = { "labels": "", values: [] };
        this.groupbarchartArray = [];
        /** @type {?} */
        let firstRowOfData = arraydata[0];
        this.xaxisData = this.data[0][0];
        for (let i = 1; i < arraydata.length; i++) {
            /** @type {?} */
            let multiSeriesArray = [];
            /** @type {?} */
            let valueOfJ;
            for (let j = 1; j < arraydata[i].length; j++) {
                valueOfJ = arraydata[i][0];
                /** @type {?} */
                let singleBarObj = {};
                singleBarObj["value"] = arraydata[i][j];
                singleBarObj["label"] = firstRowOfData[j];
                singleBarObj["xaxis"] = arraydata[i][0];
                singleBarObj;
                multiSeriesArray.push(singleBarObj);
            }
            if (multiSeriesArray.length) {
                groupChartObj["values"] = multiSeriesArray;
                /** @type {?} */
                let newLabelsValues = valueOfJ;
                /** @type {?} */
                let newGroupDataObj = Object.assign({}, groupChartObj);
                newGroupDataObj['labels'] = newLabelsValues + '';
                this.groupbarchartArray.push(newGroupDataObj);
            }
        }
        if (this.lineflag) {
            this.groupbarchartArray;
            this.LineArray = this.groupbarchartArray;
        }
        else {
            this.groupbarchartArray = [];
            /** @type {?} */
            let firstRowOfData = arraydata[0];
            // this.xaxisData = this.data[0][0];
            for (let i = 1; i < arraydata.length; i++) {
                /** @type {?} */
                let multiSeriesArray = [];
                /** @type {?} */
                let valueOfJ;
                for (let j = 1; j < arraydata[i].length; j++) {
                    valueOfJ = arraydata[i][0];
                    /** @type {?} */
                    let singleBarObj = {};
                    singleBarObj["value"] = arraydata[i][j];
                    singleBarObj["label"] = firstRowOfData[j];
                    singleBarObj["xaxis"] = arraydata[i][0];
                    singleBarObj;
                    multiSeriesArray.push(singleBarObj);
                }
                if (multiSeriesArray.length) {
                    groupChartObj["values"] = multiSeriesArray;
                    /** @type {?} */
                    let newLabelsValues = valueOfJ;
                    /** @type {?} */
                    let newGroupDataObj = Object.assign({}, groupChartObj);
                    newGroupDataObj['labels'] = newLabelsValues + '';
                    this.groupbarchartArray.push(newGroupDataObj);
                }
            }
            this.groupbarchartArray;
        }
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        //plot multiseries chart
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        let colors = this.predefinedcolors;
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        const margin = { top: 20, right: 20, bottom: 50, left: 40 };
        /** @type {?} */
        const width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        const height = this.svgheight - margin.top - margin.bottom;
        this.svg = d3.select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        const x0 = d3.scaleBand()
            .rangeRound([0, width])
            .padding(0.2);
        /** @type {?} */
        const x1 = d3.scaleBand().padding(0.1);
        /** @type {?} */
        const y = d3.scaleLinear()
            .rangeRound([height, 0]);
        //setting x and y domains
        this.years = this.groupbarchartArray.map((/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return d.labels; }));
        /** @type {?} */
        let label = this.groupbarchartArray[0].values.map((/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return d.label; }));
        x0.domain(this.years);
        x1.domain(label).rangeRound([0, x0.bandwidth()]);
        y.domain([0, d3.max(this.groupbarchartArray, (/**
             * @param {?} labels
             * @return {?}
             */
            (labels) => { return d3.max(labels.values, (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return d.value; })); }))]);
        //dynamic barwidth
        if (this.barwidth > 0) {
            this.barwidth = this.barwidth;
        }
        else {
            this.barwidth = x0.bandwidth;
        }
        // add x axis to svg
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x0)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x0));
            }
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x0)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        //add y axis to svg
        this.svg.append("g")
            .call(d3.axisLeft(y)
            .ticks(this.tickscount));
        this.plotLineForMultiSeries(this.svg, y, height, width);
        //adding bars
        /** @type {?} */
        let slice = this.svg.selectAll(".slice")
            .data(this.groupbarchartArray)
            .enter().append("g")
            .attr("class", "g")
            .attr("transform", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return "translate(" + x0(d.labels) + ",0)"; }));
        slice.selectAll("rect")
            .data((/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return d.values; }))
            .enter().append("rect")
            .attr("width", x1.bandwidth)
            .attr("x", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return x1(d.label);
        }))
            .style("fill", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        (d, index) => {
            this.higherdot1colorindex = index;
            this.legendcolorindex = index;
            return colors[index];
        }))
            .attr("y", (/**
         * @param {?} d
         * @param {?} ind
         * @return {?}
         */
        (d, ind) => { return y(d.value); }))
            .attr("height", (/**
         * @param {?} d
         * @param {?} ind
         * @return {?}
         */
        (d, ind) => {
            return height - y(d.value);
        }))
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.html(this.setKey(d))
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        })).on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            this.groupbarClick(d);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
        }));
        // -------------------------------------------------------
        //bar label
        // if (this.labelflag) {
        slice.selectAll("text")
            .data((/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return d.values; }))
            .enter().append("text")
            .attr("opacity", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            /** @type {?} */
            let visibility = false;
            if (this.barInput.length > 0) {
                this.barInput.forEach((/**
                 * @param {?} barname
                 * @return {?}
                 */
                (barname) => {
                    if ((barname.column == d.label) && (barname.label == true)) {
                        visibility = true;
                        return;
                    }
                }));
                if (visibility) {
                    return 1;
                }
                else {
                    return 0;
                }
            } // outer if 
            else if ((this.sc4 == true) && (this.label == true)) {
                return 1;
            }
            else {
                return 0;
            }
        }))
            .attr("width", x1.bandwidth)
            .attr("x", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return x1(d.label) + x1.bandwidth() / 2;
        }))
            .attr("y", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return y(d.value); }))
            .attr("height", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return height - y(0); }))
            .style("font-weight", "bold")
            .style("font-size", "1vw")
            .attr("text-anchor", "middle")
            .attr("fill", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            if (this.labelcolor.length > 0) {
                return this.labelcolor;
            }
            else {
                return "black";
            }
        })) //bar label
            .text((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            if (this.showzeroflag) {
                return d.value;
            }
            else if (!this.showzeroflag) {
                if (d.value > 0) {
                    return d.value;
                }
            }
            // return d.value;
        }))
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.html(this.setKey(d))
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        })).on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            this.groupbarClick(d);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
        }));
        // }
        slice.selectAll("rect")
            .attr("y", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return y(d.value);
        }))
            .attr("height", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return height - y(d.value); }));
        // ------------------------------------------------------------------
        //sigle / multi line code starts here
        //code here fr multi line
        /** @type {?} */
        let i;
        // let lineName;
        /** @type {?} */
        let slice1 = this.svg.selectAll(".slice")
            .data(this.transformeddata)
            .enter().append("g")
            .attr("class", "g");
        this.higherdot1colorindex++;
        this.lineInput.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (element.color) {
            }
            else {
                element["color"] = colors[this.higherdot1colorindex];
                this.higherdot1colorindex++;
            }
        }));
        //line validation for scenario 1 and 2
        if (this.lineInput.length > 0) {
            for (i = 0; i < this.lineInput.length; i++) {
                /** @type {?} */
                let colorincrementer = 1;
                /** @type {?} */
                let lineName = this.lineInput[i];
                /** @type {?} */
                let valueline = d3.line()
                    .x((/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return x0(d[Object.keys(d)[0]]);
                }))
                    .y((/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => { return y(d[lineName.column]); }));
                /** @type {?} */
                let shift = margin.left + x1.bandwidth() / 2;
                slice1.append("path")
                    .data([this.transformeddata])
                    .attr("fill", "none")
                    .style("stroke", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    if (lineName.color) {
                        return lineName.color;
                    }
                }))
                    .attr("stroke-width", 1.5)
                    .attr("transform", "translate( " + x1.bandwidth() / 2 + ", 0 )")
                    .attr("d", valueline);
                // points1
                /** @type {?} */
                let dotslice = slice1.selectAll("dot")
                    .data(this.transformeddata)
                    .enter()
                    .append("circle")
                    .attr("class", "point1")
                    .attr("cursor", "pointer")
                    .style("fill", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    if (lineName.color) {
                        return lineName.color;
                    }
                }))
                    .attr("cx", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return x0(d[Object.keys(d)[0]]);
                }))
                    .attr("cy", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return y(d[lineName.column]);
                }))
                    .attr("r", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => { return 5; }))
                    .attr("transform", "translate( " + x1.bandwidth() / 2 + ", 0 )")
                    .on("mouseover", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.style("visibility", "visible");
                }))
                    .on("mousemove", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.html(this.formTooltipLineData(d, lineName, false))
                        .style("top", (d3.event.pageY - 10) + "px")
                        .style("left", (d3.event.pageX + 10) + "px");
                }))
                    .on("mouseout", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.style("visibility", "hidden");
                }))
                    .on("click", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    this.onComboLineClick(d, lineName, false);
                    this.fordrillableClick(this, d, event);
                    return tooltip.style("visibility", "hidden");
                }));
                // }
                // 
            } // line code ends
        } //lineinput if condition ends here
        else if ((this.sc4 == true) && (this.data[0].length > 2)) {
            //  lineName = this.lineInput[i];
            /** @type {?} */
            let valueline = d3.line()
                .x((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return x0(d[Object.keys(d)[0]]);
                //  return x1(d[Object.keys(d)[0]]);
            }))
                .y((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return y(d[Object.keys(d)[2]]
                // d[lineName]
                );
            }));
            /** @type {?} */
            let shift = margin.left + x1.bandwidth() / 2;
            slice1.append("path")
                .data([this.transformeddata])
                .attr("fill", "none")
                .style("stroke", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (this.lineColor !== "black") {
                    return this.lineColor;
                }
                else {
                    return colors[2];
                }
            }))
                .attr("stroke-width", 1.5)
                .attr("transform", "translate( " + x1.bandwidth() / 2 + ", 0 )")
                .attr("d", valueline);
            // points1
            slice1.selectAll("dot")
                .data(this.transformeddata).enter().append("circle")
                .attr("class", "point1")
                .attr("cursor", "pointer")
                .style("stroke", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (this.lineColor !== "black") {
                    return this.lineColor;
                }
                else {
                    return colors[2];
                }
            }))
                .style("fill", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (this.lineColor !== "black") {
                    return this.lineColor;
                }
                else {
                    return colors[2];
                }
            }))
                .attr("cx", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return x0(d[Object.keys(d)[0]]);
            }))
                .attr("cy", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return y(d[Object.keys(d)[2]]
                // d[lineName]
                );
            }))
                .attr("r", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return 5; }))
                .attr("transform", "translate( " + x1.bandwidth() / 2 + ", 0 )")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.html(this.formTooltipLineData(d, null, true))
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.onComboLineClick(d, null, true);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
        }
        //line label validation for scenario 1 and 2
        if (this.lineInput.length > 0) {
            //iteration on lineinput
            /** @type {?} */
            let labelpostoggle = false;
            for (i = 0; i < this.lineInput.length; i++) {
                /** @type {?} */
                let lineName1 = this.lineInput[i];
                if (lineName1.label) {
                    if (lineName1.label == true) {
                        slice1.selectAll("labels")
                            .data(this.transformeddata)
                            .enter().append("text")
                            .style("font-weight", "bold")
                            .attr("text-anchor", "middle")
                            .attr("fill", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        (d) => {
                            if (lineName1.labelcolor) {
                                return lineName1.labelcolor;
                            }
                            else {
                                return "black";
                            }
                        }))
                            .attr("x", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        (d) => {
                            return x0(d[Object.keys(d)[0]]);
                        }))
                            .attr("y", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        (d) => {
                            return y(d[lineName1.column]);
                        }))
                            .text((/**
                         * @param {?} d
                         * @return {?}
                         */
                        (d) => {
                            return d[lineName1.column];
                            // d[lineName];
                        }))
                            .attr("transform", "translate( " +
                            // margin.left
                            x1.bandwidth() / 2
                            // shift
                            + ", 19 )")
                            .attr("cursor", "pointer")
                            .on("mouseover", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        (d) => {
                            return tooltip.style("visibility", "visible");
                        }))
                            .on("mousemove", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        (d) => {
                            return tooltip.html(this.formTooltipLineData(d, lineName1, false))
                                .style("top", (d3.event.pageY - 10) + "px")
                                .style("left", (d3.event.pageX + 10) + "px");
                        }))
                            .on("mouseout", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        (d) => {
                            return tooltip.style("visibility", "hidden");
                        }))
                            .on("click", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        (d) => {
                            this.onComboLineClick(d, lineName1, false);
                            this.fordrillableClick(this, d, event);
                            return tooltip.style("visibility", "hidden");
                        }));
                    }
                }
            }
        }
        else if ((this.sc4 == true) && (this.data[0].length > 2) && (this.label == true)) {
            //trial line label for 4th scenario
            slice1.selectAll("labels")
                .data(this.transformeddata)
                .enter().append("text")
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return x0(d[Object.keys(d)[0]]);
            }))
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return y(d[Object.keys(d)[2]]
                // d[lineName]
                );
                //  + 50;
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return d[Object.keys(d)[2]];
                // d[lineName];
            }))
                .attr("transform", "translate( " +
                // margin.left
                x1.bandwidth() / 2
                // shift
                + ", 19 )")
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.html(this.formTooltipLineData(d, null, true))
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.onComboLineClick(d, null, true);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
        }
        this.formLegendData(this.outputData);
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    }
    /**
     * @param {?} d
     * @return {?}
     */
    setKey(d) {
        /** @type {?} */
        let object = {};
        object[d.label] = d.value;
        object[this.xaxisData] = d.xaxis;
        return (this.toolTipForBar(object));
    }
    /**
     * @return {?}
     */
    finMaxLineValue() {
        /** @type {?} */
        let lineValues = [];
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        (element) => {
            for (let [key, value] of Object.entries(element)) {
                this.lineInput.forEach((/**
                 * @param {?} line
                 * @return {?}
                 */
                (line) => {
                    if (line == key) {
                        lineValues.push(value);
                    }
                }));
            }
        }));
        /** @type {?} */
        let max = 0;
        /** @type {?} */
        let j;
        for (j = 0; j < lineValues.length; j++) {
            if (lineValues[j] > max) {
                max = lineValues[j];
            }
        }
        this.lineRange = max;
    }
    /**
     * @param {?} d
     * @return {?}
     */
    groupbarClick(d) {
        /** @type {?} */
        let object = {};
        object[d.label] = d.value;
        object[this.xaxisData] = d.xaxis;
        this.chartClick(object);
    }
    /**
     * @param {?} g
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLineForMultiSeries(g, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    }
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    validateresize() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.wt) {
            }
            else {
                this.resize();
            }
        }), 0);
    }
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    resize() {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotD3Chart();
    }
    /**
     * @return {?}
     */
    tranasforsimplejson() {
        this.transformeddata = [];
        this.keyArray = this.data[0];
        this.data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((/**
                 * @param {?} individualvalue
                 * @param {?} keyindex
                 * @return {?}
                 */
                (individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                })); //inner for loop ends
                this.transformeddata.push(DummyObject);
            } //if ends
        })); //outer for loop ends
    }
    /**
     * @param {?} data
     * @param {?} line
     * @param {?} flag
     * @return {?}
     */
    formTooltipLineData(data, line, flag) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(data)) {
            //flag is considered true for forth scenario
            if (flag == true) {
                if (key == this.data[0][2]) {
                    object[key] = value;
                }
            } // if foe true flag ends here
            else {
                if (key == line.column) {
                    object[key] = value;
                }
            } //else for false flag ends here
        }
        return this.toolTipForBar(object);
    }
    /**
     * @param {?} data
     * @param {?} line
     * @param {?} flag
     * @return {?}
     */
    onComboLineClick(data, line, flag) {
        // flag is considered true for 4th scenario
        /** @type {?} */
        let object = {};
        /** @type {?} */
        let i = 0;
        for (let [key, value] of Object.entries(data)) {
            if (i == 0 || i == 1) {
                if (key != "color") {
                    object[key] = value;
                }
            }
            if (flag == true) {
                if (key == this.data[0][2]) {
                    object[key] = value;
                }
            }
            else {
                if (key == line.column) {
                    object[key] = value;
                }
            }
            i++;
        }
        //this calls base class function
        this.comboLineClick(object);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    formLegendData(data) {
        this.keyArray = [];
        this.legendArray = [];
        data.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        (element, i) => {
            if (i == 0) {
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} index
                 * @return {?}
                 */
                (innerelement, index) => {
                    if (index > 0) {
                        this.legendArray[innerelement] = { 'data': [] };
                        this.keyArray.push(innerelement);
                    }
                }));
            }
        }));
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (index > 0) {
                /** @type {?} */
                let obj = {};
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} innerindex
                 * @return {?}
                 */
                (innerelement, innerindex) => {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        const key = this.keyArray[innerindex - 1];
                        obj[key] = element[innerindex];
                        /** @type {?} */
                        const legenddata = this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'label': element[0], 'value': element[innerindex] });
                        }
                    }
                }));
            }
        }));
        this.legends = [];
        this.keyArray.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            /** @type {?} */
            const legenddata = this.legendArray[element];
            /** @type {?} */
            let object = { 'label': element, 'color': this.predefinedcolors[index], 'data': legenddata.data };
            this.legends.push(object);
        }));
        //this logic will wrk fr sc1 and sc2
        if (this.lineInput.length > 0) {
            /** @type {?} */
            let inc = 1;
            this.lineInput.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                /** @type {?} */
                let object = {};
                object["label"] = element.column;
                if (element.color) {
                    object["color"] = element.color;
                }
                else {
                    object["color"] = this.predefinedcolors[this.legendcolorindex + inc];
                    inc++;
                }
                object["data"] = [];
                this.legends.push(object);
            }));
            this.legends;
            this.transformeddata;
            /** @type {?} */
            let tempdataarray = [];
            this.legends.forEach((/**
             * @param {?} legendelement
             * @return {?}
             */
            legendelement => {
                this.lineInput.forEach((/**
                 * @param {?} lineelement
                 * @return {?}
                 */
                lineelement => {
                    if (lineelement.column == legendelement.label) {
                        this.transformeddata.forEach((/**
                         * @param {?} singlerow
                         * @return {?}
                         */
                        singlerow => {
                            /** @type {?} */
                            let obj = {};
                            // d[Object.keys(d)[0]]
                            obj["label"] = singlerow[Object.keys(singlerow)[0]];
                            obj["value"] = singlerow[legendelement.label];
                            legendelement.data.push(obj);
                        }));
                    }
                }));
            }));
        }
        //this logic works for sc4
        // chk if line column exist in data1
        if ((this.sc4 == true) && (this.data[0].length > 2)) {
            /** @type {?} */
            let object = [];
            object["label"] = this.data[0][2];
            object["color"] = this.predefinedcolors[2];
            object["data"] = [];
            this.legends.push(object);
            /** @type {?} */
            let temparray = [];
            //logic to push data
            this.data.forEach((/**
             * @param {?} element
             * @param {?} index
             * @return {?}
             */
            (element, index) => {
                if (index > 0) {
                    /** @type {?} */
                    let object = [];
                    object["label"] = element[0];
                    object["value"] = element[2];
                    this.legends[1].data.push(object);
                }
            }));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    legendClick(event) {
        /** @type {?} */
        let obj = {};
        obj["label"] = event.label;
        /** @type {?} */
        let data = [];
        event.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let object = {};
            object[element.label] = element.value;
            data.push(object);
        }));
        obj["data"] = data;
        this.onLegendClick.emit(obj);
    }
}
CombochartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-combochart',
                template: ` 
<div #chartId *ngIf="drillableFlag" (window:resize)="validateresize()">
    <table *ngIf="data.length > 0" style="width: 100%;">
      <tr *ngIf = "title.length > 0">
          <td style="font-size: 18px; font-weight: bold; "> {{title}} </td>
      </tr>
      <tr>
          <td>
              <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
              </svg>
          </td>
      </tr>
      <tr *ngIf="legend">
          <td style="display: block; padding: 5px;">
              <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="legendClick($event)" [data]="legends" style="height:100%;">
              </amexio-d3-legend> 
          </td>
      </tr>
    </table>
    <div *ngIf="data.length < 1" class="lmask" style="padding-top:50%">
    </div>
    </div>`,
                styles: [``]
            },] },
];
CombochartComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef },
    { type: DeviceQueryService }
];
CombochartComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    lineColor: [{ type: Input, args: ['line-color',] }],
    label: [{ type: Input }],
    horizontal: [{ type: Input }],
    barwidth: [{ type: Input }],
    lineInput: [{ type: Input, args: ['line-data-index',] }],
    barInput: [{ type: Input, args: ['bar-data-index',] }],
    tickscount: [{ type: Input, args: ['yaxis-interval',] }],
    showzeroflag: [{ type: Input, args: ['show-zero-values',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }]
};
if (false) {
    /** @type {?} */
    CombochartComponent.prototype.svgwidth;
    /** @type {?} */
    CombochartComponent.prototype.svgheight;
    /** @type {?} */
    CombochartComponent.prototype.lineColor;
    /** @type {?} */
    CombochartComponent.prototype.label;
    /** @type {?} */
    CombochartComponent.prototype.horizontal;
    /** @type {?} */
    CombochartComponent.prototype.barwidth;
    /** @type {?} */
    CombochartComponent.prototype.lineInput;
    /** @type {?} */
    CombochartComponent.prototype.barInput;
    /** @type {?} */
    CombochartComponent.prototype.tickscount;
    /** @type {?} */
    CombochartComponent.prototype.showzeroflag;
    /** @type {?} */
    CombochartComponent.prototype.chartId;
    /** @type {?} */
    CombochartComponent.prototype.divid;
    /** @type {?} */
    CombochartComponent.prototype.simpleComboFlag;
    /** @type {?} */
    CombochartComponent.prototype.completeconverteddata;
    /** @type {?} */
    CombochartComponent.prototype.simpleCombodata;
    /** @type {?} */
    CombochartComponent.prototype.firstrow;
    /** @type {?} */
    CombochartComponent.prototype.years;
    /** @type {?} */
    CombochartComponent.prototype.data;
    /** @type {?} */
    CombochartComponent.prototype.svg;
    /** @type {?} */
    CombochartComponent.prototype.totalColumns;
    /** @type {?} */
    CombochartComponent.prototype.groupbarchartArray;
    /** @type {?} */
    CombochartComponent.prototype.highercolorindex;
    /** @type {?} */
    CombochartComponent.prototype.legendcolorindex;
    /** @type {?} */
    CombochartComponent.prototype.xaxisData;
    /** @type {?} */
    CombochartComponent.prototype.colorflag;
    /** @type {?} */
    CombochartComponent.prototype.keyArray;
    /** @type {?} */
    CombochartComponent.prototype.transformeddata;
    /** @type {?} */
    CombochartComponent.prototype.object;
    /** @type {?} */
    CombochartComponent.prototype.legendArray;
    /** @type {?} */
    CombochartComponent.prototype.httpresponse;
    /** @type {?} */
    CombochartComponent.prototype.offsetheight;
    /** @type {?} */
    CombochartComponent.prototype.lineRange;
    /** @type {?} */
    CombochartComponent.prototype.legends;
    /** @type {?} */
    CombochartComponent.prototype.totalcolumns;
    /** @type {?} */
    CombochartComponent.prototype.sc1;
    /** @type {?} */
    CombochartComponent.prototype.sc2;
    /** @type {?} */
    CombochartComponent.prototype.sc2barflag;
    /** @type {?} */
    CombochartComponent.prototype.sc3;
    /** @type {?} */
    CombochartComponent.prototype.sc4;
    /** @type {?} */
    CombochartComponent.prototype.LineArray;
    /** @type {?} */
    CombochartComponent.prototype.outputData;
    /** @type {?} */
    CombochartComponent.prototype.lineflag;
    /** @type {?} */
    CombochartComponent.prototype.higherdot1colorindex;
    /** @type {?} */
    CombochartComponent.prototype.wt;
    /**
     * @type {?}
     * @private
     */
    CombochartComponent.prototype.myservice;
    /**
     * @type {?}
     * @private
     */
    CombochartComponent.prototype.cdf;
    /**
     * @type {?}
     * @private
     */
    CombochartComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,