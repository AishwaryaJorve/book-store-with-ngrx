/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import { ViewDrillableComponent } from '../../base/view.component';
export class DrillableComponent extends ViewDrillableComponent {
    constructor() {
        super();
        this.mouseLocation = { left: 0, top: 0 };
        this.componentcounter = 1;
        this.disableFlag = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ComponentDataArray = this.getComponentData();
        this.getData(this.ComponentDataArray);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    getData(data) {
        data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (element.level !== 1) {
                element.drillableFlag = false;
                element.drillableEvent.subscribe((/**
                 * @param {?} eventdata
                 * @return {?}
                 */
                (eventdata) => {
                    this.hideUI(eventdata);
                    this.sameLevelChart(eventdata);
                    this.ShowUI(eventdata);
                }));
            }
            else {
                this.disableFlag = false;
                element.drillableEvent.subscribe((/**
                 * @param {?} eventdata
                 * @return {?}
                 */
                (eventdata) => {
                    this.hideUI(eventdata);
                    this.sameLevelChart(eventdata);
                    this.ShowUI(eventdata);
                }));
            }
        }));
    }
    /**
     * @param {?} eventRef
     * @return {?}
     */
    hideUI(eventRef) {
        this.ComponentDataArray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (element.level == eventRef.ref.level) {
                eventRef.ref.drillableFlag = false;
            }
        }));
    }
    /**
     * @param {?} eventRef
     * @return {?}
     */
    ShowUI(eventRef) {
        this.eventData = [];
        this.eventData = eventRef;
        this.ComponentDataArray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (eventRef.ref.target == element.level) {
                if (this.arrayofsameLevel.length == 1) {
                    this.disableFlag = true;
                    element.drillableFlag = true;
                    element.fetchData(eventRef.node);
                    this.componentcounter = element.level;
                }
                else {
                    this.contextmenuFlag = true;
                    this.mouseLocation.left = eventRef.event.clientX;
                    this.mouseLocation.top = eventRef.event.clientY;
                    this.contextStyle = this.getContextMenuStyle();
                }
            }
        }));
        if (this.componentcounter == eventRef.ref.level) {
            eventRef.ref.drillableFlag = true;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    previouschartClick(event) {
        /** @type {?} */
        let chartLevel = this.componentcounter - 1;
        this.ComponentDataArray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (chartLevel == element.level) {
                element.drillableFlag = true;
                element.drawChart();
            }
            else if (this.componentcounter == element.level) {
                element.drillableFlag = false;
            }
        }));
        if (this.componentcounter == 2) {
            this.disableFlag = false;
        }
        this.componentcounter = chartLevel;
    }
    /**
     * @param {?} eventRef
     * @return {?}
     */
    sameLevelChart(eventRef) {
        this.arrayofsameLevel = [];
        this.ComponentDataArray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (eventRef.ref.target == element.level) {
                this.arrayofsameLevel = this.arrayofsameLevel.concat(element);
            }
        }));
    }
    //Method Creates style if two same targets found.
    /**
     * @return {?}
     */
    getContextMenuStyle() {
        return {
            'cursor': 'default',
            'position': 'fixed',
            'display': this.contextmenuFlag ? 'block' : 'none',
            'left': this.mouseLocation.left + 'px',
            'top': this.mouseLocation.top + 'px',
            'box-shadow': '1px 1px 2px #000000',
            'width': '15%',
        };
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    getListPosition(elementRef) {
        /** @type {?} */
        const height = 240;
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onContextNodeClick(event) {
        this.componentcounter = 0;
        this.contextmenuFlag = false;
        this.eventData.ref.drillableFlag = false;
        this.disableFlag = true;
        event.drillableFlag = true;
        event.fetchData(this.eventData.node);
        this.componentcounter = event.level;
        if (this.componentcounter == this.eventData.ref.level) {
            this.eventData.ref.drillableFlag = true;
        }
    }
    /**
     * @return {?}
     */
    onCloseClick() {
        this.contextmenuFlag = false;
    }
}
DrillableComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-drillable',
                template: `
<div > 
    <ng-container *ngIf="disableFlag">
            <button type="button" class="button"
             (click)="previouschartClick($event)">
             <i class="fa fa-arrow-left"></i> 
             
            </button>
</ng-container>

<ng-content></ng-content>

</div>

<span [ngStyle]="contextStyle" >
  <ul *ngIf="contextmenuFlag" class="close-thik" class="context-menu-list"  >
    <span (click)="onCloseClick()" class="close"><i class="fa fa-close"></i></span>
  <li (click)="onContextNodeClick(itemConfig)" class="context-menu-list-items" 
  *ngFor="let itemConfig of arrayofsameLevel">
  <em [ngStyle]="{'padding-left': itemConfig.icon ? '5px':'19px'}"></em>
  <span style="white-space: nowrap;display: inline ; padding-left:5px">{{itemConfig.title}}
  </span>
  </li>
  </ul>
  </span>
  `,
                styles: [`.button{position:relative;border:1px solid #555;font-weight:400;color:#000;padding:.5rem 1rem;text-align:center;transition-duration:.4s;text-decoration:none;overflow:hidden;cursor:pointer;border-radius:3px}.button:after{content:"";background:#000;display:block;position:absolute;padding-top:300%;padding-left:350%;margin-left:-20px!important;margin-top:-120%;opacity:0;transition:.8s}.button:active:after{padding:0;margin:0;opacity:1;transition:none}.context-menu-list{display:block;position:absolute;flex-direction:column;min-width:180px;cursor:pointer;max-height:150px;z-index:1;padding:10px 0;overflow-y:auto;background-color:#fff!important;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.context-menu-list .context-menu-list-items{text-decoration:none;font-size:14px!important;padding:5px;display:block}.close{float:right;padding-right:8px;cursor:pointer}`]
            },] },
];
DrillableComponent.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    DrillableComponent.prototype.mouseLocation;
    /** @type {?} */
    DrillableComponent.prototype.contextmenuFlag;
    /** @type {?} */
    DrillableComponent.prototype.contextStyle;
    /** @type {?} */
    DrillableComponent.prototype.ComponentDataArray;
    /** @type {?} */
    DrillableComponent.prototype.componentcounter;
    /** @type {?} */
    DrillableComponent.prototype.disableFlag;
    /** @type {?} */
    DrillableComponent.prototype.arrayofsameLevel;
    /** @type {?} */
    DrillableComponent.prototype.eventData;
    /** @type {?} */
    DrillableComponent.prototype.rightClickNodeData;
    /** @type {?} */
    DrillableComponent.prototype.posixUp;
    /** @type {?} */
    DrillableComponent.prototype.levelArray;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJpbGxhYmxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FtZXhpby1jaGFydC1kMy8iLCJzb3VyY2VzIjpbImxpYi9kcmlsbGFibGUvZHJpbGxhYmxlL2RyaWxsYWJsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUF3Q25FLE1BQU0seUJBQTBCLFNBQVEsc0JBQXNCO0lBYTVEO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFaVixrQkFBYSxHQUFrQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBSW5FLHFCQUFnQixHQUFXLENBQUMsQ0FBQztRQUM3QixnQkFBVyxHQUFZLEtBQUssQ0FBQztJQVE3QixDQUFDOzs7O0lBRUQsUUFBUTtJQUdSLENBQUM7Ozs7SUFFRCxlQUFlO1FBRWIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ2xELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFFeEMsQ0FBQzs7Ozs7SUFDRCxPQUFPLENBQUMsSUFBUztRQUNmLElBQUksQ0FBQyxPQUFPOzs7O1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFFckIsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN4QixPQUFPLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztnQkFDOUIsT0FBTyxDQUFDLGNBQWMsQ0FBQyxTQUFTOzs7O2dCQUFDLENBQUMsU0FBYyxFQUFFLEVBQUU7b0JBQ2xELElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7b0JBQ3ZCLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxD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WUEzTEYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxrQkFBa0I7Z0JBQzVCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXlCVDtnQkFDRCxNQUFNLEVBQUUsQ0FBQyxxNUJBQXE1QixDQUFDO2FBQ2g2Qjs7Ozs7SUFLQywyQ0FBbUU7O0lBQ25FLDZDQUF5Qjs7SUFDekIsMENBQWtCOztJQUNsQixnREFBdUI7O0lBQ3ZCLDhDQUE2Qjs7SUFDN0IseUNBQTZCOztJQUM3Qiw4Q0FBc0I7O0lBQ3RCLHVDQUFlOztJQUNmLGdEQUF3Qjs7SUFDeEIscUNBQWlCOztJQUNqQix3Q0FBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBWaWV3RHJpbGxhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vYmFzZS92aWV3LmNvbXBvbmVudCc7XG5cbmltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0luaXQsIENvbnRlbnRDaGlsZHJlbixcbiAgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBRdWVyeUxpc3QsIFZpZXdDaGlsZCxcbiAgVmlld0NoaWxkcmVuXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhbWV4aW8tZHJpbGxhYmxlJyxcbiAgdGVtcGxhdGU6IGBcbjxkaXYgPiBcbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiZGlzYWJsZUZsYWdcIj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAoY2xpY2spPVwicHJldmlvdXNjaGFydENsaWNrKCRldmVudClcIj5cbiAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLWFycm93LWxlZnRcIj48L2k+IFxuICAgICAgICAgICAgIFxuICAgICAgICAgICAgPC9idXR0b24+XG48L25nLWNvbnRhaW5lcj5cblxuPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuXG48L2Rpdj5cblxuPHNwYW4gW25nU3R5bGVdPVwiY29udGV4dFN0eWxlXCIgPlxuICA8dWwgKm5nSWY9XCJjb250ZXh0bWVudUZsYWdcIiBjbGFzcz1cImNsb3NlLXRoaWtcIiBjbGFzcz1cImNvbnRleHQtbWVudS1saXN0XCIgID5cbiAgICA8c3BhbiAoY2xpY2spPVwib25DbG9zZUNsaWNrKClcIiBjbGFzcz1cImNsb3NlXCI+PGkgY2xhc3M9XCJmYSBmYS1jbG9zZVwiPjwvaT48L3NwYW4+XG4gIDxsaSAoY2xpY2spPVwib25Db250ZXh0Tm9kZUNsaWNrKGl0ZW1Db25maWcpXCIgY2xhc3M9XCJjb250ZXh0LW1lbnUtbGlzdC1pdGVtc1wiIFxuICAqbmdGb3I9XCJsZXQgaXRlbUNvbmZpZyBvZiBhcnJheW9mc2FtZUxldmVsXCI+XG4gIDxlbSBbbmdTdHlsZV09XCJ7J3BhZGRpbmctbGVmdCc6IGl0ZW1Db25maWcuaWNvbiA/ICc1cHgnOicxOXB4J31cIj48L2VtPlxuICA8c3BhbiBzdHlsZT1cIndoaXRlLXNwYWNlOiBub3dyYXA7ZGlzcGxheTogaW5saW5lIDsgcGFkZGluZy1sZWZ0OjVweFwiPnt7aXRlbUNvbmZpZy50aXRsZX19XG4gIDwvc3Bhbj5cbiAgPC9saT5cbiAgPC91bD5cbiAgPC9zcGFuPlxuICBgLFxuICBzdHlsZXM6IFtgLmJ1dHRvbntwb3NpdGlvbjpyZWxhdGl2ZTtib3JkZXI6MXB4IHNvbGlkICM1NTU7Zm9udC13ZWlnaHQ6NDAwO2NvbG9yOiMwMDA7cGFkZGluZzouNXJlbSAxcmVtO3RleHQtYWxpZ246Y2VudGVyO3RyYW5zaXRpb24tZHVyYXRpb246LjRzO3RleHQtZGVjb3JhdGlvbjpub25lO292ZXJmbG93OmhpZGRlbjtjdXJzb3I6cG9pbnRlcjtib3JkZXItcmFkaXVzOjNweH0uYnV0dG9uOmFmdGVye2NvbnRlbnQ6XCJcIjtiYWNrZ3JvdW5kOiMwMDA7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTtwYWRkaW5nLXRvcDozMDAlO3BhZGRpbmctbGVmdDozNTAlO21hcmdpbi1sZWZ0Oi0yMHB4IWltcG9ydGFudDttYXJnaW4tdG9wOi0xMjAlO29wYWNpdHk6MDt0cmFuc2l0aW9uOi44c30uYnV0dG9uOmFjdGl2ZTphZnRlcntwYWRkaW5nOjA7bWFyZ2luOjA7b3BhY2l0eToxO3RyYW5zaXRpb246bm9uZX0uY29udGV4dC1tZW51LWxpc3R7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTtmbGV4LWRpcmVjdGlvbjpjb2x1bW47bWluLXdpZHRoOjE4MHB4O2N1cnNvcjpwb2ludGVyO21heC1oZWlnaHQ6MTUwcHg7ei1pbmRleDoxO3BhZGRpbmc6MTBweCAwO292ZXJmbG93LXk6YXV0bztiYWNrZ3JvdW5kLWNvbG9yOiNmZmYhaW1wb3J0YW50O2JveC1zaGFkb3c6MCA1cHggNXB4IC0zcHggcmdiYSgwLDAsMCwuMiksMCA4cHggMTBweCAxcHggcmdiYSgwLDAsMCwuMTQpLDAgM3B4IDE0cHggMnB4IHJnYmEoMCwwLDAsLjEyKX0uY29udGV4dC1tZW51LWxpc3QgLmNvbnRleHQtbWVudS1saXN0LWl0ZW1ze3RleHQtZGVjb3JhdGlvbjpub25lO2ZvbnQtc2l6ZToxNHB4IWltcG9ydGFudDtwYWRkaW5nOjVweDtkaXNwbGF5OmJsb2NrfS5jbG9zZXtmbG9hdDpyaWdodDtwYWRkaW5nLXJpZ2h0OjhweDtjdXJzb3I6cG9pbnRlcn1gXVxufSlcblxuXG5leHBvcnQgY2xhc3MgRHJpbGxhYmxlQ29tcG9uZW50IGV4dGVuZHMgVmlld0RyaWxsYWJsZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgbW91c2VMb2NhdGlvbjogeyBsZWZ0OiBudW1iZXI7IHRvcDogbnVtYmVyIH0gPSB7IGxlZnQ6IDAsIHRvcDogMCB9O1xuICBjb250ZXh0bWVudUZsYWc6IGJvb2xlYW47XG4gIGNvbnRleHRTdHlsZTogYW55O1xuICBDb21wb25lbnREYXRhQXJyYXk6IGFueVxuICBjb21wb25lbnRjb3VudGVyOiBudW1iZXIgPSAxO1xuICBkaXNhYmxlRmxhZzogYm9vbGVhbiA9IGZhbHNlO1xuICBhcnJheW9mc2FtZUxldmVsOiBhbnk7XG4gIGV2ZW50RGF0YTogYW55O1xuICByaWdodENsaWNrTm9kZURhdGE6IGFueTtcbiAgcG9zaXhVcDogYm9vbGVhbjtcbiAgbGV2ZWxBcnJheTogYW55O1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG5cblxuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuXG4gICAgdGhpcy5Db21wb25lbnREYXRhQXJyYXkgPSB0aGlzLmdldENvbXBvbmVudERhdGEoKTtcbiAgICB0aGlzLmdldERhdGEodGhpcy5Db21wb25lbnREYXRhQXJyYXkpO1xuXG4gIH1cbiAgZ2V0RGF0YShkYXRhOiBhbnkpIHtcbiAgICBkYXRhLmZvckVhY2goZWxlbWVudCA9PiB7XG5cbiAgICAgIGlmIChlbGVtZW50LmxldmVsICE9PSAxKSB7XG4gICAgICAgIGVsZW1lbnQuZHJpbGxhYmxlRmxhZyA9IGZhbHNlO1xuICAgICAgICBlbGVtZW50LmRyaWxsYWJsZUV2ZW50LnN1YnNjcmliZSgoZXZlbnRkYXRhOiBhbnkpID0+IHtcbiAgICAgICAgICB0aGlzLmhpZGVVSShldmVudGRhdGEpO1xuICAgICAgICAgIHRoaXMuc2FtZUxldmVsQ2hhcnQoZXZlbnRkYXRhKTtcbiAgICAgICAgICB0aGlzLlNob3dVSShldmVudGRhdGEpO1xuXG5cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmRpc2FibGVGbGFnID0gZmFsc2U7XG4gICAgICAgIGVsZW1lbnQuZHJpbGxhYmxlRXZlbnQuc3Vic2NyaWJlKChldmVudGRhdGE6IGFueSkgPT4ge1xuICAgICAgICAgIHRoaXMuaGlkZVVJKGV2ZW50ZGF0YSk7XG4gICAgICAgICAgdGhpcy5zYW1lTGV2ZWxDaGFydChldmVudGRhdGEpO1xuICAgICAgICAgIHRoaXMuU2hvd1VJKGV2ZW50ZGF0YSk7XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSk7XG5cbiAgfVxuXG4gIGhpZGVVSShldmVudFJlZjogYW55KSB7XG4gICAgdGhpcy5Db21wb25lbnREYXRhQXJyYXkuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGlmIChlbGVtZW50LmxldmVsID09IGV2ZW50UmVmLnJlZi5sZXZlbCkge1xuICAgICAgICBldmVudFJlZi5yZWYuZHJpbGxhYmxlRmxhZyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH1cblxuICBTaG93VUkoZXZlbnRSZWY6IGFueSkge1xuICAgIHRoaXMuZXZlbnREYXRhID0gW107XG4gICAgdGhpcy5ldmVudERhdGEgPSBldmVudFJlZjtcbiAgICB0aGlzLkNvbXBvbmVudERhdGFBcnJheS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgaWYgKGV2ZW50UmVmLnJlZi50YXJnZXQgPT0gZWxlbWVudC5sZXZlbCkge1xuICAgICAgICBpZiAodGhpcy5hcnJheW9mc2FtZUxldmVsLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgdGhpcy5kaXNhYmxlRmxhZyA9IHRydWU7XG4gICAgICAgICAgZWxlbWVudC5kcmlsbGFibGVGbGFnID0gdHJ1ZTtcbiAgICAgICAgICBlbGVtZW50LmZldGNoRGF0YShldmVudFJlZi5ub2RlKTtcbiAgICAgICAgICB0aGlzLmNvbXBvbmVudGNvdW50ZXIgPSBlbGVtZW50LmxldmVsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHRoaXMuY29udGV4dG1lbnVGbGFnID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLm1vdXNlTG9jYXRpb24ubGVmdCA9IGV2ZW50UmVmLmV2ZW50LmNsaWVudFg7XG4gICAgICAgICAgdGhpcy5tb3VzZUxvY2F0aW9uLnRvcCA9IGV2ZW50UmVmLmV2ZW50LmNsaWVudFk7XG4gICAgICAgICAgdGhpcy5jb250ZXh0U3R5bGUgPSB0aGlzLmdldENvbnRleHRNZW51U3R5bGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICBpZiAodGhpcy5jb21wb25lbnRjb3VudGVyID09IGV2ZW50UmVmLnJlZi5sZXZlbCkge1xuICAgICAgZXZlbnRSZWYucmVmLmRyaWxsYWJsZUZsYWcgPSB0cnVlO1xuICAgIH1cblxuICB9XG4gIHByZXZpb3VzY2hhcnRDbGljayhldmVudDogYW55KSB7XG4gICAgbGV0IGNoYXJ0TGV2ZWwgPSB0aGlzLmNvbXBvbmVudGNvdW50ZXIgLSAxO1xuICAgIHRoaXMuQ29tcG9uZW50RGF0YUFycmF5LmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICBpZiAoY2hhcnRMZXZlbCA9PSBlbGVtZW50LmxldmVsKSB7XG4gICAgICAgIGVsZW1lbnQuZHJpbGxhYmxlRmxhZyA9IHRydWU7XG4gICAgICAgIGVsZW1lbnQuZHJhd0NoYXJ0KCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuY29tcG9uZW50Y291bnRlciA9PSBlbGVtZW50LmxldmVsKSB7XG4gICAgICAgIGVsZW1lbnQuZHJpbGxhYmxlRmxhZyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICh0aGlzLmNvbXBvbmVudGNvdW50ZXIgPT0gMikge1xuICAgICAgdGhpcy5kaXNhYmxlRmxhZyA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmNvbXBvbmVudGNvdW50ZXIgPSBjaGFydExldmVsO1xuICB9XG5cblxuICBzYW1lTGV2ZWxDaGFydChldmVudFJlZjogYW55KSB7XG4gIFxuICAgIHRoaXMuYXJyYXlvZnNhbWVMZXZlbCA9IFtdO1xuICAgIHRoaXMuQ29tcG9uZW50RGF0YUFycmF5LmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICBpZiAoZXZlbnRSZWYucmVmLnRhcmdldCA9PSBlbGVtZW50LmxldmVsKSB7XG4gICAgICAgIHRoaXMuYXJyYXlvZnNhbWVMZXZlbCA9IHRoaXMuYXJyYXlvZnNhbWVMZXZlbC5jb25jYXQoZWxlbWVudCk7XG5cbiAgICAgIH1cblxuICAgIH0pO1xuICB9XG5cbiAgLy9NZXRob2QgQ3JlYXRlcyBzdHlsZSBpZiB0d28gc2FtZSB0YXJnZXRzIGZvdW5kLlxuICBnZXRDb250ZXh0TWVudVN0eWxlKCkge1xuICAgIHJldHVybiB7XG4gICAgICAnY3Vyc29yJzogJ2RlZmF1bHQnLFxuICAgICAgJ3Bvc2l0aW9uJzogJ2ZpeGVkJyxcbiAgICAgICdkaXNwbGF5JzogdGhpcy5jb250ZXh0bWVudUZsYWcgPyAnYmxvY2snIDogJ25vbmUnLFxuICAgICAgJ2xlZnQnOiB0aGlzLm1vdXNlTG9jYXRpb24ubGVmdCArICdweCcsXG4gICAgICAndG9wJzogdGhpcy5tb3VzZUxvY2F0aW9uLnRvcCArICdweCcsXG4gICAgICAnYm94LXNoYWRvdyc6ICcxcHggMXB4IDJweCAjMDAwMDAwJyxcbiAgICAgICd3aWR0aCc6ICcxNSUnLFxuICAgIH07XG4gIH1cblxuXG5cbiAgZ2V0TGlzdFBvc2l0aW9uKGVsZW1lbnRSZWY6IGFueSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGhlaWdodCA9IDI0MDtcbiAgICBpZiAoKHdpbmRvdy5zY3JlZW4uaGVpZ2h0IC0gZWxlbWVudFJlZi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20pIDwgaGVpZ2h0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIG9uQ29udGV4dE5vZGVDbGljayhldmVudDogYW55KSB7XG4gICAgdGhpcy5jb21wb25lbnRjb3VudGVyID0gMDtcbiAgICB0aGlzLmNvbnRleHRtZW51RmxhZyA9IGZhbHNlO1xuICAgIHRoaXMuZXZlbnREYXRhLnJlZi5kcmlsbGFibGVGbGFnID0gZmFsc2U7XG4gICAgdGhpcy5kaXNhYmxlRmxhZyA9IHRydWU7XG4gICAgZXZlbnQuZHJpbGxhYmxlRmxhZyA9IHRydWU7XG4gICAgZXZlbnQuZmV0Y2hEYXRhKHRoaXMuZXZlbnREYXRhLm5vZGUpO1xuICAgIHRoaXMuY29tcG9uZW50Y291bnRlciA9IGV2ZW50LmxldmVsO1xuXG4gICAgaWYgKHRoaXMuY29tcG9uZW50Y291bnRlciA9PSB0aGlzLmV2ZW50RGF0YS5yZWYubGV2ZWwpIHtcbiAgICAgIHRoaXMuZXZlbnREYXRhLnJlZi5kcmlsbGFibGVGbGFnID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBvbkNsb3NlQ2xpY2soKSB7XG4gICAgdGhpcy5jb250ZXh0bWVudUZsYWcgPSBmYWxzZTtcbiAgfVxuXG59XG4iXX0=