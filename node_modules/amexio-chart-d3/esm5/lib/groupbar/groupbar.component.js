/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, ElementRef, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { AmexioD3BaseChartComponent } from "../base/base.component";
import { CommanDataService } from '../services/comman.data.service';
import { DeviceQueryService } from '../services/device.query.service';
import * as d3 from 'd3';
var GroupbarComponent = /** @class */ (function (_super) {
    tslib_1.__extends(GroupbarComponent, _super);
    function GroupbarComponent(myservice, cdf, device) {
        var _this = _super.call(this, 'multibar') || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.device = device;
        _this.data = [];
        _this.legend = true;
        _this.barwidth = 0;
        _this.onLegendClick = new EventEmitter();
        _this.svgheight = 300;
        _this.showzeroflag = true;
        _this.groupbarchartArray = [];
        _this.urllegendArray = [];
        _this.defualtColors = [];
        _this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
        return _this;
    }
    /**
     * @return {?}
     */
    GroupbarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            /** @type {?} */
            var res_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    res_1 = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                }), (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.data = _this.getResponseData(res_1);
                        _this.initializeData();
                        _this.plotD3Chart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.initializeData();
                    _this.plotD3Chart();
                }), 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    GroupbarComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                resp = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
            }), (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(resp);
                    _this.drawChart();
                }), 0);
            }));
        }
    };
    /**
     * @return {?}
     */
    GroupbarComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.initializeData();
            _this.plotD3Chart();
        }), 0);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    GroupbarComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = tslib_1.__values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @return {?}
     */
    GroupbarComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        this.convertToJSON();
        this.plotGroupBarChart();
        this.transformData(this.data);
    };
    /**
     * @private
     * @return {?}
     */
    GroupbarComponent.prototype.plotGroupBarChart = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        this.defualtColors = this.predefinedcolors;
        // this.svgwidth = this.chartId.nativeElement.offsetWidth;
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        var margin = { top: 20, right: 20, bottom: 50, left: 40 };
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height = this.svgheight - margin.top - margin.bottom;
        this.svg = d3.select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        var x0 = d3.scaleBand()
            .rangeRound([0, width])
            .padding(0.2);
        /** @type {?} */
        var x1 = d3.scaleBand().padding(0.1);
        /** @type {?} */
        var y = d3.scaleLinear()
            .rangeRound([height, 0]);
        //setting x and y domains
        this.years = this.groupbarchartArray.map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.labels; }));
        /** @type {?} */
        var label = this.groupbarchartArray[0].values.map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.label; }));
        x0.domain(this.years);
        x1.domain(label).rangeRound([0, x0.bandwidth()]);
        y.domain([0, d3.max(this.groupbarchartArray, (/**
             * @param {?} labels
             * @return {?}
             */
            function (labels) { return d3.max(labels.values, (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d.value; })); }))]);
        //dynamic barwidth
        if (this.barwidth > 0) {
            this.barwidth = this.barwidth;
        }
        else {
            this.barwidth = x0.bandwidth;
        }
        // add x axis to svg
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x0)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x0));
            }
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x0)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        //add y axis to svg
        this.svg.append("g")
            .call(d3.axisLeft(y)
            .ticks(10).ticks(this.tickscount));
        this.plotLine(this.svg, y, height, width);
        // svg.select('.y').transition().duration(500).delay(1300).style('opacity', '1');
        //adding bars
        /** @type {?} */
        var slice = this.svg.selectAll(".slice")
            .data(this.groupbarchartArray)
            .enter().append("g")
            .attr("class", "g")
            .attr("transform", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            /** @type {?} */
            var flag = false;
            (d.values).forEach((/**
             * @param {?} element
             * @param {?} index
             * @return {?}
             */
            function (element, index) {
                //splice 0 
                if (element.value && (element.value < 1)) {
                    d.values.splice(0, index);
                }
            }));
            return "translate(" + x0(d.labels) + ",0)";
        }));
        slice.selectAll("rect")
            .data((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.values; }))
            .enter().
            append("rect")
            .attr("width", x1.bandwidth)
            .attr("x", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return x1(d.label);
        }))
            .style("fill", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        function (d, index) {
            if (_this.colors.length > 0) {
                if (_this.colors[index]) {
                    return _this.colors[index];
                }
                else {
                    return _this.defualtColors[index];
                }
            }
            else {
                return _this.defualtColors[index];
            }
        }))
            .attr("y", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return y(0); }))
            .attr("height", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return height - y(0); }))
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.html(_this.setKey(d))
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        })).on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.groupbarClick(d);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
        }));
        // -------------------------------------------------------
        if (this.labelflag) {
            slice.selectAll("text")
                .data((/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d.values; }))
                .enter().append("text")
                .attr("width", x1.bandwidth)
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return x1(d.label) + x1.bandwidth() / 2;
            }))
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return y(d.value); }))
                .attr("height", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return height - y(0); }))
                .style("font-weight", "bold")
                .style("font-size", "1vw")
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (_this.labelcolor && _this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                // if((d.value > 0) ) {
                // return d.value;
                // }
                if (_this.showzeroflag) {
                    return d.value;
                }
                else if (!_this.showzeroflag) {
                    if (d.value > 0) {
                        return d.value;
                    }
                }
            }))
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.html(_this.setKey(d)
                //  this.toolTipContent(d)
                )
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            })).on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.groupbarClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
                // this.chartClick(d);
            }));
        }
        slice.selectAll("rect")
            .attr("y", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return y(d.value);
        }))
            .attr("height", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return height - y(d.value); }));
    };
    /**
     * @param {?} d
     * @return {?}
     */
    GroupbarComponent.prototype.groupbarClick = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var object = {};
        object[d.label] = d.value;
        object[this.xaxisData] = d.xaxis;
        this.chartClick(object);
    };
    //RESIZE STEP 4 STARTS
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    GroupbarComponent.prototype.validateresize = 
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.wt) {
            }
            else {
                _this.resize();
            }
        }), 0);
    };
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    GroupbarComponent.prototype.resize = 
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    function () {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotGroupBarChart();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    GroupbarComponent.prototype.legendClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var obj = {};
        obj["label"] = event.label;
        /** @type {?} */
        var data = [];
        event.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var object = {};
            object[element.label] = element.value;
            data.push(object);
        }));
        obj["data"] = data;
        this.onLegendClick.emit(obj);
    };
    //2d array to json conversion
    //2d array to json conversion
    /**
     * @return {?}
     */
    GroupbarComponent.prototype.convertToJSON = 
    //2d array to json conversion
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var groupChartObj = { "labels": "", values: [] };
        /** @type {?} */
        var firstRowOfData = this.data[0];
        this.xaxisData = this.data[0][0];
        for (var i = 1; i < this.data.length; i++) {
            /** @type {?} */
            var multiSeriesArray = [];
            /** @type {?} */
            var valueOfJ = void 0;
            for (var j = 1; j < this.data[i].length; j++) {
                valueOfJ = this.data[i][0];
                /** @type {?} */
                var singleBarObj = {};
                singleBarObj["value"] = this.data[i][j];
                singleBarObj["label"] = firstRowOfData[j];
                singleBarObj["xaxis"] = this.data[i][0];
                multiSeriesArray.push(singleBarObj);
            }
            if (multiSeriesArray.length) {
                groupChartObj["values"] = multiSeriesArray;
                /** @type {?} */
                var newLabelsValues = valueOfJ;
                /** @type {?} */
                var newGroupDataObj = Object.assign({}, groupChartObj);
                newGroupDataObj['labels'] = newLabelsValues + '';
                this.groupbarchartArray.push(newGroupDataObj);
            }
        }
    };
    /**
     * @return {?}
     */
    GroupbarComponent.prototype.transformto2dArray = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var i = 0;
        /** @type {?} */
        var result = [];
        result.push("years");
        this.data.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        function (element, i) {
            if (i == 0) {
                element.values.forEach((/**
                 * @param {?} element2
                 * @return {?}
                 */
                function (element2) {
                    result.push(element2.label);
                }));
            }
        }));
        this.urllegendArray.push(result);
        /** @type {?} */
        var temparray = [];
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            temparray = [];
            /** @type {?} */
            var values;
            /** @type {?} */
            var year = element.labels;
            temparray.push(year);
            element.values.forEach((/**
             * @param {?} element2
             * @return {?}
             */
            function (element2) {
                values = element2.value;
                temparray.push(values);
            }));
            _this.urllegendArray.push(temparray);
        }));
    };
    /**
     * @param {?} data
     * @return {?}
     */
    GroupbarComponent.prototype.transformData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.keyArray = [];
        this.legendArray = [];
        data.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        function (element, i) {
            if (i == 0) {
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} index
                 * @return {?}
                 */
                function (innerelement, index) {
                    if (index > 0) {
                        _this.legendArray[innerelement] = { 'data': [] };
                        _this.keyArray.push(innerelement);
                    }
                }));
            }
        }));
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var obj_1 = {};
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} innerindex
                 * @return {?}
                 */
                function (innerelement, innerindex) {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        var key = _this.keyArray[innerindex - 1];
                        obj_1[key] = element[innerindex];
                        /** @type {?} */
                        var legenddata = _this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'value': element[innerindex], 'label': element[0] });
                        }
                    }
                }));
            }
        }));
        this.legends = [];
        this.keyArray.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            /** @type {?} */
            var legenddata = _this.legendArray[element];
            /** @type {?} */
            var object;
            if (_this.colors.length > 0) {
                object = { 'label': element, 'color': _this.colors[index], 'data': legenddata.data };
            }
            else {
                object = { 'label': element, 'color': _this.predefinedcolors[index], 'data': legenddata.data };
            }
            _this.legends.push(object);
        }));
    };
    /**
     * @param {?} d
     * @return {?}
     */
    GroupbarComponent.prototype.setKey = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var object = {};
        object[d.label] = d.value;
        object[this.xaxisData] = d.xaxis;
        return (this.toolTipForBar(object));
    };
    /**
     * @param {?} g
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    GroupbarComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    };
    GroupbarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-multiseries',
                    template: "<div  #chartId *ngIf=\"drillableFlag\" (window:resize)=\"validateresize()\"> \n<table *ngIf=\"data.length > 0\"  style=\"width: 100%;\">\n    <tr *ngIf = \"title.length > 0\" >\n        <td colspan=\"2\" style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n    </tr>\n    <tr>\n        <td>\n            <svg [attr.height]=\"height\" [attr.width]=\"width\" [attr.id]=\"componentId\">\n            </svg>\n        </td>\n    </tr>\n    <tr *ngIf=\"legend\">\n        <td style=\"display: block; padding: 5px;\">\n            <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"legendClick($event)\" [data]=\"legends\" style=\"height:100%;\"></amexio-d3-legend>\n        </td>\n    </tr>\n</table>\n<div *ngIf=\"data.length < 1\" class=\"lmask\" style=\"padding-top:50%\">\n    </div>\n</div>\n\n\n",
                    styles: [""]
                },] },
    ];
    GroupbarComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef },
        { type: DeviceQueryService }
    ]; };
    GroupbarComponent.propDecorators = {
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        drillid: [{ type: ViewChild, args: ['drillid',] }],
        data: [{ type: Input, args: ['data',] }],
        legend: [{ type: Input }],
        barwidth: [{ type: Input }],
        onLegendClick: [{ type: Output }],
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        tickscount: [{ type: Input, args: ['yaxis-interval',] }],
        showzeroflag: [{ type: Input, args: ['show-zero-values',] }]
    };
    return GroupbarComponent;
}(AmexioD3BaseChartComponent));
export { GroupbarComponent };
if (false) {
    /** @type {?} */
    GroupbarComponent.prototype.chartId;
    /** @type {?} */
    GroupbarComponent.prototype.divid;
    /** @type {?} */
    GroupbarComponent.prototype.drillid;
    /** @type {?} */
    GroupbarComponent.prototype.data;
    /** @type {?} */
    GroupbarComponent.prototype.legend;
    /** @type {?} */
    GroupbarComponent.prototype.barwidth;
    /** @type {?} */
    GroupbarComponent.prototype.onLegendClick;
    /** @type {?} */
    GroupbarComponent.prototype.svgwidth;
    /** @type {?} */
    GroupbarComponent.prototype.svgheight;
    /** @type {?} */
    GroupbarComponent.prototype.tickscount;
    /** @type {?} */
    GroupbarComponent.prototype.showzeroflag;
    /** @type {?} */
    GroupbarComponent.prototype.groupbarchartArray;
    /** @type {?} */
    GroupbarComponent.prototype.legendArray;
    /** @type {?} */
    GroupbarComponent.prototype.xaxisData;
    /** @type {?} */
    GroupbarComponent.prototype.keyArray;
    /** @type {?} */
    GroupbarComponent.prototype.legends;
    /** @type {?} */
    GroupbarComponent.prototype.years;
    /** @type {?} */
    GroupbarComponent.prototype.urllegendArray;
    /** @type {?} */
    GroupbarComponent.prototype.svg;
    /** @type {?} */
    GroupbarComponent.prototype.wt;
    /** @type {?} */
    GroupbarComponent.prototype.defualtColors;
    /**
     * @type {?}
     * @private
     */
    GroupbarComponent.prototype.myservice;
    /**
     * @type {?}
     * @private
     */
    GroupbarComponent.prototype.cdf;
    /**
     * @type {?}
     * @private
     */
    GroupbarComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,