/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, ElementRef, ChangeDetectorRef, } from "@angular/core";
import { AmexioD3BaseChartComponent } from "../base/base.component";
import { CommanDataService } from '../services/comman.data.service';
import { DeviceQueryService } from '../services/device.query.service';
import * as d3 from 'd3';
var AmexioD3BarChartComponent = /** @class */ (function (_super) {
    tslib_1.__extends(AmexioD3BarChartComponent, _super);
    function AmexioD3BarChartComponent(myservice, cdf, device) {
        var _this = _super.call(this, 'bar') || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.device = device;
        _this.svgheight = 300;
        _this.horizontal = false;
        _this.labelcolor = "black";
        _this.labelflag = false;
        _this.level = 0;
        _this.drillabledatakey = [];
        _this.hScale = true;
        _this.showzeroflag = true;
        _this._data = [];
        _this.resizeflag = false;
        _this.drillableFlag = true;
        _this.colorflag = false;
        _this.keyArray = [];
        _this.transformeddata = [];
        _this.legendArray = [];
        _this.firstloading = false;
        _this.inc = 0;
        _this.isChartInit = false;
        return _this;
    }
    Object.defineProperty(AmexioD3BarChartComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        // private _data: any = [];
        set: 
        // private _data: any = [];
        /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v && (v.length > 0)) {
                this._data = v;
                // if(this.isChartInit){
                //   this.resize();
                // }
                // if (this.data) {
                // setTimeout(() => {
                //   this.data = this.getResponseData(this.data);
                //   this.transformData(this.data)
                //   this.initializeData();
                //   this.plotD3Chart();
                // }, 0);
                // }
                // this.cdf.detectChanges();
                // this.formLegendData();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    resp_1 = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                }), (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.data = _this.getResponseData(resp_1);
                        // this.drawChart();
                        _this.transformData(_this.data);
                        _this.initializeData();
                        _this.plotD3Chart();
                        _this.isChartInit = true;
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.transformData(_this.data);
                    _this.initializeData();
                    _this.plotD3Chart();
                    _this.isChartInit = true;
                }), 0);
            }
        }
    };
    // Fetch Data
    // Fetch Data
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.fetchData = 
    // Fetch Data
    /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                resp = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
            }), (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(resp);
                    _this.drawChart();
                }), 0);
            }));
        }
    };
    /**
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.initializeData();
            _this.plotD3Chart();
        }), 0);
    };
    /**
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // console.log("repeat");
        if (this.inc > 1) {
            if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.transformData(_this.data);
                    _this.initializeData();
                    _this.plotD3Chart();
                }), 500);
            }
            this.formLegendData();
        }
        this.inc++;
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = tslib_1.__values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.formLegendData();
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var margin = { top: 20, right: 60, bottom: 40, left: 60 };
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height = this.svgheight - margin.top - margin.bottom;
        //RESIZE STEP 2 START
        // this.svg.selectAll("*").remove();
        this.svg = d3.select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight);
        this.svg.selectAll("*").remove();
        // this.svg.exit().remove();//remove unneeded circles
        //RESIZE STEP 2 ENDS HERE
        /** @type {?} */
        var x;
        /** @type {?} */
        var y;
        /** @type {?} */
        var g = this.svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        // vertical bar
        if (this.horizontal == false) {
            // this.svg.selectAll("*").remove();
            // -----------------------------
            if (this.data) {
                x = d3.scaleBand()
                    .rangeRound([0, width])
                    .padding(0.1);
                //setting content for x and y axis
                x.domain(this.data.map((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return d[Object.keys(d)[0]];
                    //    return d.label
                })));
            }
            //-----------------------------
            if (this.data) {
                y = d3.scaleLinear()
                    .rangeRound([height, 0]);
                y.domain([0, d3.max(this.data, (/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) {
                        return d[Object.keys(d)[1]];
                        //return d.value;
                    }))]);
            }
            // add x axis to svg
            if (this.device.IsDesktop() == true) {
                if (this.svgwidth <= 400) {
                    g.append("g")
                        .attr("transform", "translate(0," + height + ")")
                        .call(d3.axisBottom(x)).
                        selectAll("text")
                        .attr("y", 0)
                        .attr("x", 9)
                        .attr("dy", ".35em")
                        .attr("transform", "rotate(60)")
                        .style("text-anchor", "start");
                }
                else {
                    g.append("g")
                        .attr("transform", "translate(0," + height + ")")
                        .call(d3.axisBottom(x));
                }
            }
            else {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            //add y axis to svg
            g.append("g")
                .call(d3.axisLeft(y)
                .ticks(this.tickscount));
            this.plotLine(g, x, y, height, width);
            //add bar chart
            g.selectAll(".bar")
                .data(this.data)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return x(d[Object.keys(d)[0]]);
                // return x(d.label); 
            }))
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return y(d[Object.keys(d)[1]]);
                // return y(d.value); 
            }))
                .attr("cursor", "pointer")
                .attr("width", x.bandwidth())
                .attr("height", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return height - y(d[Object.keys(d)[1]]); }))
                .style("fill", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                // return "blue";
                return d.color;
            }))
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.html(_this.formTooltipData(d)
                //  this.toolTipForBar(d)
                // this.toolTipContent(d)
                )
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.barChartClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
                //this.chartClick(d);
            }));
            if (this.labelflag) {
                /** @type {?} */
                var yTextPadding = 40;
                this.svg.selectAll(".label")
                    .data(this.data)
                    .enter()
                    .append("text")
                    .style("font-weight", "bold")
                    .style("font-size", "1vw")
                    .attr("text-anchor", "middle")
                    .attr("fill", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    if (_this.labelcolor.length > 0) {
                        if ((_this.labelcolor.length > 0) && d[Object.keys(d)[1]] > 0) {
                            return _this.labelcolor;
                        }
                    }
                    else {
                        return "black";
                    }
                }))
                    .attr("x", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (d, i) {
                    return x(d[Object.keys(d)[0]]) + margin.left + x.bandwidth() / 2;
                }))
                    .attr("y", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (d, i) {
                    return y(d[Object.keys(d)[1]]) + yTextPadding;
                }))
                    .text((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    // if (d[Object.keys(d)[1]] > 0) {
                    //   return d[Object.keys(d)[1]];
                    // }.
                    if (_this.showzeroflag) {
                        return d[Object.keys(d)[1]];
                    }
                    else if (!_this.showzeroflag) {
                        if (d[Object.keys(d)[1]] > 0) {
                            return d[Object.keys(d)[1]];
                        }
                    }
                }))
                    .attr("cursor", "pointer")
                    .on("mouseover", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.style("visibility", "visible");
                }))
                    .on("mousemove", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.html(_this.formTooltipData(d)
                    //  this.toolTipForBar(d)
                    // this.toolTipContent(d)
                    )
                        .style("top", (d3.event.pageY - 10) + "px")
                        .style("left", (d3.event.pageX + 10) + "px");
                }))
                    .on("mouseout", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.style("visibility", "hidden");
                }))
                    .on("click", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    _this.barChartClick(d);
                    _this.fordrillableClick(_this, d, event);
                    return tooltip.style("visibility", "hidden");
                    //this.chartClick(d);
                }));
            } //if ends fr 
        }
        else if (this.horizontal == true) {
            if (this.data) {
                x = d3.scaleLinear()
                    .rangeRound([0, width]);
                //setting content for x and y axis
                x.domain([0, d3.max(this.data, (/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) {
                        return parseInt(d[Object.keys(d)[1]]
                        // d.value
                        );
                    }))]);
                // d[Object.keys(d)[1]]
                y = d3.scaleBand()
                    .rangeRound([height, 0]).padding(0.1);
                y.domain(this.data.map((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return d[Object.keys(d)[0]];
                    //return d.label;
                })));
            }
            // add x axis to svg
            g.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x).ticks(this.xtickscount));
            //add y axis to svg
            g.append("g")
                .call(d3.axisLeft(y).ticks(this.tickscount));
            this.plotLine(g, x, y, height, width);
            //add bar chart
            g.selectAll(".bar")
                .data(this.data)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", 0)
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return y(d[Object.keys(d)[0]]
                // d.label
                );
            }))
                .attr("cursor", "pointer")
                .attr("width", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return x(d[Object.keys(d)[1]]
                // d.value
                );
            }))
                .attr("height", y.bandwidth())
                .style("fill", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d.color; }))
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.html(_this.formTooltipData(d)
                // this.formLegendData(d)
                // this.toolTipContent(d)
                )
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.barChartClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
                //this.chartClick(d);
            }));
            if (this.labelflag) {
                /** @type {?} */
                var yTextPadding_1 = 40;
                this.svg.selectAll(".label")
                    .data(this.data)
                    .enter()
                    .append("text")
                    .style("font-weight", "bold")
                    .attr("text-anchor", "middle")
                    .attr("vertical-align", "middle")
                    .attr("margin-top", margin.top)
                    .attr("fill", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    if (_this.labelcolor.length > 0) {
                        return _this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                }))
                    .attr("x", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (d, i) {
                    return x(d[Object.keys(d)[1]]) + yTextPadding_1;
                }))
                    .attr("y", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (d, i) {
                    return y(d[Object.keys(d)[0]])
                        + margin.top + y.bandwidth() / 2;
                }))
                    .text((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    // return d[Object.keys(d)[1]];
                    if (_this.showzeroflag) {
                        return d[Object.keys(d)[1]];
                    }
                    else if (!_this.showzeroflag) {
                        if (d[Object.keys(d)[1]] > 0) {
                            return d[Object.keys(d)[1]];
                        }
                    }
                }))
                    .attr("cursor", "pointer")
                    .on("mouseover", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.style("visibility", "visible");
                }))
                    .on("mousemove", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.html(_this.formTooltipData(d)
                    // this.formLegendData(d)
                    // this.toolTipContent(d)
                    )
                        .style("top", (d3.event.pageY - 10) + "px")
                        .style("left", (d3.event.pageX + 10) + "px");
                }))
                    .on("mouseout", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.style("visibility", "hidden");
                }))
                    .on("click", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    _this.barChartClick(d);
                    _this.fordrillableClick(_this, d, event);
                    return tooltip.style("visibility", "hidden");
                    //this.chartClick(d);
                }));
            }
        }
        //else ends(horizontal bar logic ends)
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y).ticks(this.tickscount)
                .tickSize(-width).tickFormat(''));
        }
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(d3.axisBottom(x).
                tickSize(-this.width).tickFormat('').ticks(this.xtickscount));
        }
    };
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.formTooltipData = /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = tslib_1.__values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return this.toolTipForBar(object);
        var e_2, _d;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.transformData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        if (data && (data.length > 0)) {
            this.transformeddata = [];
            this.keyArray = data[0];
            if (data && (data.length > 0)) {
                data.forEach((/**
                 * @param {?} element
                 * @param {?} index
                 * @return {?}
                 */
                function (element, index) {
                    if (index > 0) {
                        /** @type {?} */
                        var DummyObject_1 = {};
                        element.forEach((/**
                         * @param {?} individualvalue
                         * @param {?} keyindex
                         * @return {?}
                         */
                        function (individualvalue, keyindex) {
                            DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                        })); //inner for loop ends
                        _this.transformeddata.push(DummyObject_1);
                    } //if ends
                })); //outer for loop ends
            }
            this.data = this.transformeddata;
        } //
    };
    /**
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.formLegendData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendArray = [];
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var legendobject = {};
            legendobject['label'] = element[Object.keys(element)[0]];
            legendobject['value'] = element[Object.keys(element)[1]];
            legendobject['color'] = element.color;
            _this.legendArray.push(legendobject);
        }));
        this.legendArray;
    };
    /**
     * @param {?} legendevent
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.onBarLegendClick = /**
     * @param {?} legendevent
     * @return {?}
     */
    function (legendevent) {
        /** @type {?} */
        var obj = {};
        //  obj['label'] = legendevent.label;
        //  obj['value'] = legendevent.value;
        obj[this.keyArray[0]] = legendevent.label;
        obj[this.keyArray[1]] = legendevent.value;
        //obj[legendevent.label] = legendevent.value;
        //delete event.color;
        this.legendClick(obj);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.barChartClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = tslib_1.__values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.chartClick(object);
        var e_3, _d;
    };
    //RESIZE STEP 4 STARTS
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.validateresize = 
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.wt) {
            }
            else {
                _this.resize();
            }
        }), 0);
    };
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 5 STARTS
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 5 STARTS
    /**
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.resize = 
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 5 STARTS
    /**
     * @return {?}
     */
    function () {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotD3Chart();
    };
    // //RESIZE STEP 5 STARTS
    //   initialresize() {
    //     if (this.wt) {
    //       //RESIZE STEP 3 START
    //       // if(this.firstloading)
    //       // this.svg.selectAll("*").remove();
    //       this.resizeflag = true;
    //       if (this.svgwidth) {
    //         this.svgwidth = this.svgwidth;
    //       } else if (this.chartId) {
    //         this.svgwidth = this.chartId.nativeElement.offsetWidth;
    //       }
    //       //RESIZE STEP 3 ENDS
    //       // this.svgwidth = this.divid.nativeElement.offsetWidth;
    //       this.cdf.detectChanges();
    //       this.plotD3Chart();
    //     }
    //     this.firstloading = false;
    //   }
    // //RESIZE STEP 5 ENDS
    // //RESIZE STEP 5 STARTS
    //   initialresize() {
    //     if (this.wt) {
    //       //RESIZE STEP 3 START
    //       // if(this.firstloading)
    //       // this.svg.selectAll("*").remove();
    //       this.resizeflag = true;
    //       if (this.svgwidth) {
    //         this.svgwidth = this.svgwidth;
    //       } else if (this.chartId) {
    //         this.svgwidth = this.chartId.nativeElement.offsetWidth;
    //       }
    //       //RESIZE STEP 3 ENDS
    //       // this.svgwidth = this.divid.nativeElement.offsetWidth;
    //       this.cdf.detectChanges();
    //       this.plotD3Chart();
    //     }
    //     this.firstloading = false;
    //   }
    // //RESIZE STEP 5 ENDS
    /**
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.validateData = 
    // //RESIZE STEP 5 STARTS
    //   initialresize() {
    //     if (this.wt) {
    //       //RESIZE STEP 3 START
    //       // if(this.firstloading)
    //       // this.svg.selectAll("*").remove();
    //       this.resizeflag = true;
    //       if (this.svgwidth) {
    //         this.svgwidth = this.svgwidth;
    //       } else if (this.chartId) {
    //         this.svgwidth = this.chartId.nativeElement.offsetWidth;
    //       }
    //       //RESIZE STEP 3 ENDS
    //       // this.svgwidth = this.divid.nativeElement.offsetWidth;
    //       this.cdf.detectChanges();
    //       this.plotD3Chart();
    //     }
    //     this.firstloading = false;
    //   }
    // //RESIZE STEP 5 ENDS
    /**
     * @return {?}
     */
    function () {
        if (this.data) {
        }
        else {
            return "lmask";
        }
    };
    AmexioD3BarChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-bar',
                    template: "<div #chartId *ngIf=\"drillableFlag \" #divid (window:resize)=\"validateresize()\">\n    <table [ngClass]=\"validateData()\" style=\"width: 100%;\" position=\" relative\">\n        <ng-container *ngIf=\"title.length > 0\">\n            <tr>\n                <td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n            </tr>\n        </ng-container>\n        <tr>\n            <td>\n                <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n                </svg>\n            </td>\n        </tr>\n        <tr *ngIf=\"legend\">\n            <td style=\"display: block; padding: 5px;\">\n                <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onBarLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\">\n                </amexio-d3-legend>\n            </td>\n        </tr>\n    </table>\n    <!-- <table *ngIf=\"!(data && data.length >0)\" class=\"lmask\">\n        \n    </table > -->\n    <!-- <div *ngIf=\"data.length < 1\" class=\"lmask\" style=\"padding-top:50%\">\n    </div> -->\n\n</div>"
                },] },
    ];
    AmexioD3BarChartComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef },
        { type: DeviceQueryService }
    ]; };
    AmexioD3BarChartComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        horizontal: [{ type: Input }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        labelflag: [{ type: Input, args: ['label',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        drillid: [{ type: ViewChild, args: ['drillid',] }],
        DOM: [{ type: ViewChild, args: ['domref',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
        hScale: [{ type: Input, args: ['horizontal-scale',] }],
        tickscount: [{ type: Input, args: ['yaxis-interval',] }],
        xtickscount: [{ type: Input, args: ['xaxis-interval',] }],
        showzeroflag: [{ type: Input, args: ['show-zero-values',] }],
        _data: [{ type: Input, args: ['data',] }]
    };
    return AmexioD3BarChartComponent;
}(AmexioD3BaseChartComponent));
export { AmexioD3BarChartComponent };
if (false) {
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.svgwidth;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.svgheight;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.horizontal;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.labelcolor;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.labelflag;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.chartId;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.divid;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.drillid;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.DOM;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.datareader;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.level;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.target;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.drillabledatakey;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.hScale;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.tickscount;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.xtickscount;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.showzeroflag;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype._data;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.wt;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.resizeflag;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.checkmob;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.resizeg;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.drillableFlag;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.xaxis;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.yaxis;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.svg;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.colorflag;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.keyArray;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.transformeddata;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.object;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.legendArray;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.firstloading;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.inc;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.isChartInit;
    /**
     * @type {?}
     * @private
     */
    AmexioD3BarChartComponent.prototype.myservice;
    /**
     * @type {?}
     * @private
     */
    AmexioD3BarChartComponent.prototype.cdf;
    /**
     * @type {?}
     * @private
     */
    AmexioD3BarChartComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,