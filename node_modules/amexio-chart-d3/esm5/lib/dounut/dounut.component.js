/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, ElementRef, ChangeDetectorRef } from '@angular/core';
import * as d3 from 'd3';
import { AmexioD3BaseChartComponent } from '../base/base.component';
import { CommanDataService } from '../services/comman.data.service';
import { DeviceQueryService } from '../services/device.query.service';
var AmexioD3DounutChartComponent = /** @class */ (function (_super) {
    tslib_1.__extends(AmexioD3DounutChartComponent, _super);
    function AmexioD3DounutChartComponent(myservice, cdf, device) {
        var _this = _super.call(this, 'DONUTCHART') || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.device = device;
        _this.pie = false;
        _this.svgwidth = 300;
        _this.svgheight = 300;
        _this.desktoplegend = false;
        _this.mobilelegend = false;
        _this.keyArray = [];
        _this.transformeddata = [];
        _this.legendArray = [];
        return _this;
    }
    /**
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    resp_1 = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                }), (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.data = _this.getResponseData(resp_1);
                        _this.drawChart();
                        // this.data = this.getResponseData(resp);
                        _this.transformData(_this.data);
                        _this.initializeData();
                        _this.plotD3Chart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.transformData(_this.data);
                    _this.initializeData();
                    _this.plotD3Chart();
                }), 0);
            }
        }
        else {
            this.fetchData(this.drillData);
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                resp = response;
                _this.response = resp;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
            }), (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(resp);
                    _this.drawChart();
                }), 0);
            }));
        }
    };
    /**
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.drillableFlag = true;
            _this.initializeData();
            _this.plotD3Chart();
        }), 0);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = tslib_1.__values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.formLegendData();
        //this.transformData(this.data);
        //  this.data = this.transformeddata;
        /** @type {?} */
        var outerRadius = 0;
        /** @type {?} */
        var innerRadius = 0;
        outerRadius = this.svgwidth / 2;
        innerRadius = this.svgwidth / 4;
        if (this.pie) {
            innerRadius = 0;
        }
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var arc = d3.arc()
            .outerRadius(outerRadius)
            .innerRadius(innerRadius);
        /** @type {?} */
        var pie = d3.pie()
            .value((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return d[Object.keys(d)[1]];
            //  return d.value
        }));
        this.svg = d3.select("#" + this.componentId)
            .append('g')
            .attr('transform', 'translate(' + this.svgwidth / 2 + ',' + this.svgheight / 2 + ')')
            .selectAll('path')
            .data(pie(this.data))
            .enter();
        if (this.device.IsDesktop() == true) {
            this.desktoplegend = true;
            this.mobilelegend = false;
        }
        // else{
        //        if(this.device.IsPhone()==true && this.device.IsTablet()==true)
        //        {
        //             this.desktoplegend=false;
        //             this.mobilelegend=true;
        //        }
        // }
        /** @type {?} */
        var path = this.svg.append('path')
            .attr('d', arc)
            .attr('fill', (/**
         * @param {?} d
         * @param {?} i
         * @return {?}
         */
        function (d, i) {
            if (d.data.color) {
                return d.data.color;
            }
            else {
                return "black";
            }
            //  return (d && d.data && d.data.color) ? d.data.color : "black"
        }))
            .attr('cursor', 'pointer')
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.html(_this.formTooltipData(d.data)
            //  this.formLegendData(d.data)
            // this.toolTipContent(d.data)
            )
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.DonutChartClick(d.data);
            _this.fordrillableClick(_this, d.data, event);
            return tooltip.style("visibility", "hidden");
            //this.chartClick(d.data);
        }));
        if (this.labelflag) {
            /** @type {?} */
            var text = this.svg.append("text")
                .transition()
                .duration(200)
                .attr("transform", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return "translate(" + arc.centroid(d) + ")";
            }))
                .attr("text-anchor", "middle")
                .text((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return d.data[Object.keys(d.data)[1]];
                //return d.data.value;
            }))
                .style('fill', (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (_this.labelcolor && _this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
                // return (d && d.data && d.data.textcolor) ? d.data.textcolor : "black";
            }))
                .style('font-size', '12px');
        }
    };
    /**
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.formLegendData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendArray = [];
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var legendobject = {};
            legendobject['label'] = element[Object.keys(element)[0]];
            legendobject['value'] = element[Object.keys(element)[1]];
            legendobject['color'] = element.color;
            _this.legendArray.push(legendobject);
        }));
    };
    /**
     * @param {?} legendevent
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.onDonutLegendClick = /**
     * @param {?} legendevent
     * @return {?}
     */
    function (legendevent) {
        /** @type {?} */
        var obj = {};
        //  obj['label'] = legendevent.label;
        //  obj['value'] = legendevent.value 
        obj[this.keyArray[0]] = legendevent.label;
        obj[this.keyArray[1]] = legendevent.value;
        //delete event.color;
        this.legendClick(obj);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.transformData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.keyArray = data[0];
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var DummyObject_1 = {};
                element.forEach((/**
                 * @param {?} individualvalue
                 * @param {?} keyindex
                 * @return {?}
                 */
                function (individualvalue, keyindex) {
                    DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                })); //inner for loop ends
                _this.transformeddata.push(DummyObject_1);
            } //if ends
        })); //outer for loop ends
        this.data = this.transformeddata;
    };
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.formTooltipData = /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = tslib_1.__values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color' && key != 'textcolor') {
                    object[key] = value;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return this.toolTipForBar(object);
        var e_2, _d;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.DonutChartClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = tslib_1.__values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.chartClick(object);
        var e_3, _d;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.resize = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.desktoplegend = false;
        this.mobilelegend = true;
        this.plotD3Chart();
    };
    AmexioD3DounutChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-donut',
                    template: "<div *ngIf=\"drillableFlag\" #chartId (window:resize)=\"resize($event)\">\n    <div *ngIf=\"data.length > 0\">\n\n  \n    <div colspan=\"2\" style=\"font-size: 18px; font-weight: bold; \">\n        {{title}}\n    </div>\n    <div [ngClass]=\"'donutcss'\">\n        <svg preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 300 300\" [attr.height]=\"height\" [attr.width]=\"width\" [attr.id]=\"componentId\">\n        </svg>\n        <div>\n\n            <div style=\"display: block; padding: 1%;\">\n                <div *ngIf=\"desktoplegend\">\n                    <amexio-d3-legend *ngIf=\"legend\" (onClick)=\"onDonutLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\"></amexio-d3-legend>\n                </div>\n                <div *ngIf=\"mobilelegend\">\n                    <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onDonutLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\"></amexio-d3-legend>\n                </div>\n            </div>\n        </div>\n        <!--  -->\n        <div *ngIf=\"data.length < 1\" class=\"lmask\" style=\"padding-top:50%\">\n            </div>\n\n        </div>",
                    styles: [".donutcss{display:flex;flex-direction:row}@media screen and (max-width:1024px){.donutcss{display:flex;flex-direction:column}}"]
                },] },
    ];
    AmexioD3DounutChartComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef },
        { type: DeviceQueryService }
    ]; };
    AmexioD3DounutChartComponent.propDecorators = {
        pie: [{ type: Input, args: ['pie',] }],
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        drillid: [{ type: ViewChild, args: ['drillid',] }],
        drillData: [{ type: Input }]
    };
    return AmexioD3DounutChartComponent;
}(AmexioD3BaseChartComponent));
export { AmexioD3DounutChartComponent };
if (false) {
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.pie;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.svgwidth;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.svgheight;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.chartId;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.divid;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.drillid;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.desktoplegend;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.mobilelegend;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.drillData;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.keyArray;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.transformeddata;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.legendArray;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.response;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.svg;
    /**
     * @type {?}
     * @private
     */
    AmexioD3DounutChartComponent.prototype.myservice;
    /**
     * @type {?}
     * @private
     */
    AmexioD3DounutChartComponent.prototype.cdf;
    /**
     * @type {?}
     * @private
     */
    AmexioD3DounutChartComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,