/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input } from "@angular/core";
import * as d3 from 'd3';
import { AmexioD3BaseChartComponent } from "../base/base.component";
var AmexioD3BaseLineComponent = /** @class */ (function (_super) {
    tslib_1.__extends(AmexioD3BaseLineComponent, _super);
    function AmexioD3BaseLineComponent(deviceQueryService) {
        var _this = _super.call(this, 'line') || this;
        _this.deviceQueryService = deviceQueryService;
        _this._data = [];
        _this.xarr = [];
        _this.displayindex = 0;
        _this.svgheight = 300;
        // @Input('xaxis-interval') xtickscount: number = 3;
        _this.linecolor = [];
        _this.slant = false;
        return _this;
    }
    Object.defineProperty(AmexioD3BaseLineComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._data = v;
            if (this._data && (this._data.length > 0)) {
                this.createXYAxisData();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @protected
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.createXYAxisData = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        this.labelcolor;
        this.xaxisdata = [];
        this.yaxisdata = [];
        this.multiseriesdata = [];
        this.legenddata = [];
        this.legends = [];
        this.xaxisname = this.data[0][0].label;
        /** @type {?} */
        var msdarray = [];
        /** @type {?} */
        var count = 0
        // ************************************************
        ;
        // ************************************************
        if (this.displayfield) {
            // find displayfield index
            this._data[0].forEach((/**
             * @param {?} element
             * @param {?} index
             * @return {?}
             */
            function (element, index) {
                if (element.label == _this.displayfield) {
                    _this.displayindex = index;
                }
            }));
        }
        // ***********************************************
        for (var index = 0; index < this._data[0].length; index++) {
            /** @type {?} */
            var legend = this._data[0][index];
            msdarray[index] = [];
            /** @type {?} */
            var obj = {};
            obj['label'] = legend.label;
            if ((this.linecolor.length > 0) && this.linecolor[index]) {
                obj['color'] = this.linecolor[index];
            }
            else {
                obj['color'] = this.predefinedcolors[index];
            }
            this.legenddata.push(obj);
            // this.legenddata.push({'label':legend.label,'color':this.predefinedcolors[index+1]});
            if (index > 0) {
                /** @type {?} */
                var obj_1 = {};
                obj_1['label'] = legend.label;
                if ((this.linecolor.length > 0) && this.linecolor[count]) {
                    obj_1['color'] = this.linecolor[count];
                }
                else {
                    obj_1['color'] = this.predefinedcolors[count];
                }
                this.legends.push(obj_1);
                count++;
                // this.legends.push({'label':legend.label,'color':this.predefinedcolors[index]});
            }
        }
        /** @type {?} */
        var i = 0;
        // xaxisdata yaxisdata msdarray is formed here
        this._data.forEach((/**
         * @param {?} object
         * @return {?}
         */
        function (object) {
            if (i > 0) {
                /** @type {?} */
                var j_1 = 0;
                /** @type {?} */
                var xobj_1 = {};
                object.forEach((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) {
                    // if (j === 0) {
                    //     this.xaxisdata.push({ 'label': a, 'value': a });
                    // } else {
                    //     this.yaxisdata.push({ 'label': a, 'value': a });
                    // }
                    if ((j_1 > 0) && (j_1 !== _this.displayindex)) {
                        _this.yaxisdata.push({ 'label': a, 'value': a });
                    }
                    if (j_1 == 0) {
                        xobj_1['value'] = a;
                    }
                    if (j_1 == _this.displayindex) {
                        xobj_1['label'] = a;
                    }
                    msdarray[j_1].push(a);
                    j_1++;
                }));
                _this.xaxisdata.push(xobj_1);
            }
            i++;
        }));
        for (var index = 0; index < msdarray.length; index++) {
            /** @type {?} */
            var element = msdarray[index];
            if ((index > 0) && (index !== this.displayindex)) {
                /** @type {?} */
                var md = [];
                for (var j = 0; j < element.length; j++) {
                    /** @type {?} */
                    var v = element[j];
                    md.push({ 'legend': this.legenddata[index].label, 'label': this.xaxisdata[j].label, 'value': v });
                }
                this.multiseriesdata.push(md);
                this.legends[index - 1].data = md;
            }
        }
    };
    /**
     * @param {?} width
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.recalculatescale = /**
     * @param {?} width
     * @return {?}
     */
    function (width) {
        var _this = this;
        // consider fontsize to be 10
        this.xaxisdata;
        /** @type {?} */
        var summationwidth = 0;
        if (!this.displayfield) {
            this.xaxisdata.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (typeof (element.label) == 'string') {
                    summationwidth = summationwidth + (element.label.length * 10);
                }
                if (typeof (element.label) == 'number') {
                    /** @type {?} */
                    var n = _this.findDigitCount(element.label);
                    summationwidth = summationwidth + (n * 10);
                }
            }));
        }
        if (this.displayfield) {
            this.xaxisdata.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                // if (typeof (element.label) == 'string') {
                summationwidth = summationwidth + (element.label.length * 10);
                // }
            }));
        }
        if (this.displayfield && this.slant) {
            summationwidth = this.xaxisdata.length * 10;
        }
        if (summationwidth > width) {
            //  function call
            this.calculatexaxisarray(summationwidth, width);
        }
    };
    /**
     * @param {?} summationwidth
     * @param {?} width
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.calculatexaxisarray = /**
     * @param {?} summationwidth
     * @param {?} width
     * @return {?}
     */
    function (summationwidth, width) {
        /** @type {?} */
        var interval = Math.round(summationwidth / width);
        this.generateNewAxis(interval, width);
    };
    /**
     * @param {?} interval
     * @param {?} avlwidth
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.generateNewAxis = /**
     * @param {?} interval
     * @param {?} avlwidth
     * @return {?}
     */
    function (interval, avlwidth) {
        this.xaxisdata;
        /** @type {?} */
        var arr = [];
        /** @type {?} */
        var newarr = [];
        /** @type {?} */
        var min;
        /** @type {?} */
        var max;
        //    make Array out of this.xaxisdata
        this.xaxisdata.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            // if (typeof (element.label) == 'number') {
            arr.push(element.label);
            // }
        }));
        //null check on arr
        if (arr.length > 0) {
            // find min
            min = Math.min.apply(null, arr);
            //find max
            max = Math.max.apply(null, arr);
            /** @type {?} */
            var temp = Math.round(avlwidth / 10);
            /** @type {?} */
            var differential = (temp - (temp * 0.2)) / 4;
            //form new arr
            /** @type {?} */
            var j = Math.round(differential);
            //   hjlkllll
            /** @type {?} */
            var i = void 0;
            /** @type {?} */
            var isredundant = false;
            if (!this.displayfield) {
                newarr[0] = min;
                for (i = 1; j < this.xaxisdata.length; i++) {
                    j = Math.round((differential * i) + i);
                    isredundant = this.checkArrayRedundancy(newarr, Math.round(j));
                    if (isredundant) {
                        newarr[i] = Math.round(j + 1);
                    }
                    else {
                        newarr[i] = Math.round(j);
                    }
                }
                this.sortarr(newarr);
            }
            if (this.displayfield) {
                for (i = 0; j < this.xaxisdata.length; i++) {
                    j = Math.round((differential * i) + i);
                    if (this.xaxisdata[j]) {
                        newarr[i] = this.xaxisdata[j].label;
                    }
                    else {
                        if (this.xaxisdata[j + 1]) {
                            newarr[i] = this.xaxisdata[j + 1].label;
                        }
                    }
                }
                this.xarr = newarr;
            }
        }
    };
    /**
     * @param {?} newarr
     * @param {?} chknum
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.checkArrayRedundancy = /**
     * @param {?} newarr
     * @param {?} chknum
     * @return {?}
     */
    function (newarr, chknum) {
        /** @type {?} */
        var inc = 0;
        newarr.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (chknum == element) {
                inc++;
            }
        }));
        if (inc > 1) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} newarr
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.sortarr = /**
     * @param {?} newarr
     * @return {?}
     */
    function (newarr) {
        /** @type {?} */
        var i;
        /** @type {?} */
        var j;
        /** @type {?} */
        var temp;
        for (i = 0; i < newarr.length; ++i) {
            for (j = i + 1; j < newarr.length; ++j) {
                if (newarr[i] > newarr[j]) {
                    temp = newarr[i];
                    newarr[i] = newarr[j];
                    newarr[j] = temp;
                }
            }
        }
        //    newarr;
        this.setXaxisData(newarr);
    };
    /**
     * @param {?} newarr
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.setXaxisData = /**
     * @param {?} newarr
     * @return {?}
     */
    function (newarr) {
        var _this = this;
        this.xarr = newarr;
        // this.xaxisdata.push({label: 125, value: 125});
        // chk if newarr elements are present in xaxisdata
        /** @type {?} */
        var ispresent = false;
        newarr.forEach((/**
         * @param {?} arrelement
         * @return {?}
         */
        function (arrelement) {
            _this.xaxisdata.forEach((/**
             * @param {?} xaxiselement
             * @return {?}
             */
            function (xaxiselement) {
                if (arrelement == xaxiselement.label) {
                    ispresent = true;
                }
            }));
            if (!ispresent) {
                //create & push an obj in xaxisdata
                /** @type {?} */
                var obj = { label: arrelement, value: arrelement };
                _this.xaxisdata.push(obj);
            }
            ispresent = false;
        }));
        //  
        // change arr to arr of objs
        /** @type {?} */
        var xdata = [];
        newarr.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var obj = { label: element, value: element };
            xdata.push(obj);
        }));
        this.xaxisdata;
        this.xaxisdata1 = xdata;
        //initialize xaxis data
    };
    /**
     * @param {?} n
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.findDigitCount = /**
     * @param {?} n
     * @return {?}
     */
    function (n) {
        /** @type {?} */
        var count = 0;
        if (n >= 1)
            ++count;
        while (n / 10 >= 1) {
            n /= 10;
            ++count;
        }
        return count;
    };
    /**
     * @param {?} width
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.setXinterval = /**
     * @param {?} width
     * @return {?}
     */
    function (width) {
        var _this = this;
        /** @type {?} */
        var interval = Math.round(this.xaxisdata.length / this.xinterval);
        /** @type {?} */
        var arr = [];
        /** @type {?} */
        var newarr = [];
        //    make Array out of this.xaxisdata
        this.xaxisdata.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (typeof (element.label) == 'number') {
                arr.push(element.label);
            }
        }));
        /** @type {?} */
        var min = Math.min.apply(null, arr);
        //find max
        /** @type {?} */
        var max = Math.max.apply(null, arr);
        /** @type {?} */
        var j = interval;
        /** @type {?} */
        var i;
        /** @type {?} */
        var ispresent = false;
        newarr[0] = min;
        // assa
        for (i = 1; j < max; i++) {
            j = interval * i;
            newarr[i] = j;
        }
        // newarr[i] = max;
        //inset numbers which are not present in xaxis domain but present in newarr
        newarr.forEach((/**
         * @param {?} arrelement
         * @return {?}
         */
        function (arrelement) {
            _this.xaxisdata.forEach((/**
             * @param {?} xaxiselement
             * @return {?}
             */
            function (xaxiselement) {
                if (xaxiselement.label == arrelement) {
                    ispresent = true;
                }
            }));
            if (!ispresent) {
                /** @type {?} */
                var obj = { label: arrelement, value: arrelement };
                _this.xaxisdata.push(obj);
            }
            ispresent = false;
        }));
        // this.sortarr(newarr);
        // newarr;
        // this.xaxisdata;
        this.xarr = newarr;
    };
    /**
     * @param {?} width
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.setDisplayfieldXinterval = /**
     * @param {?} width
     * @return {?}
     */
    function (width) {
        /** @type {?} */
        var interval = Math.round(this.xaxisdata.length / this.xinterval);
        /** @type {?} */
        var arr = [];
        /** @type {?} */
        var newarr = [];
        //    make Array out of this.xaxisdata
        this.xaxisdata.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            arr.push(element.label);
        }));
        /** @type {?} */
        var min = 0;
        /** @type {?} */
        var max = this.xaxisdata.length - 1;
        /** @type {?} */
        var j = interval;
        /** @type {?} */
        var i;
        newarr[0] = this.xaxisdata[min].label;
        for (i = 1; j < max; i++) {
            newarr[i] = this.xaxisdata[j].label;
            j = interval * i;
        }
        newarr.push(this.xaxisdata[max].label);
        this.xarr = newarr;
    };
    // formatxaxisarr() {
    //     let formattedarr = [];
    //     let temp = '';
    //     if(this.xarr) {
    //     if (typeof (this.xarr[0]) == 'string') {
    //         // treat string
    //         this.xarr.forEach(element => {
    //             if (typeof (element) == 'string') {
    //                 temp = '';
    //                 temp = element[0] + element[1] + '..'
    //                 formattedarr.push(temp)
    //             }
    //         });
    //          this.xarr = formattedarr;
    //     }
    //     if (typeof (this.xarr[0]) == 'number') {
    //         // treat numerials
    //         // wrap numbers
    //     }
    //              }
    // }
    // formatxaxisarr() {
    //     let formattedarr = [];
    //     let temp = '';
    //     if(this.xarr) {
    //     if (typeof (this.xarr[0]) == 'string') {
    //         // treat string
    //         this.xarr.forEach(element => {
    //             if (typeof (element) == 'string') {
    //                 temp = '';
    //                 temp = element[0] + element[1] + '..'
    //                 formattedarr.push(temp)
    //             }
    //         });
    //          this.xarr = formattedarr;
    //     }
    //     if (typeof (this.xarr[0]) == 'number') {
    //         // treat numerials
    //         // wrap numbers
    //     }
    //              }
    // }
    /**
     * @protected
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.initChart = 
    // formatxaxisarr() {
    //     let formattedarr = [];
    //     let temp = '';
    //     if(this.xarr) {
    //     if (typeof (this.xarr[0]) == 'string') {
    //         // treat string
    //         this.xarr.forEach(element => {
    //             if (typeof (element) == 'string') {
    //                 temp = '';
    //                 temp = element[0] + element[1] + '..'
    //                 formattedarr.push(temp)
    //             }
    //         });
    //          this.xarr = formattedarr;
    //     }
    //     if (typeof (this.xarr[0]) == 'number') {
    //         // treat numerials
    //         // wrap numbers
    //     }
    //              }
    // }
    /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        //RESIZE STEP 2 START
        this.svg = d3.select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight);
        this.svg.selectAll("*").remove();
        /** @type {?} */
        var margin = { top: 40, right: 20, bottom: 30, left: 40 };
        //RESIZE STEP 2 ENDS HERE
        /** @type {?} */
        var width = +this.svgwidth - margin.left - margin.right;
        // this.xaxisdata;
        if (this.xinterval) {
            if (!this.displayfield) {
                this.setXinterval(width);
            }
            if (this.displayfield) {
                this.setDisplayfieldXinterval(width);
            }
        }
        else {
            this.recalculatescale(width);
        }
        /** @type {?} */
        var height = +this.svgheight - margin.top - margin.bottom;
        /** @type {?} */
        var g = this.svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        var x = d3.scalePoint()
            .rangeRound([0, width])
            .padding(0.1);
        /** @type {?} */
        var y = d3.scaleLinear()
            .rangeRound([height, 0]);
        /** @type {?} */
        var xdomain;
        if (this.xaxisdata) {
            x.domain(this.xaxisdata.map((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (typeof (d.label) == 'string') {
                    return d.label;
                }
                else {
                    return parseInt(d.value);
                }
            })));
        }
        if (this.yaxisdata) {
            y.domain([0, d3.max(this.yaxisdata, (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) { return d.value; }))]);
        }
        //add axis
        /** @type {?} */
        var xaxisbottom = d3.axisBottom(x);
        if (this.xarr.length > 0) {
            // if(this.slant) {
            // this.formatxaxisarr();
            //  }
            xaxisbottom.tickValues(this.xarr);
        }
        if (this.deviceQueryService.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xaxisbottom
                // d3.axisBottom(x)
                // .tickValues(this.xarr)
                ).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                /** @type {?} */
                var bottomaxis = g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xaxisbottom);
                if (this.slant) {
                    // this.formatxaxisarr(); 
                    bottomaxis.selectAll("text")
                        .attr("cursor", "pointer")
                        .on("mouseover", (/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) {
                        return tooltip.style("visibility", "visible");
                    }))
                        .on("mousemove", (/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) {
                        return tooltip.html(_this.callXaxisTooltip(d))
                            .style("top", (d3.event.pageY - 10) + "px")
                            .style("left", (d3.event.pageX + 10) + "px");
                    }))
                        .on("mouseout", (/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) {
                        return tooltip.style("visibility", "hidden");
                    }))
                        .on("click", (/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) {
                        return tooltip.style("visibility", "hidden");
                    }))
                        .attr("y", 0)
                        .attr("x", 9)
                        .attr("dy", ".35em")
                        .attr("transform", "rotate(90)")
                        .style("text-anchor", "start")
                        .style("font-size", 10);
                }
            }
        }
        else {
            g.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(xaxisbottom).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start")
                .style("font-size", 10);
            ;
        }
        g.append("g")
            .call(d3.axisLeft(y).ticks(this.tickscount));
        // tickSize(0,10));
        /** @type {?} */
        var rawdata = this._data;
        // call function to alter legends if displayfield condn satisfy
        this.alterLegend();
        return {
            g: g, x: x, y: y, height: height, width: width, rawdata: rawdata
        };
        // 
    };
    /**
     * @protected
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.plotScale = /**
     * @protected
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(d3.axisBottom(x).
                tickSize(-this.width).tickFormat(''));
        }
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y).ticks(this.tickscount)
                .tickSize(-width).tickFormat(''));
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.legendClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        // const legendNode = JSON.parse(JSON.stringify(node));
        // delete legendNode.color;
        // legendNode.data.forEach(element => {
        //     delete element.legend;
        // });
        var _this = this;
        // const legendNode = JSON.parse(JSON.stringify(node));
        // delete legendNode.color;
        // legendNode.data.forEach(element => {
        //     delete element.legend;
        // });
        /** @type {?} */
        var obj = {};
        obj["label"] = node.label;
        /** @type {?} */
        var data = [];
        node.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var object = {};
            object[element.legend] = element.value;
            object[_this.xaxisname] = element.label;
            //   object[element.label] = element.value;
            data.push(object);
        }));
        obj["data"] = data;
        this.onLegendClick.emit(obj);
        // this.onLegendClick.emit(legendNode);
    };
    /**
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.alterLegend = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.linelegends = [];
        if (this.displayfield) {
            this.legends.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (element.label !== _this.displayfield) {
                    _this.linelegends.push(element);
                }
            }));
        }
        else {
            this.linelegends = this.legends;
        }
    };
    /**
     * @param {?} tooltipdata
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.callXaxisTooltip = /**
     * @param {?} tooltipdata
     * @return {?}
     */
    function (tooltipdata) {
        /** @type {?} */
        var obj = {};
        obj['x-axis'] = tooltipdata;
        return this.toolTipForBar(obj);
    };
    AmexioD3BaseLineComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        xinterval: [{ type: Input, args: ['data',] }, { type: Input, args: ['xaxis-interval',] }],
        httpurl: [{ type: Input, args: ['http-url',] }],
        httpmethod: [{ type: Input, args: ['http-method',] }],
        tickscount: [{ type: Input, args: ['yaxis-interval',] }],
        linecolor: [{ type: Input, args: ['color',] }],
        displayfield: [{ type: Input, args: ['display-field',] }],
        slant: [{ type: Input, args: ['rotate',] }]
    };
    return AmexioD3BaseLineComponent;
}(AmexioD3BaseChartComponent));
export { AmexioD3BaseLineComponent };
if (false) {
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.svgwidth;
    /**
     * @type {?}
     * @private
     */
    AmexioD3BaseLineComponent.prototype._data;
    /**
     * @type {?}
     * @private
     */
    AmexioD3BaseLineComponent.prototype.xaxisdata;
    /**
     * @type {?}
     * @private
     */
    AmexioD3BaseLineComponent.prototype.xaxisdata1;
    /**
     * @type {?}
     * @private
     */
    AmexioD3BaseLineComponent.prototype.yaxisdata;
    /**
     * @type {?}
     * @private
     */
    AmexioD3BaseLineComponent.prototype.legenddata;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.legends;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.linelegends;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.xarr;
    /**
     * @type {?}
     * @protected
     */
    AmexioD3BaseLineComponent.prototype.xaxisname;
    /**
     * @type {?}
     * @protected
     */
    AmexioD3BaseLineComponent.prototype.multiseriesdata;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.svg;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.displayindex;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.svgheight;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.xinterval;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.httpurl;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.httpmethod;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.tickscount;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.linecolor;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.displayfield;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.slant;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.deviceQueryService;
}
//# sourceMappingURL=data:application/json;base64,