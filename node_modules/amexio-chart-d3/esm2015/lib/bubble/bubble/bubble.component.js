/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, ViewChild, ChangeDetectorRef } from '@angular/core';
import { AmexioD3BaseChartComponent } from '../../base/base.component';
import { CommanDataService } from '../../services/comman.data.service';
import { DeviceQueryService } from '../../services/device.query.service';
import * as d3 from 'd3';
export class BubbleComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     * @param {?} device
     */
    constructor(myservice, cdf, device) {
        super('bubble');
        this.myservice = myservice;
        this.cdf = cdf;
        this.device = device;
        this.svgheight = 300;
        this.color = "blue";
        this.zoomflag = false;
        this.zoominitiated = false;
        this.keyArray = [];
        this.transformeddata = [];
        this.colors = [];
        this.xaxisArray = [];
        this.xarray = [];
        this.legends = [];
        this.legendarray = [];
        this.resizebtnflag = false;
        this.legendData = [];
        this.minxvalue = 0;
        this.maxxvalue = 0;
        this.bubblechartdata = [];
        this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.wt = this.svgwidth;
        this.data1 = [];
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    resp = response;
                    this.httpresponse = resp;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                }), (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.data = this.getResponseData(resp);
                        this.data1 = this.data;
                        this.xaxisData();
                        this.transformData(this.data1);
                        this.transformdata();
                        this.colorGeneration();
                        this.formLegendData();
                        this.plotBubbleChart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data1 = this.data;
                    this.data = this.getResponseData(this.data);
                    this.xaxisData();
                    this.transformData(this.data);
                    this.transformdata();
                    this.colorGeneration();
                    this.formLegendData();
                    this.plotBubbleChart();
                }), 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                resp = response;
                this.httpresponse = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
            }), (/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    //this.data = this.getResponseData(resp);
                    this.drawChart();
                }), 0);
            }));
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.data = this.getResponseData(this.httpresponse);
            this.data1 = this.data;
            this.xaxisData();
            this.transformData(this.data1);
            this.transformdata();
            this.colorGeneration();
            this.formLegendData();
            this.plotBubbleChart();
        }), 0);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.colordata = [];
        this.keyArray = data[0];
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((/**
                 * @param {?} individualvalue
                 * @param {?} keyindex
                 * @return {?}
                 */
                (individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                }));
                this.transformeddata.push(DummyObject);
            }
        }));
        this.data = this.transformeddata;
        this.colordata = this.transformeddata;
    }
    /**
     * @return {?}
     */
    plotBubbleChart() {
        /** @type {?} */
        let colors = this.predefinedcolors;
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE
        }
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        const margin = { top: 20, right: 60, bottom: 50, left: 60 };
        /** @type {?} */
        const width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        const height = this.svgheight - margin.top - margin.bottom;
        /** @type {?} */
        let x;
        /** @type {?} */
        let y;
        x = d3.scaleLinear()
            .rangeRound([0, width]);
        y = d3.scaleLinear()
            .rangeRound([height, 0]);
        /** @type {?} */
        let xAxis = d3.axisBottom(x).ticks(this.xtickscount);
        /** @type {?} */
        let yAxis = d3.axisLeft(y).ticks(this.tickscount);
        this.svg = d3.select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        y.domain([0, d3.max(this.data, (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return d[Object.keys(d)[2]]; }))]);
        x.domain([this.minxvalue, this.maxxvalue]);
        /** @type {?} */
        let rScale = d3.scaleSqrt().rangeRound([6, 30]);
        rScale.domain([d3.min(this.data, (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return d[Object.keys(d)[4]]; })), d3.max(this.data, (/**
             * @param {?} d
             * @param {?} i
             * @return {?}
             */
            (d, i) => { return d[Object.keys(d)[4]]; }))]);
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xAxis)
                    .append("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xAxis)
                    .append("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .style("text-anchor", "start");
            }
        }
        else {
            this.svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        this.svg.append("g")
            .attr("class", "y axis")
            .call(yAxis)
            .append("text")
            .attr("class", "label")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end");
        this.plotLine(this.svg, x, y, height, width);
        this.node = this.svg.selectAll(".dot")
            .data(this.bubblechartdata)
            .enter().append("circle")
            .attr("class", "dot")
            .attr("r", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return rScale(d[Object.keys(d)[4]]); }))
            .attr("cursor", "pointer")
            .attr("cx", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return x(d[Object.keys(d)[1]]);
        }))
            .attr("cy", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return y(d[Object.keys(d)[2]]); }))
            .attr("fill", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return d[Object.keys(d)[5]]; }))
            .attr('opacity', 0.7)
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.html(this.formTooltipData(d))
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            // if(!this.zoominitiated) {
            this.bubbleChartClick(d);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
            // }
        }));
        //label
        if (this.labelflag) {
            this.nodelabel = this.svg.selectAll("labels")
                .data(this.bubblechartdata)
                .enter().append("text")
                .style("font-weight", "bold")
                .style("font-size", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return rScale(d[Object.keys(d)[4]]) - 4;
            }))
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (this.labelcolor && this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return x(d[Object.keys(d)[1]]);
            }))
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return y(d[Object.keys(d)[2]]); }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return d[Object.keys(d)[0]];
            }))
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.html(this.formTooltipData(d))
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                // if(!this.zoominitiated) {
                this.bubbleChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
                // }
            }));
        }
        //create zoom handler 
        if (this.zoomflag) {
            this.zoominitiated = true;
            /** @type {?} */
            let zoom_handler = d3.zoom()
                .on("zoom", this.zoom_actions.bind(this));
            zoom_handler(this.svg);
        }
    }
    /**
     * @return {?}
     */
    togglebtnflag() {
        this.resizebtnflag = true;
    }
    /**
     * @return {?}
     */
    zoom_actions() {
        this.node.attr("transform", d3.event.transform);
        if (this.labelflag) {
            this.nodelabel.attr("transform", d3.event.transform);
        }
        this.resizebtnflag = true;
        this.zoominitiated = false;
    }
    /**
     * @return {?}
     */
    resizesvg() {
        // this.svg = null;
        this.svg.selectAll("*").remove();
        this.plotBubbleChart();
        this.resizebtnflag = false;
    }
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    formTooltipData(tooltipData) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(tooltipData)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        return this.toolTipForBar(object);
    }
    // Method on chart click
    /**
     * @param {?} event
     * @return {?}
     */
    bubbleChartClick(event) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(event)) {
            if (key !== 'color') {
                object[key] = value;
            }
        }
        this.chartClick(object);
    }
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    validateresize() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.wt) {
            }
            else {
                this.resize();
            }
        }), 0);
    }
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    resize() {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotBubbleChart();
    }
    /**
     * @return {?}
     */
    xaxisData() {
        /** @type {?} */
        let array = [];
        this.minxvalue = 0;
        this.maxxvalue = 0;
        this.xaxisArray = [];
        this.xarray = [];
        this.data1.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            array.push(element[1]);
        }));
        for (let i = 1; i < array.length; i++) {
            this.xaxisArray.push(array[i]);
        }
        /** @type {?} */
        let minvalue = Math.floor(d3.min(this.xaxisArray));
        /** @type {?} */
        let maxvalue = Math.ceil(d3.max(this.xaxisArray));
        this.minxvalue = 5 * (Math.floor(Math.abs(minvalue / 5)));
        this.maxxvalue = 5 * (Math.ceil(Math.abs(maxvalue / 5)));
    }
    /**
     * @return {?}
     */
    colorGeneration() {
        this.legendarray = [];
        /** @type {?} */
        let i = 0;
        /** @type {?} */
        let names = this.data1
            .map((/**
         * @param {?} e
         * @return {?}
         */
        e => e[3]))
            .filter((/**
         * @param {?} e
         * @param {?} i
         * @param {?} a
         * @return {?}
         */
        (e, i, a) => a.indexOf(e) === i));
        for (let j = 1; j < names.length; j++) {
            /** @type {?} */
            let value = [];
            /** @type {?} */
            let obj = { "label": "", "color": "", "value": [] };
            this.colordata.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (element[Object.keys(element)[3]] == names[j]) {
                    element['color'] = this.predefinedcolors[i];
                    value.push(element);
                }
            }));
            obj["value"] = value;
            obj["label"] = names[j];
            obj["color"] = this.predefinedcolors[i];
            this.legendarray.push(obj);
            i++;
        }
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendData = [];
        this.legendarray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let legendobject = {};
            legendobject['label'] = element.label;
            legendobject['color'] = element.color;
            this.legendData.push(legendobject);
        }));
    }
    /**
     * @param {?} legendevent
     * @return {?}
     */
    onBubbleLegendClick(legendevent) {
        this.legendarray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let obj = {};
            /** @type {?} */
            let temparr = [];
            if (legendevent.label == element.label) {
                /** @type {?} */
                let arr = element.value;
                arr.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    for (let [key, value] of Object.entries(element)) {
                        if (key !== 'color') {
                            obj[key] = value;
                        }
                    } // for ends
                    temparr.push(obj);
                })); // for each ends
                this.legendClick(temparr);
            }
        }));
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, x, y, height, width) {
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(d3.axisBottom(x).
                tickSize(-this.width).tickFormat('').ticks(this.xtickscount));
        }
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    }
    /**
     * @return {?}
     */
    transformdata() {
        this.bubblechartdata = [];
        /** @type {?} */
        let buubledata = [];
        this.colordata.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        (element, i) => {
            buubledata.push(element[Object.keys(element)[4]]);
        }));
        /** @type {?} */
        let data = buubledata.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => { return b - a; }));
        for (let j = 0; j <= data.length; j++) {
            this.colordata.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (data[j] == element[Object.keys(element)[4]])
                    this.bubblechartdata.push(element);
            }));
        }
    }
}
BubbleComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-bubble',
                template: `<div #chartId *ngIf="drillableFlag" (window:resize)="validateresize()">
    <table *ngIf="data.length > 0" style="width: 100%;">
        <tr>
            <td colspan="2" style="font-size: 18px; font-weight: bold; "> {{title}}
                <span *ngIf="resizebtnflag">
                    <button type="reset" class="fa fa-search-minus" style="cursor: pointer; float:right" (click)="resizesvg()">
                    </button>
                </span>
            </td>
            <td></td>
        </tr>
        <tr>
            <td>
                <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
                </svg>
            </td>
        </tr>
        <tr *ngIf="legend">
            <td style="display: block; padding: 5px;">
                <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="onBubbleLegendClick($event)" [data]="legendData"
                    style="height:100%;"></amexio-d3-legend>
            </td>
        </tr>
    </table>
    <div *ngIf="data.length < 1" class="lmask" style="padding-top:50%">
    </div>
</div>`,
                styles: [``]
            },] },
];
BubbleComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef },
    { type: DeviceQueryService }
];
BubbleComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    color: [{ type: Input, args: ['color',] }],
    zoomflag: [{ type: Input, args: ['zoom-enable',] }],
    tickscount: [{ type: Input, args: ['yaxis-interval',] }],
    xtickscount: [{ type: Input, args: ['xaxis-interval',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }]
};
if (false) {
    /** @type {?} */
    BubbleComponent.prototype.svgwidth;
    /** @type {?} */
    BubbleComponent.prototype.svgheight;
    /** @type {?} */
    BubbleComponent.prototype.color;
    /** @type {?} */
    BubbleComponent.prototype.zoomflag;
    /** @type {?} */
    BubbleComponent.prototype.tickscount;
    /** @type {?} */
    BubbleComponent.prototype.xtickscount;
    /** @type {?} */
    BubbleComponent.prototype.chartId;
    /** @type {?} */
    BubbleComponent.prototype.divid;
    /** @type {?} */
    BubbleComponent.prototype.wt;
    /** @type {?} */
    BubbleComponent.prototype.zoominitiated;
    /** @type {?} */
    BubbleComponent.prototype.keyArray;
    /** @type {?} */
    BubbleComponent.prototype.transformeddata;
    /** @type {?} */
    BubbleComponent.prototype.colors;
    /** @type {?} */
    BubbleComponent.prototype.data1;
    /** @type {?} */
    BubbleComponent.prototype.xaxisArray;
    /** @type {?} */
    BubbleComponent.prototype.xarray;
    /** @type {?} */
    BubbleComponent.prototype.legends;
    /** @type {?} */
    BubbleComponent.prototype.legendarray;
    /** @type {?} */
    BubbleComponent.prototype.node;
    /** @type {?} */
    BubbleComponent.prototype.nodelabel;
    /** @type {?} */
    BubbleComponent.prototype.resizebtnflag;
    /** @type {?} */
    BubbleComponent.prototype.legendData;
    /** @type {?} */
    BubbleComponent.prototype.minxvalue;
    /** @type {?} */
    BubbleComponent.prototype.maxxvalue;
    /** @type {?} */
    BubbleComponent.prototype.colordata;
    /** @type {?} */
    BubbleComponent.prototype.bubblechartdata;
    /** @type {?} */
    BubbleComponent.prototype.httpresponse;
    /** @type {?} */
    BubbleComponent.prototype.svg;
    /**
     * @type {?}
     * @private
     */
    BubbleComponent.prototype.myservice;
    /**
     * @type {?}
     * @private
     */
    BubbleComponent.prototype.cdf;
    /**
     * @type {?}
     * @private
     */
    BubbleComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,