import { Input, Output, EventEmitter, Injectable, Component, ViewChild, ChangeDetectorRef, NgModule, defineInjectable, inject, ContentChildren, Inject, PLATFORM_ID } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import * as d3 from 'd3';
import { scaleBand, scaleLinear, max, select, axisBottom, axisLeft, event as event$1, scaleTime, scalePoint, scaleSqrt, min, zoom, stack, stackOffsetDiverging, scaleOrdinal, schemeCategory10, line, area, arc, pie } from 'd3';
import { FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AmexioD3BaseChartComponent {
    /**
     * @param {?} charttype
     */
    constructor(charttype) {
        this.onLegendClick = new EventEmitter();
        this.onChartClick = new EventEmitter();
        this.onLineClick = new EventEmitter();
        this.drillableEvent = new EventEmitter();
        this.data = [];
        this.legend = true;
        this.height = "300";
        this.width = "300";
        this.title = "";
        this.labelcolor = "black";
        this.labelflag = false;
        this.level = 0;
        this.drillabledatakey = [];
        this.hScale = true;
        this.vScale = false;
        this.resizeflag = false;
        //-------------------
        this.drillableFlag = true;
        this.possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcddefghijklmonpqrstuvwxyz";
        this.colorIndex = 0;
        this.colors = [];
        this.charttype = charttype;
        this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
        this.componentId = this.charttype + "-" + this.generateId();
    }
    /**
     * @protected
     * @return {?}
     */
    initializeData() {
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            element.color = this.getColor(element);
        }));
    }
    /**
     * @protected
     * @param {?} data
     * @param {?} drillablekeys
     * @return {?}
     */
    getMultipleDrillbleKeyData(data, drillablekeys) {
        /** @type {?} */
        let nodeObject = {};
        if (data) {
            for (let index = 0; index < drillablekeys.length; index++) {
                /** @type {?} */
                let element = drillablekeys[index];
                for (let [key, value] of Object.entries(data)) {
                    if (key == element) {
                        nodeObject[key] = value;
                    }
                }
            }
            return nodeObject;
        }
    }
    /**
     * @private
     * @return {?}
     */
    generateId() {
        /** @type {?} */
        let id = "";
        for (let i = 0; i < 5; i++) {
            id = id + this.possible
                .charAt(Math.floor(Math.random() * this.possible.length));
        }
        id = id + "-" + new Date().getTime();
        return id;
    }
    /**
     * @private
     * @param {?} object
     * @return {?}
     */
    getColor(object) {
        if (object.color) {
            return object.color;
        }
        else if (this.colors.length > this.colorIndex) {
            /** @type {?} */
            const color = this.colors[this.colorIndex];
            this.colorIndex++;
            return color;
        }
        else if ((this.colors.length > 0) && (this.colors.length <= this.colorIndex)) {
            this.colorIndex = 0;
            /** @type {?} */
            const color = this.colors[this.colorIndex];
            return color;
        }
        else {
            /** @type {?} */
            const color = this.predefinedcolors[this.colorIndex];
            this.colorIndex++;
            return color;
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    legendClick(node) {
        this.onLegendClick.emit(node);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    chartClick(node) {
        this.onChartClick.emit(node);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    comboLineClick(node) {
        this.onLineClick.emit(node);
    }
    /**
     * @param {?} ref
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    fordrillableClick(ref, node, event) {
        this.drillableEvent.emit({ ref: ref, node: node, event: event });
    }
    /**
     * @protected
     * @param {?} d3
     * @return {?}
     */
    toolTip(d3$$1) {
        return d3$$1.select("body")
            .append("div")
            .attr('id', 'tooltipid')
            .attr('class', 'amexiod3tooltip')
            .style("position", "absolute")
            .style("z-index", "10")
            .style("fill", "black")
            .style("visibility", "hidden");
    }
    /**
     * @protected
     * @param {?} tooltipdata
     * @return {?}
     */
    toolTipContent(tooltipdata) {
        /** @type {?} */
        let tooltiphtml = "<table>";
        for (const key in tooltipdata) {
            if (tooltipdata.hasOwnProperty(key)) {
                /** @type {?} */
                const value = tooltipdata[key];
                tooltiphtml = tooltiphtml + "<tr>";
                //------------------
                //   tooltiphtml = tooltiphtml + "<td>";
                //   tooltiphtml = tooltiphtml + key+':';
                //   tooltiphtml = tooltiphtml + "</td>";
                //------------------
                tooltiphtml = tooltiphtml + "<td>";
                tooltiphtml = tooltiphtml + value;
                tooltiphtml = tooltiphtml + "</td>";
                tooltiphtml = tooltiphtml + "</tr>";
            }
        }
        tooltiphtml = tooltiphtml + "</table>";
        return tooltiphtml;
    }
    /**
     * @protected
     * @param {?} legend
     * @param {?} xaxis
     * @param {?} yaxis
     * @return {?}
     */
    toolTipWithLegendandAxis(legend, xaxis, yaxis) {
        /** @type {?} */
        let tooltiphtml = "<div>";
        tooltiphtml = tooltiphtml + "<b>" + xaxis + "</b>, ";
        tooltiphtml = tooltiphtml + legend + "</b> ";
        tooltiphtml = tooltiphtml + "<b>" + yaxis + "</b> ";
        tooltiphtml = tooltiphtml + "</div>";
        return tooltiphtml;
    }
    /**
     * @protected
     * @param {?} tooltipData
     * @return {?}
     */
    toolTipForBar(tooltipData) {
        /** @type {?} */
        let tooltiphtml = "<div>";
        for (let [key, value] of Object.entries(tooltipData)) {
            /** @type {?} */
            let sideStyle = "float:left";
            tooltiphtml = tooltiphtml + "<div>";
            tooltiphtml = tooltiphtml + "<span style =" + sideStyle + " ><b>" + key + " " + "</b>" + value + "</br></span>";
            tooltiphtml = tooltiphtml + "</div>";
        }
        return tooltiphtml;
    }
}
AmexioD3BaseChartComponent.propDecorators = {
    onLegendClick: [{ type: Output }],
    onChartClick: [{ type: Output }],
    onLineClick: [{ type: Output }],
    drillableEvent: [{ type: Output }],
    data: [{ type: Input, args: ['data',] }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    legend: [{ type: Input, args: ['legend',] }],
    colors: [{ type: Input, args: ['color',] }],
    height: [{ type: Input, args: ['height',] }],
    width: [{ type: Input, args: ['width',] }],
    title: [{ type: Input, args: ['title',] }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    labelflag: [{ type: Input, args: ['label',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    hScale: [{ type: Input, args: ['horizontal-scale',] }],
    vScale: [{ type: Input, args: ['vertical-scale',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CommanDataService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @return {?}
     */
    fetchUrlData(serviceUrl, methodType) {
        /** @type {?} */
        const requestJson = {};
        /** @type {?} */
        const headers = new HttpHeaders().append('Content-Type', 'application/json;charset=UTF-8');
        if (methodType === 'post') {
            return this.http.post(serviceUrl, requestJson, { headers });
        }
        else if (methodType === 'get') {
            return this.http.get(serviceUrl, { headers });
        }
    }
    /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @param {?} requestJson
     * @return {?}
     */
    postfetchData(serviceUrl, methodType, requestJson) {
        /** @type {?} */
        const headers = new HttpHeaders().append('Content-Type', 'application/json;charset=UTF-8');
        if (methodType === 'post') {
            return this.http.post(serviceUrl, requestJson, { headers });
        }
        else if (methodType === 'get') {
            return this.http.get(serviceUrl, { headers });
        }
    }
}
CommanDataService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
CommanDataService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ CommanDataService.ngInjectableDef = defineInjectable({ factory: function CommanDataService_Factory() { return new CommanDataService(inject(HttpClient)); }, token: CommanDataService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DeviceQueryService {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        this.platformId = platformId;
        this.rules = {
            print: 'print',
            screen: 'screen',
            phone: '(max-width: 767px)',
            tablet: '(min-width: 768px) and (max-width: 1024px)',
            desktop: '(min-width: 1025px)',
            portrait: '(orientation: portrait)',
            landscape: '(orientation: landscape)',
            retina: '(-webkit-min-device-pixel-ratio: 2) and (min-resolution: 192dpi)',
        };
        this.Check = (/**
         * @param {?} mq
         * @return {?}
         */
        function (mq) {
            if (isPlatformBrowser(this.platformId)) {
                if (!mq) {
                    return;
                }
                return window.matchMedia(mq).matches;
            }
            else {
                return;
            }
        });
        this.IsTablet = (/**
         * @return {?}
         */
        function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.tablet).matches;
            }
            else {
                return null;
            }
        });
        this.IsDesktop = (/**
         * @return {?}
         */
        function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.desktop).matches;
            }
            else {
                return null;
            }
        });
        this.IsPortrait = (/**
         * @return {?}
         */
        function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.portrait).matches;
            }
            else {
                return null;
            }
        });
        this.IsLandscape = (/**
         * @return {?}
         */
        function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.landscape).matches;
            }
            else {
                return null;
            }
        });
        this.IsRetina = (/**
         * @return {?}
         */
        function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.retina).matches;
            }
            else {
                return null;
            }
        });
        this.browserWindow = (/**
         * @return {?}
         */
        () => {
            return window;
        });
    }
    /**
     * *******************************************
     * METHODS FOR CHECKING TYPE
     * ********************************************
     * @return {?}
     */
    IsPhone() {
        if (isPlatformBrowser(this.platformId)) {
            return window.matchMedia(this.rules.phone).matches;
        }
        else {
            return null;
        }
    }
    /**
     * *******************************************
     * EVENT LISTENERS BY TYPE
     * ********************************************
     * @param {?} callBack
     * @return {?}
     */
    OnPhone(callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            const mql = window.matchMedia(this.rules.phone);
            this.mqlMethod(callBack, mql);
        }
    }
    /**
     * @param {?} callBack
     * @return {?}
     */
    OnTablet(callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            const mql = window.matchMedia(this.rules.tablet);
            this.mqlMethod(callBack, mql);
        }
    }
    /**
     * @param {?} callBack
     * @return {?}
     */
    OnDesktop(callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            const mql = window.matchMedia(this.rules.desktop);
            this.mqlMethod(callBack, mql);
        }
    }
    /**
     * @param {?} callBack
     * @return {?}
     */
    OnPortrait(callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            const mql = window.matchMedia(this.rules.portrait);
            this.mqlMethod(callBack, mql);
        }
    }
    /**
     * @param {?} callBack
     * @return {?}
     */
    OnLandscape(callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            const mql = window.matchMedia(this.rules.landscape);
            this.mqlMethod(callBack, mql);
        }
    }
    /**
     * @param {?} callBack
     * @param {?} mql
     * @return {?}
     */
    mqlMethod(callBack, mql) {
        mql.addListener((/**
         * @param {?} mql1
         * @return {?}
         */
        (mql1) => {
            if (mql1.matches) {
                callBack(mql);
            }
        }));
    }
}
DeviceQueryService.decorators = [
    { type: Injectable },
];
DeviceQueryService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AmexioD3DounutChartComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     * @param {?} device
     */
    constructor(myservice, cdf, device) {
        super('DONUTCHART');
        this.myservice = myservice;
        this.cdf = cdf;
        this.device = device;
        this.pie = false;
        this.svgwidth = 300;
        this.svgheight = 300;
        this.desktoplegend = false;
        this.mobilelegend = false;
        this.keyArray = [];
        this.transformeddata = [];
        this.legendArray = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    resp = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                }), (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.data = this.getResponseData(resp);
                        this.drawChart();
                        // this.data = this.getResponseData(resp);
                        this.transformData(this.data);
                        this.initializeData();
                        this.plotD3Chart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(this.data);
                    this.transformData(this.data);
                    this.initializeData();
                    this.plotD3Chart();
                }), 0);
            }
        }
        else {
            this.fetchData(this.drillData);
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                resp = response;
                this.response = resp;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
            }), (/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(resp);
                    this.drawChart();
                }), 0);
            }));
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.drillableFlag = true;
            this.initializeData();
            this.plotD3Chart();
        }), 0);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        this.formLegendData();
        //this.transformData(this.data);
        //  this.data = this.transformeddata;
        /** @type {?} */
        let outerRadius = 0;
        /** @type {?} */
        let innerRadius = 0;
        outerRadius = this.svgwidth / 2;
        innerRadius = this.svgwidth / 4;
        if (this.pie) {
            innerRadius = 0;
        }
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        const arc$$1 = arc()
            .outerRadius(outerRadius)
            .innerRadius(innerRadius);
        /** @type {?} */
        const pie$$1 = pie()
            .value((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return d[Object.keys(d)[1]];
            //  return d.value
        }));
        this.svg = select("#" + this.componentId)
            .append('g')
            .attr('transform', 'translate(' + this.svgwidth / 2 + ',' + this.svgheight / 2 + ')')
            .selectAll('path')
            .data(pie$$1(this.data))
            .enter();
        if (this.device.IsDesktop() == true) {
            this.desktoplegend = true;
            this.mobilelegend = false;
        }
        // else{
        //        if(this.device.IsPhone()==true && this.device.IsTablet()==true)
        //        {
        //             this.desktoplegend=false;
        //             this.mobilelegend=true;
        //        }
        // }
        /** @type {?} */
        const path = this.svg.append('path')
            .attr('d', arc$$1)
            .attr('fill', (/**
         * @param {?} d
         * @param {?} i
         * @return {?}
         */
        (d, i) => {
            if (d.data.color) {
                return d.data.color;
            }
            else {
                return "black";
            }
            //  return (d && d.data && d.data.color) ? d.data.color : "black"
        }))
            .attr('cursor', 'pointer')
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.html(this.formTooltipData(d.data)
            //  this.formLegendData(d.data)
            // this.toolTipContent(d.data)
            )
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            this.DonutChartClick(d.data);
            this.fordrillableClick(this, d.data, event);
            return tooltip.style("visibility", "hidden");
            //this.chartClick(d.data);
        }));
        if (this.labelflag) {
            /** @type {?} */
            const text = this.svg.append("text")
                .transition()
                .duration(200)
                .attr("transform", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return "translate(" + arc$$1.centroid(d) + ")";
            }))
                .attr("text-anchor", "middle")
                .text((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return d.data[Object.keys(d.data)[1]];
                //return d.data.value;
            }))
                .style('fill', (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (this.labelcolor && this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
                // return (d && d.data && d.data.textcolor) ? d.data.textcolor : "black";
            }))
                .style('font-size', '12px');
        }
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendArray = [];
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let legendobject = {};
            legendobject['label'] = element[Object.keys(element)[0]];
            legendobject['value'] = element[Object.keys(element)[1]];
            legendobject['color'] = element.color;
            this.legendArray.push(legendobject);
        }));
    }
    /**
     * @param {?} legendevent
     * @return {?}
     */
    onDonutLegendClick(legendevent) {
        /** @type {?} */
        let obj = {};
        //  obj['label'] = legendevent.label;
        //  obj['value'] = legendevent.value 
        obj[this.keyArray[0]] = legendevent.label;
        obj[this.keyArray[1]] = legendevent.value;
        //delete event.color;
        this.legendClick(obj);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.keyArray = data[0];
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((/**
                 * @param {?} individualvalue
                 * @param {?} keyindex
                 * @return {?}
                 */
                (individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                })); //inner for loop ends
                this.transformeddata.push(DummyObject);
            } //if ends
        })); //outer for loop ends
        this.data = this.transformeddata;
    }
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    formTooltipData(tooltipData) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(tooltipData)) {
            if (key != 'color' && key != 'textcolor') {
                object[key] = value;
            }
        }
        return this.toolTipForBar(object);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    DonutChartClick(event) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(event)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        this.chartClick(object);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    resize(data) {
        this.desktoplegend = false;
        this.mobilelegend = true;
        this.plotD3Chart();
    }
}
AmexioD3DounutChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-donut',
                template: `<div *ngIf="drillableFlag" #chartId (window:resize)="resize($event)">
    <div *ngIf="data.length > 0">

  
    <div colspan="2" style="font-size: 18px; font-weight: bold; ">
        {{title}}
    </div>
    <div [ngClass]="'donutcss'">
        <svg preserveAspectRatio="xMinYMin meet" viewBox="0 0 300 300" [attr.height]="height" [attr.width]="width" [attr.id]="componentId">
        </svg>
        <div>

            <div style="display: block; padding: 1%;">
                <div *ngIf="desktoplegend">
                    <amexio-d3-legend *ngIf="legend" (onClick)="onDonutLegendClick($event)" [data]="legendArray" style="height:100%;"></amexio-d3-legend>
                </div>
                <div *ngIf="mobilelegend">
                    <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="onDonutLegendClick($event)" [data]="legendArray" style="height:100%;"></amexio-d3-legend>
                </div>
            </div>
        </div>
        <!--  -->
        <div *ngIf="data.length < 1" class="lmask" style="padding-top:50%">
            </div>

        </div>`,
                styles: [`.donutcss{display:flex;flex-direction:row}@media screen and (max-width:1024px){.donutcss{display:flex;flex-direction:column}}`]
            },] },
];
AmexioD3DounutChartComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef },
    { type: DeviceQueryService }
];
AmexioD3DounutChartComponent.propDecorators = {
    pie: [{ type: Input, args: ['pie',] }],
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    drillid: [{ type: ViewChild, args: ['drillid',] }],
    drillData: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AmexioD3PieChartComponent {
    constructor() {
        this.data = [];
        this.onLegendClick = new EventEmitter();
        this.onChartClick = new EventEmitter();
        this.drillableEvent = new EventEmitter();
        this.legend = true;
        this.colors = [];
        this.width = "300";
        this.height = "300";
        this.title = "";
        this.level = 0;
        this.labelcolor = "black";
        this.labelflag = false;
        this.drillableFlag = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} node
     * @return {?}
     */
    legendClick(node) {
        this.onLegendClick.emit(node);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    chartClick(node) {
        this.onChartClick.emit(node);
    }
    /**
     * @param {?} ref
     * @return {?}
     */
    fordrillableClick(ref) {
        this.drillableEvent.emit(ref);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        this.drillData = data;
    }
    /**
     * @return {?}
     */
    drawChart() {
        this.donutref.drillableFlag = true;
        this.donutref.drawChart();
    }
}
AmexioD3PieChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-pie',
                template: `<div   *ngIf="drillableFlag">
<amexio-d3-chart-donut #id (onLegendClick)="legendClick($event)" 
                       (onChartClick)="chartClick($event)" 
                       (drillableEvent)=" fordrillableClick($event)"
                        [height]="height"
                        [width]="width"
                        [title]="title"
                        [data] = "data"
                        [pie]  = "true"
                        [color]="colors"
                        [http-url]="httpurl"
                        [http-method]="httpmethod"
                        [data-reader]="datareader"
                        [label]="labelflag"
                        [label-color]="labelcolor"
                        [level]="level"
                        [target]="target"
                        [drillable-data]="drillabledatakey"
                        [drillData]="drillData">
</amexio-d3-chart-donut>
</div>
`
            },] },
];
AmexioD3PieChartComponent.propDecorators = {
    data: [{ type: Input, args: ['data',] }],
    onLegendClick: [{ type: Output }],
    onChartClick: [{ type: Output }],
    drillableEvent: [{ type: Output }],
    donutref: [{ type: ViewChild, args: ['id',] }],
    legend: [{ type: Input }],
    colors: [{ type: Input, args: ['color',] }],
    width: [{ type: Input, args: ['width',] }],
    height: [{ type: Input, args: ['height',] }],
    title: [{ type: Input }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    labelflag: [{ type: Input, args: ['label',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AmexioD3Legend {
    constructor() {
        this.horizontal = false;
        this.temparr = [];
        this.onClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.data = this.data;
        this.temparr = this.data;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        // debugger;
        // window.location.reload();
        this.data = this.data;
        this.temparr = this.data;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    onLegendClick(node) {
        this.onClick.emit(node);
    }
}
AmexioD3Legend.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-legend',
                template: `<div style =" width: 100% ; padding-left: 20px; padding-top: 8px; ">
<table *ngIf="!horizontal" style="height: 100%;">
    <tr *ngFor = "let node of data" style="cursor: pointer;" (click)="onLegendClick(node)">
        <td style="height: 10px; width: 23px; padding-left: 2px;"
            [ngStyle]="{'background-color': node.color}"></td>
        <td>{{node.label}}</td>
    </tr>
</table>
</div>

<table *ngIf="horizontal" style="height: 100%;">
    <tr>
        <td *ngFor = "let node of data" 
                    (click)="onLegendClick(node)" 
                    style="cursor: pointer;">
            
            <div style=" display: inline-block; display: inline-block; padding: 2px;">
                    <div style=" width: 10px; display: inline-block; padding: 2px; " 
                    [ngStyle]="{'background-color': node.color}"></div>
                {{node.label}}
            </div>
        </td>
        
    </tr>
</table>

<br>
 `
            },] },
];
AmexioD3Legend.ctorParameters = () => [];
AmexioD3Legend.propDecorators = {
    data: [{ type: Input, args: ['data',] }],
    horizontal: [{ type: Input, args: ['horizontal',] }],
    onClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AmexioD3BarChartComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     * @param {?} device
     */
    constructor(myservice, cdf, device) {
        super('bar');
        this.myservice = myservice;
        this.cdf = cdf;
        this.device = device;
        this.svgheight = 300;
        this.horizontal = false;
        this.labelcolor = "black";
        this.labelflag = false;
        this.level = 0;
        this.drillabledatakey = [];
        this.hScale = true;
        this.showzeroflag = true;
        this._data = [];
        this.resizeflag = false;
        this.drillableFlag = true;
        this.colorflag = false;
        this.keyArray = [];
        this.transformeddata = [];
        this.legendArray = [];
        this.firstloading = false;
        this.inc = 0;
        this.isChartInit = false;
    }
    // private _data: any = [];
    /**
     * @param {?} v
     * @return {?}
     */
    set data(v) {
        if (v && (v.length > 0)) {
            this._data = v;
            // if(this.isChartInit){
            //   this.resize();
            // }
            // if (this.data) {
            // setTimeout(() => {
            //   this.data = this.getResponseData(this.data);
            //   this.transformData(this.data)
            //   this.initializeData();
            //   this.plotD3Chart();
            // }, 0);
            // }
            // this.cdf.detectChanges();
            // this.formLegendData();
        }
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    resp = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                }), (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.data = this.getResponseData(resp);
                        // this.drawChart();
                        this.transformData(this.data);
                        this.initializeData();
                        this.plotD3Chart();
                        this.isChartInit = true;
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(this.data);
                    this.transformData(this.data);
                    this.initializeData();
                    this.plotD3Chart();
                    this.isChartInit = true;
                }), 0);
            }
        }
    }
    // Fetch Data
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                resp = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
            }), (/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(resp);
                    this.drawChart();
                }), 0);
            }));
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.initializeData();
            this.plotD3Chart();
        }), 0);
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        // console.log("repeat");
        if (this.inc > 1) {
            if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(this.data);
                    this.transformData(this.data);
                    this.initializeData();
                    this.plotD3Chart();
                }), 500);
            }
            this.formLegendData();
        }
        this.inc++;
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        this.formLegendData();
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        const margin = { top: 20, right: 60, bottom: 40, left: 60 };
        /** @type {?} */
        const width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        const height = this.svgheight - margin.top - margin.bottom;
        //RESIZE STEP 2 START
        // this.svg.selectAll("*").remove();
        this.svg = select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight);
        this.svg.selectAll("*").remove();
        // this.svg.exit().remove();//remove unneeded circles
        //RESIZE STEP 2 ENDS HERE
        /** @type {?} */
        let x;
        /** @type {?} */
        let y;
        /** @type {?} */
        const g = this.svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        // vertical bar
        if (this.horizontal == false) {
            // this.svg.selectAll("*").remove();
            // -----------------------------
            if (this.data) {
                x = scaleBand()
                    .rangeRound([0, width])
                    .padding(0.1);
                //setting content for x and y axis
                x.domain(this.data.map((/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return d[Object.keys(d)[0]];
                    //    return d.label
                })));
            }
            //-----------------------------
            if (this.data) {
                y = scaleLinear()
                    .rangeRound([height, 0]);
                y.domain([0, max(this.data, (/**
                     * @param {?} d
                     * @return {?}
                     */
                    (d) => {
                        return d[Object.keys(d)[1]];
                        //return d.value;
                    }))]);
            }
            // add x axis to svg
            if (this.device.IsDesktop() == true) {
                if (this.svgwidth <= 400) {
                    g.append("g")
                        .attr("transform", "translate(0," + height + ")")
                        .call(axisBottom(x)).
                        selectAll("text")
                        .attr("y", 0)
                        .attr("x", 9)
                        .attr("dy", ".35em")
                        .attr("transform", "rotate(60)")
                        .style("text-anchor", "start");
                }
                else {
                    g.append("g")
                        .attr("transform", "translate(0," + height + ")")
                        .call(axisBottom(x));
                }
            }
            else {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            //add y axis to svg
            g.append("g")
                .call(axisLeft(y)
                .ticks(this.tickscount));
            this.plotLine(g, x, y, height, width);
            //add bar chart
            g.selectAll(".bar")
                .data(this.data)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return x(d[Object.keys(d)[0]]);
                // return x(d.label); 
            }))
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return y(d[Object.keys(d)[1]]);
                // return y(d.value); 
            }))
                .attr("cursor", "pointer")
                .attr("width", x.bandwidth())
                .attr("height", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return height - y(d[Object.keys(d)[1]]); }))
                .style("fill", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                // return "blue";
                return d.color;
            }))
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.html(this.formTooltipData(d)
                //  this.toolTipForBar(d)
                // this.toolTipContent(d)
                )
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.barChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
                //this.chartClick(d);
            }));
            if (this.labelflag) {
                /** @type {?} */
                var yTextPadding = 40;
                this.svg.selectAll(".label")
                    .data(this.data)
                    .enter()
                    .append("text")
                    .style("font-weight", "bold")
                    .style("font-size", "1vw")
                    .attr("text-anchor", "middle")
                    .attr("fill", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    if (this.labelcolor.length > 0) {
                        if ((this.labelcolor.length > 0) && d[Object.keys(d)[1]] > 0) {
                            return this.labelcolor;
                        }
                    }
                    else {
                        return "black";
                    }
                }))
                    .attr("x", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (d, i) => {
                    return x(d[Object.keys(d)[0]]) + margin.left + x.bandwidth() / 2;
                }))
                    .attr("y", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (d, i) => {
                    return y(d[Object.keys(d)[1]]) + yTextPadding;
                }))
                    .text((/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    // if (d[Object.keys(d)[1]] > 0) {
                    //   return d[Object.keys(d)[1]];
                    // }.
                    if (this.showzeroflag) {
                        return d[Object.keys(d)[1]];
                    }
                    else if (!this.showzeroflag) {
                        if (d[Object.keys(d)[1]] > 0) {
                            return d[Object.keys(d)[1]];
                        }
                    }
                }))
                    .attr("cursor", "pointer")
                    .on("mouseover", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.style("visibility", "visible");
                }))
                    .on("mousemove", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.html(this.formTooltipData(d)
                    //  this.toolTipForBar(d)
                    // this.toolTipContent(d)
                    )
                        .style("top", (event$1.pageY - 10) + "px")
                        .style("left", (event$1.pageX + 10) + "px");
                }))
                    .on("mouseout", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.style("visibility", "hidden");
                }))
                    .on("click", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    this.barChartClick(d);
                    this.fordrillableClick(this, d, event);
                    return tooltip.style("visibility", "hidden");
                    //this.chartClick(d);
                }));
            } //if ends fr 
        }
        else if (this.horizontal == true) {
            if (this.data) {
                x = scaleLinear()
                    .rangeRound([0, width]);
                //setting content for x and y axis
                x.domain([0, max(this.data, (/**
                     * @param {?} d
                     * @return {?}
                     */
                    (d) => {
                        return parseInt(d[Object.keys(d)[1]]
                        // d.value
                        );
                    }))]);
                // d[Object.keys(d)[1]]
                y = scaleBand()
                    .rangeRound([height, 0]).padding(0.1);
                y.domain(this.data.map((/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return d[Object.keys(d)[0]];
                    //return d.label;
                })));
            }
            // add x axis to svg
            g.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(axisBottom(x).ticks(this.xtickscount));
            //add y axis to svg
            g.append("g")
                .call(axisLeft(y).ticks(this.tickscount));
            this.plotLine(g, x, y, height, width);
            //add bar chart
            g.selectAll(".bar")
                .data(this.data)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", 0)
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return y(d[Object.keys(d)[0]]
                // d.label
                );
            }))
                .attr("cursor", "pointer")
                .attr("width", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return x(d[Object.keys(d)[1]]
                // d.value
                );
            }))
                .attr("height", y.bandwidth())
                .style("fill", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return d.color; }))
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.html(this.formTooltipData(d)
                // this.formLegendData(d)
                // this.toolTipContent(d)
                )
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.barChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
                //this.chartClick(d);
            }));
            if (this.labelflag) {
                /** @type {?} */
                let yTextPadding = 40;
                this.svg.selectAll(".label")
                    .data(this.data)
                    .enter()
                    .append("text")
                    .style("font-weight", "bold")
                    .attr("text-anchor", "middle")
                    .attr("vertical-align", "middle")
                    .attr("margin-top", margin.top)
                    .attr("fill", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    if (this.labelcolor.length > 0) {
                        return this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                }))
                    .attr("x", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (d, i) => {
                    return x(d[Object.keys(d)[1]]) + yTextPadding;
                }))
                    .attr("y", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (d, i) => {
                    return y(d[Object.keys(d)[0]])
                        + margin.top + y.bandwidth() / 2;
                }))
                    .text((/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    // return d[Object.keys(d)[1]];
                    if (this.showzeroflag) {
                        return d[Object.keys(d)[1]];
                    }
                    else if (!this.showzeroflag) {
                        if (d[Object.keys(d)[1]] > 0) {
                            return d[Object.keys(d)[1]];
                        }
                    }
                }))
                    .attr("cursor", "pointer")
                    .on("mouseover", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.style("visibility", "visible");
                }))
                    .on("mousemove", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.html(this.formTooltipData(d)
                    // this.formLegendData(d)
                    // this.toolTipContent(d)
                    )
                        .style("top", (event$1.pageY - 10) + "px")
                        .style("left", (event$1.pageX + 10) + "px");
                }))
                    .on("mouseout", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.style("visibility", "hidden");
                }))
                    .on("click", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    this.barChartClick(d);
                    this.fordrillableClick(this, d, event);
                    return tooltip.style("visibility", "hidden");
                    //this.chartClick(d);
                }));
            }
        }
        //else ends(horizontal bar logic ends)
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y).ticks(this.tickscount)
                .tickSize(-width).tickFormat(''));
        }
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(axisBottom(x).
                tickSize(-this.width).tickFormat('').ticks(this.xtickscount));
        }
    }
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    formTooltipData(tooltipData) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(tooltipData)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        return this.toolTipForBar(object);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        if (data && (data.length > 0)) {
            this.transformeddata = [];
            this.keyArray = data[0];
            if (data && (data.length > 0)) {
                data.forEach((/**
                 * @param {?} element
                 * @param {?} index
                 * @return {?}
                 */
                (element, index) => {
                    if (index > 0) {
                        /** @type {?} */
                        let DummyObject = {};
                        element.forEach((/**
                         * @param {?} individualvalue
                         * @param {?} keyindex
                         * @return {?}
                         */
                        (individualvalue, keyindex) => {
                            DummyObject[this.keyArray[keyindex]] = individualvalue;
                        })); //inner for loop ends
                        this.transformeddata.push(DummyObject);
                    } //if ends
                })); //outer for loop ends
            }
            this.data = this.transformeddata;
        } //
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendArray = [];
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let legendobject = {};
            legendobject['label'] = element[Object.keys(element)[0]];
            legendobject['value'] = element[Object.keys(element)[1]];
            legendobject['color'] = element.color;
            this.legendArray.push(legendobject);
        }));
        this.legendArray;
    }
    /**
     * @param {?} legendevent
     * @return {?}
     */
    onBarLegendClick(legendevent) {
        /** @type {?} */
        let obj = {};
        //  obj['label'] = legendevent.label;
        //  obj['value'] = legendevent.value;
        obj[this.keyArray[0]] = legendevent.label;
        obj[this.keyArray[1]] = legendevent.value;
        //obj[legendevent.label] = legendevent.value;
        //delete event.color;
        this.legendClick(obj);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    barChartClick(event) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(event)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        this.chartClick(object);
    }
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    validateresize() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.wt) ;
            else {
                this.resize();
            }
        }), 0);
    }
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 5 STARTS
    /**
     * @return {?}
     */
    resize() {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotD3Chart();
    }
    // //RESIZE STEP 5 STARTS
    //   initialresize() {
    //     if (this.wt) {
    //       //RESIZE STEP 3 START
    //       // if(this.firstloading)
    //       // this.svg.selectAll("*").remove();
    //       this.resizeflag = true;
    //       if (this.svgwidth) {
    //         this.svgwidth = this.svgwidth;
    //       } else if (this.chartId) {
    //         this.svgwidth = this.chartId.nativeElement.offsetWidth;
    //       }
    //       //RESIZE STEP 3 ENDS
    //       // this.svgwidth = this.divid.nativeElement.offsetWidth;
    //       this.cdf.detectChanges();
    //       this.plotD3Chart();
    //     }
    //     this.firstloading = false;
    //   }
    // //RESIZE STEP 5 ENDS
    /**
     * @return {?}
     */
    validateData() {
        if (this.data) ;
        else {
            return "lmask";
        }
    }
}
AmexioD3BarChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-bar',
                template: `<div #chartId *ngIf="drillableFlag " #divid (window:resize)="validateresize()">
    <table [ngClass]="validateData()" style="width: 100%;" position=" relative">
        <ng-container *ngIf="title.length > 0">
            <tr>
                <td style="font-size: 18px; font-weight: bold; "> {{title}} </td>
            </tr>
        </ng-container>
        <tr>
            <td>
                <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
                </svg>
            </td>
        </tr>
        <tr *ngIf="legend">
            <td style="display: block; padding: 5px;">
                <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="onBarLegendClick($event)" [data]="legendArray" style="height:100%;">
                </amexio-d3-legend>
            </td>
        </tr>
    </table>
    <!-- <table *ngIf="!(data && data.length >0)" class="lmask">
        
    </table > -->
    <!-- <div *ngIf="data.length < 1" class="lmask" style="padding-top:50%">
    </div> -->

</div>`
            },] },
];
AmexioD3BarChartComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef },
    { type: DeviceQueryService }
];
AmexioD3BarChartComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    horizontal: [{ type: Input }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    labelflag: [{ type: Input, args: ['label',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    drillid: [{ type: ViewChild, args: ['drillid',] }],
    DOM: [{ type: ViewChild, args: ['domref',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    hScale: [{ type: Input, args: ['horizontal-scale',] }],
    tickscount: [{ type: Input, args: ['yaxis-interval',] }],
    xtickscount: [{ type: Input, args: ['xaxis-interval',] }],
    showzeroflag: [{ type: Input, args: ['show-zero-values',] }],
    _data: [{ type: Input, args: ['data',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AmexioD3BaseLineComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} deviceQueryService
     */
    constructor(deviceQueryService) {
        super('line');
        this.deviceQueryService = deviceQueryService;
        this._data = [];
        this.xarr = [];
        this.displayindex = 0;
        this.svgheight = 300;
        // @Input('xaxis-interval') xtickscount: number = 3;
        this.linecolor = [];
        this.slant = false;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set data(v) {
        this._data = v;
        if (this._data && (this._data.length > 0)) {
            this.createXYAxisData();
        }
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @protected
     * @return {?}
     */
    createXYAxisData() {
        this.labelcolor;
        this.xaxisdata = [];
        this.yaxisdata = [];
        this.multiseriesdata = [];
        this.legenddata = [];
        this.legends = [];
        this.xaxisname = this.data[0][0].label;
        /** @type {?} */
        const msdarray = [];
        /** @type {?} */
        let count = 0
        // ************************************************
        ;
        // ************************************************
        if (this.displayfield) {
            // find displayfield index
            this._data[0].forEach((/**
             * @param {?} element
             * @param {?} index
             * @return {?}
             */
            (element, index) => {
                if (element.label == this.displayfield) {
                    this.displayindex = index;
                }
            }));
        }
        // ***********************************************
        for (let index = 0; index < this._data[0].length; index++) {
            /** @type {?} */
            const legend = this._data[0][index];
            msdarray[index] = [];
            /** @type {?} */
            let obj = {};
            obj['label'] = legend.label;
            if ((this.linecolor.length > 0) && this.linecolor[index]) {
                obj['color'] = this.linecolor[index];
            }
            else {
                obj['color'] = this.predefinedcolors[index];
            }
            this.legenddata.push(obj);
            // this.legenddata.push({'label':legend.label,'color':this.predefinedcolors[index+1]});
            if (index > 0) {
                /** @type {?} */
                let obj = {};
                obj['label'] = legend.label;
                if ((this.linecolor.length > 0) && this.linecolor[count]) {
                    obj['color'] = this.linecolor[count];
                }
                else {
                    obj['color'] = this.predefinedcolors[count];
                }
                this.legends.push(obj);
                count++;
                // this.legends.push({'label':legend.label,'color':this.predefinedcolors[index]});
            }
        }
        /** @type {?} */
        let i = 0;
        // xaxisdata yaxisdata msdarray is formed here
        this._data.forEach((/**
         * @param {?} object
         * @return {?}
         */
        object => {
            if (i > 0) {
                /** @type {?} */
                let j = 0;
                /** @type {?} */
                let xobj = {};
                object.forEach((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => {
                    // if (j === 0) {
                    //     this.xaxisdata.push({ 'label': a, 'value': a });
                    // } else {
                    //     this.yaxisdata.push({ 'label': a, 'value': a });
                    // }
                    if ((j > 0) && (j !== this.displayindex)) {
                        this.yaxisdata.push({ 'label': a, 'value': a });
                    }
                    if (j == 0) {
                        xobj['value'] = a;
                    }
                    if (j == this.displayindex) {
                        xobj['label'] = a;
                    }
                    msdarray[j].push(a);
                    j++;
                }));
                this.xaxisdata.push(xobj);
            }
            i++;
        }));
        for (let index = 0; index < msdarray.length; index++) {
            /** @type {?} */
            const element = msdarray[index];
            if ((index > 0) && (index !== this.displayindex)) {
                /** @type {?} */
                let md = [];
                for (let j = 0; j < element.length; j++) {
                    /** @type {?} */
                    const v = element[j];
                    md.push({ 'legend': this.legenddata[index].label, 'label': this.xaxisdata[j].label, 'value': v });
                }
                this.multiseriesdata.push(md);
                this.legends[index - 1].data = md;
            }
        }
    }
    /**
     * @param {?} width
     * @return {?}
     */
    recalculatescale(width) {
        // consider fontsize to be 10
        this.xaxisdata;
        /** @type {?} */
        let summationwidth = 0;
        if (!this.displayfield) {
            this.xaxisdata.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (typeof (element.label) == 'string') {
                    summationwidth = summationwidth + (element.label.length * 10);
                }
                if (typeof (element.label) == 'number') {
                    /** @type {?} */
                    let n = this.findDigitCount(element.label);
                    summationwidth = summationwidth + (n * 10);
                }
            }));
        }
        if (this.displayfield) {
            this.xaxisdata.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                // if (typeof (element.label) == 'string') {
                summationwidth = summationwidth + (element.label.length * 10);
                // }
            }));
        }
        if (this.displayfield && this.slant) {
            summationwidth = this.xaxisdata.length * 10;
        }
        if (summationwidth > width) {
            //  function call
            this.calculatexaxisarray(summationwidth, width);
        }
    }
    /**
     * @param {?} summationwidth
     * @param {?} width
     * @return {?}
     */
    calculatexaxisarray(summationwidth, width) {
        /** @type {?} */
        let interval = Math.round(summationwidth / width);
        this.generateNewAxis(interval, width);
    }
    /**
     * @param {?} interval
     * @param {?} avlwidth
     * @return {?}
     */
    generateNewAxis(interval, avlwidth) {
        this.xaxisdata;
        /** @type {?} */
        let arr = [];
        /** @type {?} */
        let newarr = [];
        /** @type {?} */
        let min$$1;
        /** @type {?} */
        let max$$1;
        //    make Array out of this.xaxisdata
        this.xaxisdata.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            // if (typeof (element.label) == 'number') {
            arr.push(element.label);
            // }
        }));
        //null check on arr
        if (arr.length > 0) {
            // find min
            min$$1 = Math.min.apply(null, arr);
            //find max
            max$$1 = Math.max.apply(null, arr);
            /** @type {?} */
            let temp = Math.round(avlwidth / 10);
            /** @type {?} */
            let differential = (temp - (temp * 0.2)) / 4;
            //form new arr
            /** @type {?} */
            let j = Math.round(differential);
            //   hjlkllll
            /** @type {?} */
            let i;
            /** @type {?} */
            let isredundant = false;
            if (!this.displayfield) {
                newarr[0] = min$$1;
                for (i = 1; j < this.xaxisdata.length; i++) {
                    j = Math.round((differential * i) + i);
                    isredundant = this.checkArrayRedundancy(newarr, Math.round(j));
                    if (isredundant) {
                        newarr[i] = Math.round(j + 1);
                    }
                    else {
                        newarr[i] = Math.round(j);
                    }
                }
                this.sortarr(newarr);
            }
            if (this.displayfield) {
                for (i = 0; j < this.xaxisdata.length; i++) {
                    j = Math.round((differential * i) + i);
                    if (this.xaxisdata[j]) {
                        newarr[i] = this.xaxisdata[j].label;
                    }
                    else {
                        if (this.xaxisdata[j + 1]) {
                            newarr[i] = this.xaxisdata[j + 1].label;
                        }
                    }
                }
                this.xarr = newarr;
            }
        }
    }
    /**
     * @param {?} newarr
     * @param {?} chknum
     * @return {?}
     */
    checkArrayRedundancy(newarr, chknum) {
        /** @type {?} */
        let inc = 0;
        newarr.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (chknum == element) {
                inc++;
            }
        }));
        if (inc > 1) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} newarr
     * @return {?}
     */
    sortarr(newarr) {
        /** @type {?} */
        let i;
        /** @type {?} */
        let j;
        /** @type {?} */
        let temp;
        for (i = 0; i < newarr.length; ++i) {
            for (j = i + 1; j < newarr.length; ++j) {
                if (newarr[i] > newarr[j]) {
                    temp = newarr[i];
                    newarr[i] = newarr[j];
                    newarr[j] = temp;
                }
            }
        }
        //    newarr;
        this.setXaxisData(newarr);
    }
    /**
     * @param {?} newarr
     * @return {?}
     */
    setXaxisData(newarr) {
        this.xarr = newarr;
        // this.xaxisdata.push({label: 125, value: 125});
        // chk if newarr elements are present in xaxisdata
        /** @type {?} */
        let ispresent = false;
        newarr.forEach((/**
         * @param {?} arrelement
         * @return {?}
         */
        arrelement => {
            this.xaxisdata.forEach((/**
             * @param {?} xaxiselement
             * @return {?}
             */
            xaxiselement => {
                if (arrelement == xaxiselement.label) {
                    ispresent = true;
                }
            }));
            if (!ispresent) {
                //create & push an obj in xaxisdata
                /** @type {?} */
                let obj = { label: arrelement, value: arrelement };
                this.xaxisdata.push(obj);
            }
            ispresent = false;
        }));
        //  
        // change arr to arr of objs
        /** @type {?} */
        let xdata = [];
        newarr.forEach((/**
         * @param {?} element
         * @return {?}
         */
        (element) => {
            /** @type {?} */
            let obj = { label: element, value: element };
            xdata.push(obj);
        }));
        this.xaxisdata;
        this.xaxisdata1 = xdata;
        //initialize xaxis data
    }
    /**
     * @param {?} n
     * @return {?}
     */
    findDigitCount(n) {
        /** @type {?} */
        let count = 0;
        if (n >= 1)
            ++count;
        while (n / 10 >= 1) {
            n /= 10;
            ++count;
        }
        return count;
    }
    /**
     * @param {?} width
     * @return {?}
     */
    setXinterval(width) {
        /** @type {?} */
        let interval = Math.round(this.xaxisdata.length / this.xinterval);
        /** @type {?} */
        let arr = [];
        /** @type {?} */
        let newarr = [];
        //    make Array out of this.xaxisdata
        this.xaxisdata.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (typeof (element.label) == 'number') {
                arr.push(element.label);
            }
        }));
        /** @type {?} */
        let min$$1 = Math.min.apply(null, arr);
        //find max
        /** @type {?} */
        let max$$1 = Math.max.apply(null, arr);
        /** @type {?} */
        let j = interval;
        /** @type {?} */
        let i;
        /** @type {?} */
        let ispresent = false;
        newarr[0] = min$$1;
        // assa
        for (i = 1; j < max$$1; i++) {
            j = interval * i;
            newarr[i] = j;
        }
        // newarr[i] = max;
        //inset numbers which are not present in xaxis domain but present in newarr
        newarr.forEach((/**
         * @param {?} arrelement
         * @return {?}
         */
        arrelement => {
            this.xaxisdata.forEach((/**
             * @param {?} xaxiselement
             * @return {?}
             */
            xaxiselement => {
                if (xaxiselement.label == arrelement) {
                    ispresent = true;
                }
            }));
            if (!ispresent) {
                /** @type {?} */
                let obj = { label: arrelement, value: arrelement };
                this.xaxisdata.push(obj);
            }
            ispresent = false;
        }));
        // this.sortarr(newarr);
        // newarr;
        // this.xaxisdata;
        this.xarr = newarr;
    }
    /**
     * @param {?} width
     * @return {?}
     */
    setDisplayfieldXinterval(width) {
        /** @type {?} */
        let interval = Math.round(this.xaxisdata.length / this.xinterval);
        /** @type {?} */
        let arr = [];
        /** @type {?} */
        let newarr = [];
        //    make Array out of this.xaxisdata
        this.xaxisdata.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            arr.push(element.label);
        }));
        /** @type {?} */
        let min$$1 = 0;
        /** @type {?} */
        let max$$1 = this.xaxisdata.length - 1;
        /** @type {?} */
        let j = interval;
        /** @type {?} */
        let i;
        newarr[0] = this.xaxisdata[min$$1].label;
        for (i = 1; j < max$$1; i++) {
            newarr[i] = this.xaxisdata[j].label;
            j = interval * i;
        }
        newarr.push(this.xaxisdata[max$$1].label);
        this.xarr = newarr;
    }
    // formatxaxisarr() {
    //     let formattedarr = [];
    //     let temp = '';
    //     if(this.xarr) {
    //     if (typeof (this.xarr[0]) == 'string') {
    //         // treat string
    //         this.xarr.forEach(element => {
    //             if (typeof (element) == 'string') {
    //                 temp = '';
    //                 temp = element[0] + element[1] + '..'
    //                 formattedarr.push(temp)
    //             }
    //         });
    //          this.xarr = formattedarr;
    //     }
    //     if (typeof (this.xarr[0]) == 'number') {
    //         // treat numerials
    //         // wrap numbers
    //     }
    //              }
    // }
    /**
     * @protected
     * @return {?}
     */
    initChart() {
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        //RESIZE STEP 2 START
        this.svg = select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight);
        this.svg.selectAll("*").remove();
        /** @type {?} */
        const margin = { top: 40, right: 20, bottom: 30, left: 40 };
        //RESIZE STEP 2 ENDS HERE
        /** @type {?} */
        const width = +this.svgwidth - margin.left - margin.right;
        // this.xaxisdata;
        if (this.xinterval) {
            if (!this.displayfield) {
                this.setXinterval(width);
            }
            if (this.displayfield) {
                this.setDisplayfieldXinterval(width);
            }
        }
        else {
            this.recalculatescale(width);
        }
        /** @type {?} */
        const height = +this.svgheight - margin.top - margin.bottom;
        /** @type {?} */
        const g = this.svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        const x = scalePoint()
            .rangeRound([0, width])
            .padding(0.1);
        /** @type {?} */
        const y = scaleLinear()
            .rangeRound([height, 0]);
        if (this.xaxisdata) {
            x.domain(this.xaxisdata.map((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (typeof (d.label) == 'string') {
                    return d.label;
                }
                else {
                    return parseInt(d.value);
                }
            })));
        }
        if (this.yaxisdata) {
            y.domain([0, max(this.yaxisdata, (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => { return d.value; }))]);
        }
        //add axis
        /** @type {?} */
        let xaxisbottom = axisBottom(x);
        if (this.xarr.length > 0) {
            // if(this.slant) {
            // this.formatxaxisarr();
            //  }
            xaxisbottom.tickValues(this.xarr);
        }
        if (this.deviceQueryService.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xaxisbottom
                // d3.axisBottom(x)
                // .tickValues(this.xarr)
                ).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                /** @type {?} */
                let bottomaxis = g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xaxisbottom);
                if (this.slant) {
                    // this.formatxaxisarr(); 
                    bottomaxis.selectAll("text")
                        .attr("cursor", "pointer")
                        .on("mouseover", (/**
                     * @param {?} d
                     * @return {?}
                     */
                    (d) => {
                        return tooltip.style("visibility", "visible");
                    }))
                        .on("mousemove", (/**
                     * @param {?} d
                     * @return {?}
                     */
                    (d) => {
                        return tooltip.html(this.callXaxisTooltip(d))
                            .style("top", (event$1.pageY - 10) + "px")
                            .style("left", (event$1.pageX + 10) + "px");
                    }))
                        .on("mouseout", (/**
                     * @param {?} d
                     * @return {?}
                     */
                    (d) => {
                        return tooltip.style("visibility", "hidden");
                    }))
                        .on("click", (/**
                     * @param {?} d
                     * @return {?}
                     */
                    (d) => {
                        return tooltip.style("visibility", "hidden");
                    }))
                        .attr("y", 0)
                        .attr("x", 9)
                        .attr("dy", ".35em")
                        .attr("transform", "rotate(90)")
                        .style("text-anchor", "start")
                        .style("font-size", 10);
                }
            }
        }
        else {
            g.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(xaxisbottom).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start")
                .style("font-size", 10);
        }
        g.append("g")
            .call(axisLeft(y).ticks(this.tickscount));
        // tickSize(0,10));
        /** @type {?} */
        let rawdata = this._data;
        // call function to alter legends if displayfield condn satisfy
        this.alterLegend();
        return {
            g, x, y, height, width, rawdata
        };
        // 
    }
    /**
     * @protected
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotScale(g, x, y, height, width) {
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(axisBottom(x).
                tickSize(-this.width).tickFormat(''));
        }
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y).ticks(this.tickscount)
                .tickSize(-width).tickFormat(''));
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    legendClick(node) {
        // const legendNode = JSON.parse(JSON.stringify(node));
        // delete legendNode.color;
        // legendNode.data.forEach(element => {
        //     delete element.legend;
        // });
        // const legendNode = JSON.parse(JSON.stringify(node));
        // delete legendNode.color;
        // legendNode.data.forEach(element => {
        //     delete element.legend;
        // });
        /** @type {?} */
        let obj = {};
        obj["label"] = node.label;
        /** @type {?} */
        let data = [];
        node.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let object = {};
            object[element.legend] = element.value;
            object[this.xaxisname] = element.label;
            //   object[element.label] = element.value;
            data.push(object);
        }));
        obj["data"] = data;
        this.onLegendClick.emit(obj);
        // this.onLegendClick.emit(legendNode);
    }
    /**
     * @return {?}
     */
    alterLegend() {
        this.linelegends = [];
        if (this.displayfield) {
            this.legends.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (element.label !== this.displayfield) {
                    this.linelegends.push(element);
                }
            }));
        }
        else {
            this.linelegends = this.legends;
        }
    }
    /**
     * @param {?} tooltipdata
     * @return {?}
     */
    callXaxisTooltip(tooltipdata) {
        /** @type {?} */
        var obj = {};
        obj['x-axis'] = tooltipdata;
        return this.toolTipForBar(obj);
    }
}
AmexioD3BaseLineComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    xinterval: [{ type: Input, args: ['data',] }, { type: Input, args: ['xaxis-interval',] }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    tickscount: [{ type: Input, args: ['yaxis-interval',] }],
    linecolor: [{ type: Input, args: ['color',] }],
    displayfield: [{ type: Input, args: ['display-field',] }],
    slant: [{ type: Input, args: ['rotate',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AmexioD3LineComponent extends AmexioD3BaseLineComponent {
    /**
     * @param {?} deviceQueryService
     * @param {?} cdf
     * @param {?} myservice
     */
    constructor(deviceQueryService, cdf, myservice) {
        super(deviceQueryService);
        this.deviceQueryService = deviceQueryService;
        this.cdf = cdf;
        this.myservice = myservice;
        this.labelcolor = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    resp = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                }), (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.data = this.getResponseData(resp);
                        this.plotD3Chart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(this.data);
                    this.plotD3Chart();
                }), 0);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.data) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.data = this.getResponseData(this.data);
                this.plotD3Chart();
            }), 0);
        }
    }
    /**
     * @return {?}
     */
    validateData() {
        if (this.data) ;
        else {
            return "lmask";
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                resp = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
            }), (/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(resp);
                    this.drawChart();
                }), 0);
            }));
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.plotD3Chart();
        }), 0);
    }
    //RESIZE STEP 5 STARTS
    /**
     * @return {?}
     */
    resize() {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            // this.resizewt = this.chartId.nativeElement.offsetWidth;
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotD3Chart();
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        const linechart = this.initChart();
        this.rawdata = linechart.rawdata;
        // this.svgwidth = linechart.width;
        this.plotScale(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width);
        this.plotLine(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width, [], tooltip, (1));
        if (this.multiseriesdata) {
            for (let index = 0; index < this.multiseriesdata.length; index++) {
                this.plotLine(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width, this.multiseriesdata[index], tooltip, (index + 1));
            }
        }
    }
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    validateresize() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.wt) ;
            else {
                this.resize();
            }
        }), 0);
    }
    //RESIZE STEP 4 ENDS
    /**
     * @private
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @param {?} data
     * @param {?} tooltip
     * @param {?} i
     * @return {?}
     */
    plotLine(g, x, y, height, width, data, tooltip, i) {
        /** @type {?} */
        const line$$1 = line()
            .x((/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return x(d.label); }))
            .y((/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return y(d.value); }));
        g.append("path")
            .datum(data)
            .attr("fill", "none")
            .attr("stroke", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            if (this.linecolor.length > 0) {
                if (this.linecolor[i - 1]) {
                    return this.linecolor[i - 1];
                }
                else {
                    return this.predefinedcolors[i - 1];
                }
            }
            else if (this.linecolor.length < 1) {
                return this.predefinedcolors[i - 1];
                //  return tempcolor;
            }
        }))
            .attr("stroke-width", 1.5)
            .attr("d", line$$1);
        g.selectAll('dot')
            .data(data)
            .enter()
            .append('circle')
            .attr("cx", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return x(d.label); }))
            .attr("cy", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return y(d.value); }))
            .attr('r', 2)
            .attr("fill", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            if (this.linecolor.length > 0) {
                if (this.linecolor[i - 1]) {
                    return this.linecolor[i - 1];
                }
                else {
                    return this.predefinedcolors[i - 1];
                }
            }
            else if (this.linecolor.length < 1) {
                //  return tempcolor;
                return this.predefinedcolors[i - 1];
            }
        }))
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.html(this.callTooltip(d))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            this.lineChartClick(d);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
        }));
        //lets plot labels here
        if (this.labelflag) {
            g.selectAll('label')
                .data(data)
                .enter()
                .append('text')
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                // if (this.labelcolor && this.labelcolor.length > 0) {
                //   return this.labelcolor;
                // } else {
                //   return "black";
                // }
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else if (this.linecolor.length > 0) {
                    if (this.linecolor[i - 1]) {
                        return this.linecolor[i - 1];
                    }
                    else {
                        return this.predefinedcolors[i - 1];
                    }
                }
                else if (this.linecolor.length < 1) {
                    //  return tempcolor;
                    return this.predefinedcolors[i - 1];
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @param {?} i
             * @return {?}
             */
            (d, i) => {
                return x(d.label);
            }))
                .attr("y", (/**
             * @param {?} d
             * @param {?} i
             * @return {?}
             */
            (d, i) => {
                return y(d.value) - 10;
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return d.value;
            }))
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.html(this.callTooltip(d))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.lineChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
        }
    }
    /**
     * @param {?} d
     * @return {?}
     */
    lineChartClick(d) {
        /** @type {?} */
        let obj = {};
        obj[d.legend] = d.value;
        obj[this.xaxisname] = d.label;
        this.chartClick(obj);
    }
    /**
     * @param {?} tooltipdata
     * @return {?}
     */
    callTooltip(tooltipdata) {
        /** @type {?} */
        let obj = {};
        obj[tooltipdata.legend] = tooltipdata.value;
        obj[this.xaxisname] = tooltipdata.label;
        return this.toolTipForBar(obj);
    }
}
AmexioD3LineComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-line',
                template: `<div  #chartId *ngIf="drillableFlag" #divid (window:resize)="validateresize()"> 
    <table [ngClass]="validateData()"  style="width: 100%;" > 
            <ng-container *ngIf = "title.length > 0">
            <tr><td style="font-size: 18px; font-weight: bold; "> {{title}} </td></tr>
            </ng-container>
            <tr>
                <td>
                    <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
                    </svg>            
                </td>
            </tr>
            <tr  *ngIf="legend">
                <td style="display: block; padding: 5px;">
                        <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="legendClick($event)" 
                                            [data]="linelegends" style="height:100%;">
                        </amexio-d3-legend>
                </td>
            
            </tr>
    </table>
    <!-- <div *ngIf="data.length < 1" class="lmask" style="padding-top:50%">
        </div> -->
    </div>
    
    <!-- {{legends | json}} -->`
            },] },
];
AmexioD3LineComponent.ctorParameters = () => [
    { type: DeviceQueryService },
    { type: ChangeDetectorRef },
    { type: CommanDataService }
];
AmexioD3LineComponent.propDecorators = {
    labelcolor: [{ type: Input, args: ['label-color',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    drillid: [{ type: ViewChild, args: ['drillid',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BarstackComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     * @param {?} device
     */
    constructor(myservice, cdf, device) {
        super('barstack');
        this.myservice = myservice;
        this.cdf = cdf;
        this.device = device;
        this.maxYValue = 0;
        this.data = [];
        this.barwidth = 0;
        this.title = "";
        this.legend = true;
        this.color = [];
        this.svgheight = 300;
        this.onLegendClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    this.httpresponse = response;
                    this.data = this.getResponseData(response);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                }), (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.transformData(this.data);
                        this.plotChart();
                    }), 0);
                }));
            }
            else if (this.data1) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.transformData(this.data1);
                    this.plotChart();
                }), 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                this.httpresponse = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
            }), (/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.drawChart();
                }), 0);
            }));
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.data = this.getResponseData(this.httpresponse);
            this.transformData(this.data);
            this.plotChart();
        }), 0);
    }
    /**
     * @param {?} data1
     * @return {?}
     */
    transformData(data1) {
        this.keyArray = [];
        this.legendArray = [];
        data1.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        (element, i) => {
            if (i == 0) {
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} index
                 * @return {?}
                 */
                (innerelement, index) => {
                    if (index > 0) {
                        this.legendArray[innerelement] = { 'data': [] };
                        this.keyArray.push(innerelement);
                    }
                    else if (index == 0) {
                        this.xaxis = innerelement;
                    }
                }));
            }
        }));
        /** @type {?} */
        let tempinnerarray;
        tempinnerarray = [];
        data1.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (index > 0) {
                /** @type {?} */
                let obj = {};
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} innerindex
                 * @return {?}
                 */
                (innerelement, innerindex) => {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        const key = this.keyArray[innerindex - 1];
                        obj[key] = element[innerindex];
                        /** @type {?} */
                        const legenddata = this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'value': element[innerindex], 'label': element[0] });
                        }
                    }
                }));
                tempinnerarray.push(obj);
            }
        }));
        this.data = [];
        tempinnerarray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            this.data.push(element);
        }));
        /** @type {?} */
        let maxY = 0;
        /** @type {?} */
        let yaxismaxArray = [];
        //find max for yaxis
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        (element) => {
            for (let [key, value] of Object.entries(element)) {
                this.keyArray.forEach((/**
                 * @param {?} key1
                 * @return {?}
                 */
                key1 => {
                    if (key == key1) {
                        maxY = maxY + value;
                    }
                })); //keyarray loop ends here
            } //for ends here
            yaxismaxArray.push(maxY);
            maxY = 0;
        })); // foreach ends
        // foreach ends
        /** @type {?} */
        let tempLarge = 0;
        /** @type {?} */
        let i;
        for (i = 0; i < yaxismaxArray.length; i++) {
            if (yaxismaxArray[i] > tempLarge) {
                this.maxYValue = yaxismaxArray[i];
            } //if ends
        } // for ends
        this.legends = [];
        this.keyArray.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            /** @type {?} */
            const legenddata = this.legendArray[element];
            if (this.color.length > 0) {
                /** @type {?} */
                let object = { 'label': element, 'color': this.color[index], 'data': legenddata.data };
                this.legends.push(object);
            }
            else {
                /** @type {?} */
                let object = { 'label': element, 'color': this.predefinedcolors[index], 'data': legenddata.data };
                this.legends.push(object);
            }
        }));
    }
    /**
     * @return {?}
     */
    plotChart() {
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        let margin = { top: 30, right: 30, bottom: 90, left: 60 };
        /** @type {?} */
        let colors = this.predefinedcolors;
        if (this.device.IsDesktop()) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        //this.svgwidth = this.chartId.nativeElement.offsetWidth;
        /** @type {?} */
        let data;
        data = this.data;
        /** @type {?} */
        let keysetarray = [];
        if (this.httpmethod && this.httpurl) {
            for (let [key, value] of Object.entries(this.data[0])) {
                keysetarray.push(key);
            }
            this.keyArray = keysetarray;
            this.keyArray.splice(0, 1);
        }
        /** @type {?} */
        let series = stack().keys(this.keyArray)
            .offset(stackOffsetDiverging)(this.data);
        /** @type {?} */
        let width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        let height
        //  = this.svgheight - margin.bottom - margin.top;
        ;
        //  = this.svgheight - margin.bottom - margin.top;
        this.svg = select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight);
        if (this.device.IsDesktop()) {
            this.offsetheight = this.chartId.nativeElement.offsetHeight;
            //  - margin.bottom -margin.top;
            height = this.offsetheight;
        }
        else {
            height = this.chartId.nativeElement.offsetHeight - 10;
        }
        /** @type {?} */
        let x = scaleBand()
            .domain(data.map((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return d[Object.keys(d)[0]];
        })))
            .rangeRound([margin.left, this.svgwidth - margin.right])
            .padding(0.35);
        /** @type {?} */
        let y = scaleLinear()
            .domain([min(this.stackMin(series)),
            this.maxYValue
            // d3.max(this.stackMax(series))
        ])
            .rangeRound([height - margin.bottom, margin.top]);
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + y(0) + ")")
                    .call(axisBottom(x)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + y(0) + ")")
                    .call(axisBottom(x));
            }
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + y(0) + ")")
                .call(axisBottom(x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        this.svg.append("g")
            .attr("transform", "translate(" + margin.left + ",0)")
            .call(axisLeft(y).ticks(this.tickscount));
        this.plotLine(this.svg, x, y, height, width, margin.left);
        /** @type {?} */
        let svgRect = this.svg.append("g")
            .selectAll("g")
            .data(series)
            .enter().append("g")
            .attr("fill", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        (d, index) => {
            if (this.color.length > 0) {
                if (this.color[index]) {
                    return this.color[index];
                }
                else {
                    return colors[index];
                }
            }
            else {
                return colors[index];
            }
        }))
            .selectAll("rect")
            .data((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return d;
        }));
        svgRect.enter().append("rect")
            .attr("width", x.bandwidth()).attr('id', (/**
         * @param {?} d
         * @param {?} i
         * @return {?}
         */
        (d, i) => {
            return d.data[i];
        }))
            .attr("x", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return x(+d.data[Object.keys(d.data)[0]]);
        }))
            .attr("y", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        (d, index) => {
            return y(d[1]);
        }))
            .attr("cursor", "pointer")
            .attr("height", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        (d, index) => {
            return y(d[0]) - y(d[1]);
        }))
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.html(this.setKey(d))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            this.setBarClickText(d);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
            // this.chartClick(d);
        }));
        // -------------------------
        if (this.labelflag) {
            svgRect.enter()
                .append("text")
                .style("font-weight", "bold")
                .style("font-size", "1vw")
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (this.labelcolor && this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return x(+d.data[Object.keys(d.data)[0]]) + x.bandwidth() / 2;
            }))
                .attr("y", (/**
             * @param {?} d
             * @param {?} index
             * @return {?}
             */
            (d, index) => {
                return y(d[1]) + 20;
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if ((d[Object.keys(d)[1]] - d[Object.keys(d)[0]]) > 0) {
                    return d[Object.keys(d)[1]] - d[Object.keys(d)[0]];
                }
            }))
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.html(this.setKey(d))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.setBarClickText(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
                // this.chartClick(d);
            }));
        }
    }
    /**
     * @param {?} serie
     * @return {?}
     */
    stackMin(serie) {
        return min(serie, (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return d[0]; }));
    }
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    validateresize() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.wt) ;
            else {
                this.resize();
            }
        }), 0);
    }
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    resize() {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotChart();
    }
    /**
     * @param {?} svg
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @param {?} m
     * @return {?}
     */
    plotLine(svg, x, y, height, width, m) {
        if (this.hScale) {
            svg.append('g')
                .attr("transform", "translate(" + m + ",0)")
                .attr("color", "lightgrey")
                .call(axisLeft(y).ticks(this.tickscount)
                .tickSize(-width).tickFormat(''));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    legendClick(event) {
        /** @type {?} */
        let obj = {};
        obj["label"] = event.label;
        /** @type {?} */
        let data = [];
        event.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let object = {};
            object[element.label] = element.value;
            data.push(object);
        }));
        obj["data"] = data;
        this.onLegendClick.emit(obj);
    }
    /**
     * @param {?} d
     * @return {?}
     */
    setKey(d) {
        /** @type {?} */
        let diff = d[0] - d[1];
        if (diff < 0) {
            diff = (diff * (-1));
        }
        for (let [key, value] of Object.entries(d.data)) {
            if (value == diff) {
                /** @type {?} */
                let object = {};
                object[key] = value;
                object[this.xaxis] = d.data[Object.keys(d.data)[0]];
                return (this.toolTipForBar(object));
            }
        }
    }
    /**
     * @param {?} d
     * @return {?}
     */
    setBarClickText(d) {
        /** @type {?} */
        let diff = d[0] - d[1];
        if (diff < 0) {
            diff = (diff * (-1));
        }
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(d.data)) {
            if (value == diff) {
                object[key] = value;
                object[this.xaxis] = d.data[Object.keys(d.data)[0]];
            }
        }
        this.chartClick(object);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
}
BarstackComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-barstack',
                template: `<div #chartId *ngIf="drillableFlag" (window:resize)="validateresize()">
    <table *ngIf="data1.length > 0" style="width: 100%;">
            <ng-container *ngIf = "title.length > 0">
        <tr>
            <td style="font-size: 18px; font-weight: bold; "> {{title}} </td>
        </tr>
            </ng-container>
        <tr>
            <td>
                <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
                </svg>
            </td>
        </tr>
        <tr *ngIf="legend">
            <td style="display: block; padding: 5px;">
                <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="legendClick($event)" [data]="legends"
                    style="height:100%;">
                </amexio-d3-legend>
            </td>

        </tr>
    </table>
    <div *ngIf="data1.length < 1" class="lmask" style="padding-top:50%">
    </div>
</div>`,
                styles: [``]
            },] },
];
BarstackComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef },
    { type: DeviceQueryService }
];
BarstackComponent.propDecorators = {
    data1: [{ type: Input, args: ['data',] }],
    barwidth: [{ type: Input }],
    title: [{ type: Input }],
    legend: [{ type: Input }],
    color: [{ type: Input }],
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    tickscount: [{ type: Input, args: ['yaxis-interval',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    drillid: [{ type: ViewChild, args: ['drillid',] }],
    onLegendClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GroupbarComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     * @param {?} device
     */
    constructor(myservice, cdf, device) {
        super('multibar');
        this.myservice = myservice;
        this.cdf = cdf;
        this.device = device;
        this.data = [];
        this.legend = true;
        this.barwidth = 0;
        this.onLegendClick = new EventEmitter();
        this.svgheight = 300;
        this.showzeroflag = true;
        this.groupbarchartArray = [];
        this.urllegendArray = [];
        this.defualtColors = [];
        this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            /** @type {?} */
            let res;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    res = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                }), (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.data = this.getResponseData(res);
                        this.initializeData();
                        this.plotD3Chart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(this.data);
                    this.initializeData();
                    this.plotD3Chart();
                }), 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                resp = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
            }), (/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(resp);
                    this.drawChart();
                }), 0);
            }));
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.initializeData();
            this.plotD3Chart();
        }), 0);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        this.convertToJSON();
        this.plotGroupBarChart();
        this.transformData(this.data);
    }
    /**
     * @private
     * @return {?}
     */
    plotGroupBarChart() {
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        this.defualtColors = this.predefinedcolors;
        // this.svgwidth = this.chartId.nativeElement.offsetWidth;
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        const margin = { top: 20, right: 20, bottom: 50, left: 40 };
        /** @type {?} */
        const width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        const height = this.svgheight - margin.top - margin.bottom;
        this.svg = select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        const x0 = scaleBand()
            .rangeRound([0, width])
            .padding(0.2);
        /** @type {?} */
        const x1 = scaleBand().padding(0.1);
        /** @type {?} */
        const y = scaleLinear()
            .rangeRound([height, 0]);
        //setting x and y domains
        this.years = this.groupbarchartArray.map((/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return d.labels; }));
        /** @type {?} */
        let label = this.groupbarchartArray[0].values.map((/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return d.label; }));
        x0.domain(this.years);
        x1.domain(label).rangeRound([0, x0.bandwidth()]);
        y.domain([0, max(this.groupbarchartArray, (/**
             * @param {?} labels
             * @return {?}
             */
            (labels) => { return max(labels.values, (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return d.value; })); }))]);
        //dynamic barwidth
        if (this.barwidth > 0) {
            this.barwidth = this.barwidth;
        }
        else {
            this.barwidth = x0.bandwidth;
        }
        // add x axis to svg
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x0)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x0));
            }
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(axisBottom(x0)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        //add y axis to svg
        this.svg.append("g")
            .call(axisLeft(y)
            .ticks(10).ticks(this.tickscount));
        this.plotLine(this.svg, y, height, width);
        // svg.select('.y').transition().duration(500).delay(1300).style('opacity', '1');
        //adding bars
        /** @type {?} */
        let slice = this.svg.selectAll(".slice")
            .data(this.groupbarchartArray)
            .enter().append("g")
            .attr("class", "g")
            .attr("transform", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            (d.values).forEach((/**
             * @param {?} element
             * @param {?} index
             * @return {?}
             */
            (element, index) => {
                //splice 0 
                if (element.value && (element.value < 1)) {
                    d.values.splice(0, index);
                }
            }));
            return "translate(" + x0(d.labels) + ",0)";
        }));
        slice.selectAll("rect")
            .data((/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return d.values; }))
            .enter().
            append("rect")
            .attr("width", x1.bandwidth)
            .attr("x", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return x1(d.label);
        }))
            .style("fill", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        (d, index) => {
            if (this.colors.length > 0) {
                if (this.colors[index]) {
                    return this.colors[index];
                }
                else {
                    return this.defualtColors[index];
                }
            }
            else {
                return this.defualtColors[index];
            }
        }))
            .attr("y", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return y(0); }))
            .attr("height", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return height - y(0); }))
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.html(this.setKey(d))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        })).on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            this.groupbarClick(d);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
        }));
        // -------------------------------------------------------
        if (this.labelflag) {
            slice.selectAll("text")
                .data((/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return d.values; }))
                .enter().append("text")
                .attr("width", x1.bandwidth)
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return x1(d.label) + x1.bandwidth() / 2;
            }))
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return y(d.value); }))
                .attr("height", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return height - y(0); }))
                .style("font-weight", "bold")
                .style("font-size", "1vw")
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (this.labelcolor && this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                // if((d.value > 0) ) {
                // return d.value;
                // }
                if (this.showzeroflag) {
                    return d.value;
                }
                else if (!this.showzeroflag) {
                    if (d.value > 0) {
                        return d.value;
                    }
                }
            }))
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.html(this.setKey(d)
                //  this.toolTipContent(d)
                )
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            })).on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.groupbarClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
                // this.chartClick(d);
            }));
        }
        slice.selectAll("rect")
            .attr("y", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return y(d.value);
        }))
            .attr("height", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return height - y(d.value); }));
    }
    /**
     * @param {?} d
     * @return {?}
     */
    groupbarClick(d) {
        /** @type {?} */
        let object = {};
        object[d.label] = d.value;
        object[this.xaxisData] = d.xaxis;
        this.chartClick(object);
    }
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    validateresize() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.wt) ;
            else {
                this.resize();
            }
        }), 0);
    }
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    resize() {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotGroupBarChart();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    legendClick(event) {
        /** @type {?} */
        let obj = {};
        obj["label"] = event.label;
        /** @type {?} */
        let data = [];
        event.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let object = {};
            object[element.label] = element.value;
            data.push(object);
        }));
        obj["data"] = data;
        this.onLegendClick.emit(obj);
    }
    //2d array to json conversion
    /**
     * @return {?}
     */
    convertToJSON() {
        /** @type {?} */
        let groupChartObj = { "labels": "", values: [] };
        /** @type {?} */
        let firstRowOfData = this.data[0];
        this.xaxisData = this.data[0][0];
        for (let i = 1; i < this.data.length; i++) {
            /** @type {?} */
            let multiSeriesArray = [];
            /** @type {?} */
            let valueOfJ;
            for (let j = 1; j < this.data[i].length; j++) {
                valueOfJ = this.data[i][0];
                /** @type {?} */
                let singleBarObj = {};
                singleBarObj["value"] = this.data[i][j];
                singleBarObj["label"] = firstRowOfData[j];
                singleBarObj["xaxis"] = this.data[i][0];
                multiSeriesArray.push(singleBarObj);
            }
            if (multiSeriesArray.length) {
                groupChartObj["values"] = multiSeriesArray;
                /** @type {?} */
                let newLabelsValues = valueOfJ;
                /** @type {?} */
                let newGroupDataObj = Object.assign({}, groupChartObj);
                newGroupDataObj['labels'] = newLabelsValues + '';
                this.groupbarchartArray.push(newGroupDataObj);
            }
        }
    }
    /**
     * @return {?}
     */
    transformto2dArray() {
        /** @type {?} */
        let result = [];
        result.push("years");
        this.data.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        (element, i) => {
            if (i == 0) {
                element.values.forEach((/**
                 * @param {?} element2
                 * @return {?}
                 */
                element2 => {
                    result.push(element2.label);
                }));
            }
        }));
        this.urllegendArray.push(result);
        /** @type {?} */
        let temparray = [];
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            temparray = [];
            /** @type {?} */
            let values;
            /** @type {?} */
            let year = element.labels;
            temparray.push(year);
            element.values.forEach((/**
             * @param {?} element2
             * @return {?}
             */
            element2 => {
                values = element2.value;
                temparray.push(values);
            }));
            this.urllegendArray.push(temparray);
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.keyArray = [];
        this.legendArray = [];
        data.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        (element, i) => {
            if (i == 0) {
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} index
                 * @return {?}
                 */
                (innerelement, index) => {
                    if (index > 0) {
                        this.legendArray[innerelement] = { 'data': [] };
                        this.keyArray.push(innerelement);
                    }
                }));
            }
        }));
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (index > 0) {
                /** @type {?} */
                let obj = {};
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} innerindex
                 * @return {?}
                 */
                (innerelement, innerindex) => {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        const key = this.keyArray[innerindex - 1];
                        obj[key] = element[innerindex];
                        /** @type {?} */
                        const legenddata = this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'value': element[innerindex], 'label': element[0] });
                        }
                    }
                }));
            }
        }));
        this.legends = [];
        this.keyArray.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            /** @type {?} */
            const legenddata = this.legendArray[element];
            /** @type {?} */
            let object;
            if (this.colors.length > 0) {
                object = { 'label': element, 'color': this.colors[index], 'data': legenddata.data };
            }
            else {
                object = { 'label': element, 'color': this.predefinedcolors[index], 'data': legenddata.data };
            }
            this.legends.push(object);
        }));
    }
    /**
     * @param {?} d
     * @return {?}
     */
    setKey(d) {
        /** @type {?} */
        let object = {};
        object[d.label] = d.value;
        object[this.xaxisData] = d.xaxis;
        return (this.toolTipForBar(object));
    }
    /**
     * @param {?} g
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    }
}
GroupbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-multiseries',
                template: `<div  #chartId *ngIf="drillableFlag" (window:resize)="validateresize()"> 
<table *ngIf="data.length > 0"  style="width: 100%;">
    <tr *ngIf = "title.length > 0" >
        <td colspan="2" style="font-size: 18px; font-weight: bold; "> {{title}} </td>
    </tr>
    <tr>
        <td>
            <svg [attr.height]="height" [attr.width]="width" [attr.id]="componentId">
            </svg>
        </td>
    </tr>
    <tr *ngIf="legend">
        <td style="display: block; padding: 5px;">
            <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="legendClick($event)" [data]="legends" style="height:100%;"></amexio-d3-legend>
        </td>
    </tr>
</table>
<div *ngIf="data.length < 1" class="lmask" style="padding-top:50%">
    </div>
</div>


`,
                styles: [``]
            },] },
];
GroupbarComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef },
    { type: DeviceQueryService }
];
GroupbarComponent.propDecorators = {
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    drillid: [{ type: ViewChild, args: ['drillid',] }],
    data: [{ type: Input, args: ['data',] }],
    legend: [{ type: Input }],
    barwidth: [{ type: Input }],
    onLegendClick: [{ type: Output }],
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    tickscount: [{ type: Input, args: ['yaxis-interval',] }],
    showzeroflag: [{ type: Input, args: ['show-zero-values',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CombochartComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     * @param {?} device
     */
    constructor(myservice, cdf, device) {
        super('combochart');
        this.myservice = myservice;
        this.cdf = cdf;
        this.device = device;
        this.svgheight = 300;
        this.lineColor = "black";
        this.label = false;
        this.horizontal = false;
        this.barwidth = 0;
        //   @Input('line-data-index') lineInput: any;
        this.lineInput = [];
        this.barInput = [];
        this.showzeroflag = true;
        this.simpleComboFlag = false;
        this.completeconverteddata = [];
        this.simpleCombodata = [];
        this.groupbarchartArray = [];
        this.highercolorindex = 0;
        this.colorflag = false;
        this.keyArray = [];
        this.transformeddata = [];
        this.legendArray = [];
        this.legends = [];
        this.LineArray = [];
        this.outputData = [];
        this.higherdot1colorindex = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    resp = response;
                    this.httpresponse = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                }), (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.data = this.getResponseData(resp);
                        this.transformData();
                        this.initializeData();
                        this.plotD3Chart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(this.data);
                    this.transformData();
                    this.initializeData();
                    this.plotD3Chart();
                }), 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                this.httpresponse = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
            }), (/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    // this.data = this.getResponseData(resp);
                    this.drawChart();
                }), 0);
            }));
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.data = this.getResponseData(this.httpresponse);
            this.transformData();
            this.initializeData();
            this.plotD3Chart();
        }), 0);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    transformData() {
        this.formDatastructure();
        this.tranasforsimplejson();
    }
    /**
     * @return {?}
     */
    formDatastructure() {
        // for line
        //call createjson() for complete data for line
        this.lineflag = true;
        this.createjson(this.data);
        //validate scenarios
        //validate scenario1: bar + line + data
        if ((this.barInput.length > 0) && (this.lineInput.length > 0) &&
            (this.data[0].length > 2)) {
            this.sc1 = true;
            this.createData1(this.barInput, this.data);
        }
        else if ((this.lineInput.length > 0) &&
            //##get it checked
            (this.data[0].length > 1)) {
            this.sc2 = true;
            //if so set sc2barflag
            this.data[0].forEach((/**
             * @param {?} column
             * @return {?}
             */
            column => {
                this.lineInput.forEach((/**
                 * @param {?} linename
                 * @return {?}
                 */
                linename => {
                    if (column !== linename) {
                        this.sc2barflag = true;
                        // u can plot bar now
                    }
                }));
            }));
            this.createData1(null, this.data);
            //chk if sc2barflag is set or reset
            if (this.sc2barflag == true) ;
        } //else if of sc2 ends
        else if ((this.barInput.length > 0) && (this.data[0].length > 1)) {
            this.sc3 = true;
            this.createData1(this.barInput, this.data);
        }
        else if ((this.barInput.length < 1) && (this.lineInput.length < 1) && this.data[0].length > 1) {
            this.sc4 = true;
            this.createData1(null, this.data);
        }
    }
    /**
     * @param {?} inpdata
     * @param {?} fulldata
     * @return {?}
     */
    createData1(inpdata, fulldata) {
        /** @type {?} */
        let linearr = [];
        this.lineInput.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            linearr.push(element.column);
        }));
        this.firstrow = this.data[0];
        /** @type {?} */
        let dummyArray = [];
        dummyArray.push(0);
        fulldata.forEach((/**
         * @param {?} record
         * @param {?} index
         * @return {?}
         */
        (record, index) => {
            if (index === 0) {
                // THIS LOGIC IS USED FOR FINDING INDEXS AND ADD INTO dummyArray ARRAY
                record.forEach((/**
                 * @param {?} innerObject
                 * @param {?} innerIndex
                 * @return {?}
                 */
                (innerObject, innerIndex) => {
                    //validates scenario1 and 3
                    if (this.sc1 == true || this.sc3 == true) {
                        this.barInput.forEach((/**
                         * @param {?} elementOfInputData
                         * @return {?}
                         */
                        (elementOfInputData) => {
                            //aja
                            if (innerObject === elementOfInputData.column) {
                                //dummyarray has index stack
                                dummyArray.push(innerIndex);
                            }
                        }));
                    } //sc1 and sc3 validation done
                    //validates scenario 2
                    if (this.sc2 == true) {
                        if (this.sc2barflag == true) {
                            this.lineInput.forEach((/**
                             * @param {?} elementOfLineData
                             * @return {?}
                             */
                            (elementOfLineData) => {
                                if ((innerObject !== elementOfLineData.column) && (innerIndex !== 0)) {
                                    if (linearr.includes(innerObject) == false) {
                                        if (dummyArray.includes(innerIndex)) ;
                                        else {
                                            dummyArray.push(innerIndex);
                                            return;
                                        }
                                    } // }
                                    //   }
                                    // });
                                }
                            }));
                        }
                    }
                }));
                //validates scenario 4
                if (this.sc4 == true) {
                    // chk if barflag is set
                    /** @type {?} */
                    let columns = this.data[0].length;
                    if (columns > 1) {
                        dummyArray.push(1);
                    }
                }
                // dummyArray.push(0);
                /** @type {?} */
                let firstArray = [];
                // FOR FIRST RECORD
                dummyArray.forEach((/**
                 * @param {?} object
                 * @param {?} dummyIndex
                 * @return {?}
                 */
                (object, dummyIndex) => {
                    firstArray.push(record[object]);
                }));
                this.outputData.push(firstArray);
            }
            else {
                /** @type {?} */
                let newData = [];
                record.forEach((/**
                 * @param {?} innerObject
                 * @param {?} innerIndex
                 * @return {?}
                 */
                (innerObject, innerIndex) => {
                    dummyArray.forEach((/**
                     * @param {?} object
                     * @param {?} dummyIndex
                     * @return {?}
                     */
                    (object, dummyIndex) => {
                        if (innerIndex === object) {
                            newData.push(innerObject);
                        }
                    }));
                }));
                this.outputData.push(newData);
            }
        }));
        this.createjson(this.outputData);
        // this.formLegendData(this.outputData);
    }
    /**
     * @param {?} arraydata
     * @return {?}
     */
    createjson(arraydata) {
        /** @type {?} */
        let groupChartObj = { "labels": "", values: [] };
        this.groupbarchartArray = [];
        /** @type {?} */
        let firstRowOfData = arraydata[0];
        this.xaxisData = this.data[0][0];
        for (let i = 1; i < arraydata.length; i++) {
            /** @type {?} */
            let multiSeriesArray = [];
            /** @type {?} */
            let valueOfJ;
            for (let j = 1; j < arraydata[i].length; j++) {
                valueOfJ = arraydata[i][0];
                /** @type {?} */
                let singleBarObj = {};
                singleBarObj["value"] = arraydata[i][j];
                singleBarObj["label"] = firstRowOfData[j];
                singleBarObj["xaxis"] = arraydata[i][0];
                multiSeriesArray.push(singleBarObj);
            }
            if (multiSeriesArray.length) {
                groupChartObj["values"] = multiSeriesArray;
                /** @type {?} */
                let newLabelsValues = valueOfJ;
                /** @type {?} */
                let newGroupDataObj = Object.assign({}, groupChartObj);
                newGroupDataObj['labels'] = newLabelsValues + '';
                this.groupbarchartArray.push(newGroupDataObj);
            }
        }
        if (this.lineflag) {
            this.groupbarchartArray;
            this.LineArray = this.groupbarchartArray;
        }
        else {
            this.groupbarchartArray = [];
            /** @type {?} */
            let firstRowOfData = arraydata[0];
            // this.xaxisData = this.data[0][0];
            for (let i = 1; i < arraydata.length; i++) {
                /** @type {?} */
                let multiSeriesArray = [];
                /** @type {?} */
                let valueOfJ;
                for (let j = 1; j < arraydata[i].length; j++) {
                    valueOfJ = arraydata[i][0];
                    /** @type {?} */
                    let singleBarObj = {};
                    singleBarObj["value"] = arraydata[i][j];
                    singleBarObj["label"] = firstRowOfData[j];
                    singleBarObj["xaxis"] = arraydata[i][0];
                    multiSeriesArray.push(singleBarObj);
                }
                if (multiSeriesArray.length) {
                    groupChartObj["values"] = multiSeriesArray;
                    /** @type {?} */
                    let newLabelsValues = valueOfJ;
                    /** @type {?} */
                    let newGroupDataObj = Object.assign({}, groupChartObj);
                    newGroupDataObj['labels'] = newLabelsValues + '';
                    this.groupbarchartArray.push(newGroupDataObj);
                }
            }
            this.groupbarchartArray;
        }
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        //plot multiseries chart
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        let colors = this.predefinedcolors;
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        const margin = { top: 20, right: 20, bottom: 50, left: 40 };
        /** @type {?} */
        const width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        const height = this.svgheight - margin.top - margin.bottom;
        this.svg = select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        const x0 = scaleBand()
            .rangeRound([0, width])
            .padding(0.2);
        /** @type {?} */
        const x1 = scaleBand().padding(0.1);
        /** @type {?} */
        const y = scaleLinear()
            .rangeRound([height, 0]);
        //setting x and y domains
        this.years = this.groupbarchartArray.map((/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return d.labels; }));
        /** @type {?} */
        let label = this.groupbarchartArray[0].values.map((/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return d.label; }));
        x0.domain(this.years);
        x1.domain(label).rangeRound([0, x0.bandwidth()]);
        y.domain([0, max(this.groupbarchartArray, (/**
             * @param {?} labels
             * @return {?}
             */
            (labels) => { return max(labels.values, (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return d.value; })); }))]);
        //dynamic barwidth
        if (this.barwidth > 0) {
            this.barwidth = this.barwidth;
        }
        else {
            this.barwidth = x0.bandwidth;
        }
        // add x axis to svg
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x0)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x0));
            }
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(axisBottom(x0)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        //add y axis to svg
        this.svg.append("g")
            .call(axisLeft(y)
            .ticks(this.tickscount));
        this.plotLineForMultiSeries(this.svg, y, height, width);
        //adding bars
        /** @type {?} */
        let slice = this.svg.selectAll(".slice")
            .data(this.groupbarchartArray)
            .enter().append("g")
            .attr("class", "g")
            .attr("transform", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return "translate(" + x0(d.labels) + ",0)"; }));
        slice.selectAll("rect")
            .data((/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return d.values; }))
            .enter().append("rect")
            .attr("width", x1.bandwidth)
            .attr("x", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return x1(d.label);
        }))
            .style("fill", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        (d, index) => {
            this.higherdot1colorindex = index;
            this.legendcolorindex = index;
            return colors[index];
        }))
            .attr("y", (/**
         * @param {?} d
         * @param {?} ind
         * @return {?}
         */
        (d, ind) => { return y(d.value); }))
            .attr("height", (/**
         * @param {?} d
         * @param {?} ind
         * @return {?}
         */
        (d, ind) => {
            return height - y(d.value);
        }))
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.html(this.setKey(d))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        })).on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            this.groupbarClick(d);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
        }));
        // -------------------------------------------------------
        //bar label
        // if (this.labelflag) {
        slice.selectAll("text")
            .data((/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return d.values; }))
            .enter().append("text")
            .attr("opacity", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            /** @type {?} */
            let visibility = false;
            if (this.barInput.length > 0) {
                this.barInput.forEach((/**
                 * @param {?} barname
                 * @return {?}
                 */
                (barname) => {
                    if ((barname.column == d.label) && (barname.label == true)) {
                        visibility = true;
                        return;
                    }
                }));
                if (visibility) {
                    return 1;
                }
                else {
                    return 0;
                }
            } // outer if 
            else if ((this.sc4 == true) && (this.label == true)) {
                return 1;
            }
            else {
                return 0;
            }
        }))
            .attr("width", x1.bandwidth)
            .attr("x", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return x1(d.label) + x1.bandwidth() / 2;
        }))
            .attr("y", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return y(d.value); }))
            .attr("height", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return height - y(0); }))
            .style("font-weight", "bold")
            .style("font-size", "1vw")
            .attr("text-anchor", "middle")
            .attr("fill", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            if (this.labelcolor.length > 0) {
                return this.labelcolor;
            }
            else {
                return "black";
            }
        })) //bar label
            .text((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            if (this.showzeroflag) {
                return d.value;
            }
            else if (!this.showzeroflag) {
                if (d.value > 0) {
                    return d.value;
                }
            }
            // return d.value;
        }))
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.html(this.setKey(d))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        })).on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            this.groupbarClick(d);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
        }));
        // }
        slice.selectAll("rect")
            .attr("y", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return y(d.value);
        }))
            .attr("height", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return height - y(d.value); }));
        // ------------------------------------------------------------------
        //sigle / multi line code starts here
        //code here fr multi line
        /** @type {?} */
        let i;
        // let lineName;
        /** @type {?} */
        let slice1 = this.svg.selectAll(".slice")
            .data(this.transformeddata)
            .enter().append("g")
            .attr("class", "g");
        this.higherdot1colorindex++;
        this.lineInput.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (element.color) ;
            else {
                element["color"] = colors[this.higherdot1colorindex];
                this.higherdot1colorindex++;
            }
        }));
        //line validation for scenario 1 and 2
        if (this.lineInput.length > 0) {
            for (i = 0; i < this.lineInput.length; i++) {
                /** @type {?} */
                let lineName = this.lineInput[i];
                /** @type {?} */
                let valueline = line()
                    .x((/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return x0(d[Object.keys(d)[0]]);
                }))
                    .y((/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => { return y(d[lineName.column]); }));
                /** @type {?} */
                let shift = margin.left + x1.bandwidth() / 2;
                slice1.append("path")
                    .data([this.transformeddata])
                    .attr("fill", "none")
                    .style("stroke", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    if (lineName.color) {
                        return lineName.color;
                    }
                }))
                    .attr("stroke-width", 1.5)
                    .attr("transform", "translate( " + x1.bandwidth() / 2 + ", 0 )")
                    .attr("d", valueline);
                // points1
                /** @type {?} */
                let dotslice = slice1.selectAll("dot")
                    .data(this.transformeddata)
                    .enter()
                    .append("circle")
                    .attr("class", "point1")
                    .attr("cursor", "pointer")
                    .style("fill", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    if (lineName.color) {
                        return lineName.color;
                    }
                }))
                    .attr("cx", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return x0(d[Object.keys(d)[0]]);
                }))
                    .attr("cy", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return y(d[lineName.column]);
                }))
                    .attr("r", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => { return 5; }))
                    .attr("transform", "translate( " + x1.bandwidth() / 2 + ", 0 )")
                    .on("mouseover", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.style("visibility", "visible");
                }))
                    .on("mousemove", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.html(this.formTooltipLineData(d, lineName, false))
                        .style("top", (event$1.pageY - 10) + "px")
                        .style("left", (event$1.pageX + 10) + "px");
                }))
                    .on("mouseout", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.style("visibility", "hidden");
                }))
                    .on("click", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    this.onComboLineClick(d, lineName, false);
                    this.fordrillableClick(this, d, event);
                    return tooltip.style("visibility", "hidden");
                }));
                // }
                // 
            } // line code ends
        } //lineinput if condition ends here
        else if ((this.sc4 == true) && (this.data[0].length > 2)) {
            //  lineName = this.lineInput[i];
            /** @type {?} */
            let valueline = line()
                .x((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return x0(d[Object.keys(d)[0]]);
                //  return x1(d[Object.keys(d)[0]]);
            }))
                .y((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return y(d[Object.keys(d)[2]]
                // d[lineName]
                );
            }));
            /** @type {?} */
            let shift = margin.left + x1.bandwidth() / 2;
            slice1.append("path")
                .data([this.transformeddata])
                .attr("fill", "none")
                .style("stroke", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (this.lineColor !== "black") {
                    return this.lineColor;
                }
                else {
                    return colors[2];
                }
            }))
                .attr("stroke-width", 1.5)
                .attr("transform", "translate( " + x1.bandwidth() / 2 + ", 0 )")
                .attr("d", valueline);
            // points1
            slice1.selectAll("dot")
                .data(this.transformeddata).enter().append("circle")
                .attr("class", "point1")
                .attr("cursor", "pointer")
                .style("stroke", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (this.lineColor !== "black") {
                    return this.lineColor;
                }
                else {
                    return colors[2];
                }
            }))
                .style("fill", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (this.lineColor !== "black") {
                    return this.lineColor;
                }
                else {
                    return colors[2];
                }
            }))
                .attr("cx", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return x0(d[Object.keys(d)[0]]);
            }))
                .attr("cy", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return y(d[Object.keys(d)[2]]
                // d[lineName]
                );
            }))
                .attr("r", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return 5; }))
                .attr("transform", "translate( " + x1.bandwidth() / 2 + ", 0 )")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.html(this.formTooltipLineData(d, null, true))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.onComboLineClick(d, null, true);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
        }
        //line label validation for scenario 1 and 2
        if (this.lineInput.length > 0) {
            for (i = 0; i < this.lineInput.length; i++) {
                /** @type {?} */
                let lineName1 = this.lineInput[i];
                if (lineName1.label) {
                    if (lineName1.label == true) {
                        slice1.selectAll("labels")
                            .data(this.transformeddata)
                            .enter().append("text")
                            .style("font-weight", "bold")
                            .attr("text-anchor", "middle")
                            .attr("fill", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        (d) => {
                            if (lineName1.labelcolor) {
                                return lineName1.labelcolor;
                            }
                            else {
                                return "black";
                            }
                        }))
                            .attr("x", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        (d) => {
                            return x0(d[Object.keys(d)[0]]);
                        }))
                            .attr("y", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        (d) => {
                            return y(d[lineName1.column]);
                        }))
                            .text((/**
                         * @param {?} d
                         * @return {?}
                         */
                        (d) => {
                            return d[lineName1.column];
                            // d[lineName];
                        }))
                            .attr("transform", "translate( " +
                            // margin.left
                            x1.bandwidth() / 2
                            // shift
                            + ", 19 )")
                            .attr("cursor", "pointer")
                            .on("mouseover", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        (d) => {
                            return tooltip.style("visibility", "visible");
                        }))
                            .on("mousemove", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        (d) => {
                            return tooltip.html(this.formTooltipLineData(d, lineName1, false))
                                .style("top", (event$1.pageY - 10) + "px")
                                .style("left", (event$1.pageX + 10) + "px");
                        }))
                            .on("mouseout", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        (d) => {
                            return tooltip.style("visibility", "hidden");
                        }))
                            .on("click", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        (d) => {
                            this.onComboLineClick(d, lineName1, false);
                            this.fordrillableClick(this, d, event);
                            return tooltip.style("visibility", "hidden");
                        }));
                    }
                }
            }
        }
        else if ((this.sc4 == true) && (this.data[0].length > 2) && (this.label == true)) {
            //trial line label for 4th scenario
            slice1.selectAll("labels")
                .data(this.transformeddata)
                .enter().append("text")
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return x0(d[Object.keys(d)[0]]);
            }))
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return y(d[Object.keys(d)[2]]
                // d[lineName]
                );
                //  + 50;
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return d[Object.keys(d)[2]];
                // d[lineName];
            }))
                .attr("transform", "translate( " +
                // margin.left
                x1.bandwidth() / 2
                // shift
                + ", 19 )")
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.html(this.formTooltipLineData(d, null, true))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.onComboLineClick(d, null, true);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
        }
        this.formLegendData(this.outputData);
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    }
    /**
     * @param {?} d
     * @return {?}
     */
    setKey(d) {
        /** @type {?} */
        let object = {};
        object[d.label] = d.value;
        object[this.xaxisData] = d.xaxis;
        return (this.toolTipForBar(object));
    }
    /**
     * @return {?}
     */
    finMaxLineValue() {
        /** @type {?} */
        let lineValues = [];
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        (element) => {
            for (let [key, value] of Object.entries(element)) {
                this.lineInput.forEach((/**
                 * @param {?} line
                 * @return {?}
                 */
                (line$$1) => {
                    if (line$$1 == key) {
                        lineValues.push(value);
                    }
                }));
            }
        }));
        /** @type {?} */
        let max$$1 = 0;
        /** @type {?} */
        let j;
        for (j = 0; j < lineValues.length; j++) {
            if (lineValues[j] > max$$1) {
                max$$1 = lineValues[j];
            }
        }
        this.lineRange = max$$1;
    }
    /**
     * @param {?} d
     * @return {?}
     */
    groupbarClick(d) {
        /** @type {?} */
        let object = {};
        object[d.label] = d.value;
        object[this.xaxisData] = d.xaxis;
        this.chartClick(object);
    }
    /**
     * @param {?} g
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLineForMultiSeries(g, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    }
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    validateresize() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.wt) ;
            else {
                this.resize();
            }
        }), 0);
    }
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    resize() {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotD3Chart();
    }
    /**
     * @return {?}
     */
    tranasforsimplejson() {
        this.transformeddata = [];
        this.keyArray = this.data[0];
        this.data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((/**
                 * @param {?} individualvalue
                 * @param {?} keyindex
                 * @return {?}
                 */
                (individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                })); //inner for loop ends
                this.transformeddata.push(DummyObject);
            } //if ends
        })); //outer for loop ends
    }
    /**
     * @param {?} data
     * @param {?} line
     * @param {?} flag
     * @return {?}
     */
    formTooltipLineData(data, line$$1, flag) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(data)) {
            //flag is considered true for forth scenario
            if (flag == true) {
                if (key == this.data[0][2]) {
                    object[key] = value;
                }
            } // if foe true flag ends here
            else {
                if (key == line$$1.column) {
                    object[key] = value;
                }
            } //else for false flag ends here
        }
        return this.toolTipForBar(object);
    }
    /**
     * @param {?} data
     * @param {?} line
     * @param {?} flag
     * @return {?}
     */
    onComboLineClick(data, line$$1, flag) {
        // flag is considered true for 4th scenario
        /** @type {?} */
        let object = {};
        /** @type {?} */
        let i = 0;
        for (let [key, value] of Object.entries(data)) {
            if (i == 0 || i == 1) {
                if (key != "color") {
                    object[key] = value;
                }
            }
            if (flag == true) {
                if (key == this.data[0][2]) {
                    object[key] = value;
                }
            }
            else {
                if (key == line$$1.column) {
                    object[key] = value;
                }
            }
            i++;
        }
        //this calls base class function
        this.comboLineClick(object);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    formLegendData(data) {
        this.keyArray = [];
        this.legendArray = [];
        data.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        (element, i) => {
            if (i == 0) {
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} index
                 * @return {?}
                 */
                (innerelement, index) => {
                    if (index > 0) {
                        this.legendArray[innerelement] = { 'data': [] };
                        this.keyArray.push(innerelement);
                    }
                }));
            }
        }));
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (index > 0) {
                /** @type {?} */
                let obj = {};
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} innerindex
                 * @return {?}
                 */
                (innerelement, innerindex) => {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        const key = this.keyArray[innerindex - 1];
                        obj[key] = element[innerindex];
                        /** @type {?} */
                        const legenddata = this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'label': element[0], 'value': element[innerindex] });
                        }
                    }
                }));
            }
        }));
        this.legends = [];
        this.keyArray.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            /** @type {?} */
            const legenddata = this.legendArray[element];
            /** @type {?} */
            let object = { 'label': element, 'color': this.predefinedcolors[index], 'data': legenddata.data };
            this.legends.push(object);
        }));
        //this logic will wrk fr sc1 and sc2
        if (this.lineInput.length > 0) {
            /** @type {?} */
            let inc = 1;
            this.lineInput.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                /** @type {?} */
                let object = {};
                object["label"] = element.column;
                if (element.color) {
                    object["color"] = element.color;
                }
                else {
                    object["color"] = this.predefinedcolors[this.legendcolorindex + inc];
                    inc++;
                }
                object["data"] = [];
                this.legends.push(object);
            }));
            this.legends;
            this.transformeddata;
            this.legends.forEach((/**
             * @param {?} legendelement
             * @return {?}
             */
            legendelement => {
                this.lineInput.forEach((/**
                 * @param {?} lineelement
                 * @return {?}
                 */
                lineelement => {
                    if (lineelement.column == legendelement.label) {
                        this.transformeddata.forEach((/**
                         * @param {?} singlerow
                         * @return {?}
                         */
                        singlerow => {
                            /** @type {?} */
                            let obj = {};
                            // d[Object.keys(d)[0]]
                            obj["label"] = singlerow[Object.keys(singlerow)[0]];
                            obj["value"] = singlerow[legendelement.label];
                            legendelement.data.push(obj);
                        }));
                    }
                }));
            }));
        }
        //this logic works for sc4
        // chk if line column exist in data1
        if ((this.sc4 == true) && (this.data[0].length > 2)) {
            /** @type {?} */
            let object = [];
            object["label"] = this.data[0][2];
            object["color"] = this.predefinedcolors[2];
            object["data"] = [];
            this.legends.push(object);
            //logic to push data
            this.data.forEach((/**
             * @param {?} element
             * @param {?} index
             * @return {?}
             */
            (element, index) => {
                if (index > 0) {
                    /** @type {?} */
                    let object = [];
                    object["label"] = element[0];
                    object["value"] = element[2];
                    this.legends[1].data.push(object);
                }
            }));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    legendClick(event) {
        /** @type {?} */
        let obj = {};
        obj["label"] = event.label;
        /** @type {?} */
        let data = [];
        event.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let object = {};
            object[element.label] = element.value;
            data.push(object);
        }));
        obj["data"] = data;
        this.onLegendClick.emit(obj);
    }
}
CombochartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-combochart',
                template: ` 
<div #chartId *ngIf="drillableFlag" (window:resize)="validateresize()">
    <table *ngIf="data.length > 0" style="width: 100%;">
      <tr *ngIf = "title.length > 0">
          <td style="font-size: 18px; font-weight: bold; "> {{title}} </td>
      </tr>
      <tr>
          <td>
              <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
              </svg>
          </td>
      </tr>
      <tr *ngIf="legend">
          <td style="display: block; padding: 5px;">
              <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="legendClick($event)" [data]="legends" style="height:100%;">
              </amexio-d3-legend> 
          </td>
      </tr>
    </table>
    <div *ngIf="data.length < 1" class="lmask" style="padding-top:50%">
    </div>
    </div>`,
                styles: [``]
            },] },
];
CombochartComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef },
    { type: DeviceQueryService }
];
CombochartComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    lineColor: [{ type: Input, args: ['line-color',] }],
    label: [{ type: Input }],
    horizontal: [{ type: Input }],
    barwidth: [{ type: Input }],
    lineInput: [{ type: Input, args: ['line-data-index',] }],
    barInput: [{ type: Input, args: ['bar-data-index',] }],
    tickscount: [{ type: Input, args: ['yaxis-interval',] }],
    showzeroflag: [{ type: Input, args: ['show-zero-values',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class HistogramComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     * @param {?} device
     */
    constructor(myservice, cdf, device) {
        super('histogram');
        this.myservice = myservice;
        this.cdf = cdf;
        this.device = device;
        this.svgheight = 400;
        this.color = "blue";
        this.datahisto = [];
        this.values = [];
        this.array = [];
        this.xaxisArray = [];
        this.yaxisArray = [];
        this.yaxisData = [];
        this.histogramarray = [];
        this.histogramdata = [];
        this.lengtharray = [];
        this.arrayofLength = [];
        this.chartData = [];
        this.finaldataarray = [];
        this.tooltipArray = [];
        this.index = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.wt = this.svgwidth;
        /** @type {?} */
        let res;
        if (this.level <= 1) {
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    res = response;
                    this.httpresponse = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                }), (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.datahisto = [];
                        this.datahisto = this.getResponseData(res);
                        this.transformData();
                        this.plotXaxis();
                        this.plotYaxis();
                        this.tooltipData();
                        this.dataforChart();
                        this.transformData1(this.finaldataarray);
                        this.plotChart();
                    }), 0);
                }));
            }
            else if (this.datahisto) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.datahisto = this.getResponseData(this.datahisto);
                    this.transformData();
                    this.plotXaxis();
                    this.plotYaxis();
                    this.tooltipData();
                    this.dataforChart();
                    this.transformData1(this.finaldataarray);
                    this.plotChart();
                }), 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                this.httpresponse = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
            }), (/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    //this.data = this.getResponseData(resp);
                    this.drawChart();
                }), 0);
            }));
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.datahisto = this.getResponseData(this.httpresponse);
            this.transformData();
            this.plotXaxis();
            this.plotYaxis();
            this.tooltipData();
            this.dataforChart();
            this.transformData1(this.finaldataarray);
            this.plotChart();
        }), 0);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @param {?} data1
     * @return {?}
     */
    transformData1(data1) {
        this.keyArray = [];
        this.legendArray = [];
        data1.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        (element, i) => {
            if (i == 0) {
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} index
                 * @return {?}
                 */
                (innerelement, index) => {
                    if (index > 0) {
                        this.legendArray[innerelement] = { 'data': [] };
                        this.keyArray.push(innerelement);
                    }
                    else if (index == 0) {
                        this.xaxis = innerelement;
                    }
                }));
            }
        }));
        /** @type {?} */
        let tempinnerarray;
        tempinnerarray = [];
        data1.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (index > 0) {
                /** @type {?} */
                let obj = {};
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} innerindex
                 * @return {?}
                 */
                (innerelement, innerindex) => {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        const key = this.keyArray[innerindex - 1];
                        obj[key] = element[innerindex];
                        /** @type {?} */
                        const legenddata = this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'value': element[innerindex], 'label': element[0] });
                        }
                    }
                }));
                tempinnerarray.push(obj);
            }
        }));
        this.data = [];
        tempinnerarray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            this.data.push(element);
        }));
        this.legends = [];
        /** @type {?} */
        let element = this.datahisto[0];
        /** @type {?} */
        let object = { 'label': element[1] + " " + "of" + " " + element[0], 'color': this.color };
        this.legends.push(object);
    }
    /**
     * @return {?}
     */
    plotChart() {
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        let data;
        data = this.data;
        /** @type {?} */
        let series;
        series = [];
        series = stack().keys(this.keyArray)
            .offset(stackOffsetDiverging)(this.data);
        /** @type {?} */
        let i = 0;
        /** @type {?} */
        let tempdata;
        tempdata = [];
        tempdata = series;
        tempdata.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            element.forEach((/**
             * @param {?} innerelement
             * @return {?}
             */
            innerelement => {
                /** @type {?} */
                let singletooltip = [];
                singletooltip.push(innerelement.data.tooltipdata[i]);
                innerelement.push(singletooltip);
            }));
            i++;
        }));
        /** @type {?} */
        let chartdata = [];
        for (i = 0; i < tempdata.length - 1; i++) {
            chartdata.push(tempdata[i]);
        }
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE
        }
        /** @type {?} */
        const margin = { top: 20, right: 20, bottom: 50, left: 60 };
        /** @type {?} */
        const width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        const height = this.svgheight - margin.top - margin.bottom;
        //const height = +svg.attr("height") - margin.top - margin.bottom;
        /** @type {?} */
        let x;
        /** @type {?} */
        let y;
        this.svg = select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        let barWidth = (width / this.chartData.length);
        x = scalePoint()
            .domain(this.xaxisArray, (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return d; }))
            .rangeRound([0, width]);
        y = scaleLinear().rangeRound([height, 0]);
        y.domain([0, max(this.arrayofLength)]);
        /** @type {?} */
        let z = scaleOrdinal(schemeCategory10);
        this.arrayofLength = [];
        // add x axis to svg
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x));
            }
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(axisBottom(x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        /** @type {?} */
        let horizontalpadding = 0.05;
        //add y axis to svg
        this.svg.append("g")
            .call(axisLeft(y).ticks(this.tickscount));
        this.plotLine(this.svg, x, y, height, width);
        /** @type {?} */
        let histogramBar = this.svg.append("g")
            .selectAll("g")
            .data(chartdata)
            .enter().append("g")
            .attr("fill", this.color)
            .selectAll("rect")
            .data((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return d;
        }));
        /** @type {?} */
        let histogramBar1 = this.svg.append("g")
            .selectAll("g")
            .data(chartdata)
            .enter().append("g")
            .selectAll("labels")
            .data((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return d;
        }));
        histogramBar.enter().append("rect")
            .attr("width", barWidth - 1)
            .attr("y", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        (d, index) => {
            return y(d[1]);
        }))
            .attr("cursor", "pointer")
            .attr("height", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        (d, index) => {
            return Math.abs(y(d[0]) - y(d[1] - horizontalpadding));
        }))
            .attr("transform", (/**
         * @param {?} d
         * @param {?} i
         * @return {?}
         */
        (d, i) => {
            /** @type {?} */
            let translate = [barWidth * i, 0];
            return "translate(" + translate + ")";
        }))
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "visible");
        })).on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            /** @type {?} */
            let data = d[2];
            return tooltip.html(this.setKey(data[0]))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        })).on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            /** @type {?} */
            let clickdata = d[2];
            this.histogramClick(clickdata[0]);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
        }));
        if (this.labelflag) {
            histogramBar1.enter()
                .append("text")
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (this.labelcolor && this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .attr("y", (/**
             * @param {?} d
             * @param {?} i
             * @return {?}
             */
            (d, i) => {
                return y(d[1]);
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                /** @type {?} */
                let data;
                /** @type {?} */
                let data2;
                data = d[2];
                data2 = data[0];
                if (data2) {
                    return data2.value;
                }
                else {
                    return null;
                }
            }))
                .attr("transform", (/**
             * @param {?} d
             * @param {?} i
             * @return {?}
             */
            (d, i) => {
                /** @type {?} */
                let translate = [((barWidth * i) + barWidth / 2), (Math.abs(y(d[0]) - y(d[1] - horizontalpadding)))];
                return "translate(" + translate + ")";
            }))
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "visible");
            })).on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                /** @type {?} */
                let data = d[2];
                return tooltip.html(this.setKey(data[0]))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            })).on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                /** @type {?} */
                let clickdata = d[2];
                this.histogramClick(clickdata[0]);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
            }))
                .attr("cursor", "pointer");
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    histogramClick(obj) {
        /** @type {?} */
        let object = {};
        /** @type {?} */
        let data = this.datahisto[0];
        /** @type {?} */
        let label1 = data[1];
        /** @type {?} */
        let label2 = data[0];
        if (obj.label.length) {
            object[label2 + ":"] = obj.label;
            object[label1 + ":"] = obj.value;
        }
        this.chartClick(object);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    legendClick(event) {
        this.onLegendClick.emit(this.datahisto);
    }
    /**
     * @return {?}
     */
    transformData() {
        this.array = [];
        this.values = [];
        this.datahisto.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            this.values.push(element[1]);
        }));
        for (let i = 1; i < this.values.length; i++) {
            this.array.push(this.values[i]);
        }
    }
    /**
     * @return {?}
     */
    plotXaxis() {
        this.xaxisArray = [];
        this.xaxisArray.push(0);
        /** @type {?} */
        let newvalue = 0;
        /** @type {?} */
        let value = Math.ceil(max(this.array));
        if (value % 10 == 0) {
            value = value;
        }
        else {
            value = (10 - value % 10) + value;
        }
        /** @type {?} */
        let quotient = value / 5;
        while (newvalue < value) {
            newvalue = newvalue + quotient;
            this.xaxisArray.push(newvalue);
        }
    }
    /**
     * @return {?}
     */
    plotYaxis() {
        /** @type {?} */
        let tempvalue = 0;
        /** @type {?} */
        let lengthofArray = 0;
        /** @type {?} */
        let lengthcount = 0;
        /** @type {?} */
        let templength = 0;
        /** @type {?} */
        let newvalue = 0;
        this.yaxisArray = [];
        this.histogramarray = [];
        this.lengtharray = [];
        this.histogramdata = [];
        this.arrayofLength = [];
        this.chartData = [];
        this.xaxisArray.forEach((/**
         * @param {?} element1
         * @return {?}
         */
        element1 => {
            this.yaxisArray = [];
            this.array.forEach((/**
             * @param {?} element2
             * @return {?}
             */
            element2 => {
                if (tempvalue < element2 && element2 <= element1) {
                    this.yaxisArray.push(element2);
                }
                lengthofArray = this.yaxisArray.length;
            }));
            if (templength > lengthofArray) {
                lengthcount = templength;
            }
            else {
                lengthcount = lengthofArray;
            }
            templength = lengthcount;
            tempvalue = element1;
            this.lengtharray.push(lengthofArray);
        }));
        /** @type {?} */
        let value = Math.ceil(templength);
        /** @type {?} */
        let quotient = value / 5;
        while (newvalue <= value) {
            newvalue = newvalue + quotient;
            this.yaxisData.push(newvalue);
        }
        for (let i = 1; i < this.histogramarray.length; i++) {
            this.histogramdata.push(this.histogramarray[i]);
        }
        for (let i = 1; i < this.lengtharray.length; i++) {
            this.arrayofLength.push(this.lengtharray[i]);
        }
        for (let i = 0; i < this.arrayofLength.length; i++) {
            /** @type {?} */
            let data = {};
            data["value"] = this.arrayofLength[i];
            this.chartData.push(data);
        }
        this.array = [];
    }
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    validateresize() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.wt) ;
            else {
                this.resize();
            }
        }), 0);
    }
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    resize() {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.transformData();
        this.plotXaxis();
        this.plotYaxis();
        this.tooltipData();
        this.dataforChart();
        this.transformData1(this.finaldataarray);
        this.plotChart();
    }
    /**
     * @return {?}
     */
    dataforChart() {
        this.finaldataarray = [] = [];
        /** @type {?} */
        let initialArray = [];
        /** @type {?} */
        let temparray = [];
        initialArray.push('level');
        /** @type {?} */
        let maxElement = Math.max.apply(null, this.arrayofLength);
        /** @type {?} */
        let maxlength = maxElement;
        /** @type {?} */
        let n = 1;
        while (n <= maxElement) {
            initialArray.push('' + n);
            n++;
        }
        initialArray.push('tooltipdata');
        /** @type {?} */
        let length = this.arrayofLength.length;
        /** @type {?} */
        let number = 1;
        /** @type {?} */
        let j = 0;
        this.finaldataarray.push(initialArray);
        for (let i = 0; i < this.arrayofLength.length; i++) {
            /** @type {?} */
            let value = this.arrayofLength[i];
            /** @type {?} */
            let tempvalue = value;
            temparray = [];
            temparray.push('' + i);
            maxElement = maxlength;
            if (value > 0) {
                while (value != 0) {
                    temparray.push(number);
                    value--;
                }
                maxElement = maxElement - tempvalue;
                while (maxElement != 0) {
                    temparray.push(0);
                    maxElement--;
                }
            }
            else {
                while (maxElement != 0) {
                    temparray.push(0);
                    maxElement--;
                }
            }
            temparray.push(this.tooltipArray[j]);
            this.finaldataarray.push(temparray);
            j++;
        }
    }
    /**
     * @return {?}
     */
    tooltipData() {
        /** @type {?} */
        let arrayofTooltip = [];
        /** @type {?} */
        let obj = { "label": "", "value": "" };
        this.datahisto.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            obj = { "label": "", "value": "" };
            obj["label"] = element[0];
            obj["value"] = element[1];
            arrayofTooltip.push(obj);
        }));
        /** @type {?} */
        let value1 = this.xaxisArray[0];
        /** @type {?} */
        let tooltipdata = [];
        for (let j = 1; j < this.xaxisArray.length; j++) {
            tooltipdata = [];
            /** @type {?} */
            let value2 = this.xaxisArray[j];
            arrayofTooltip.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (value1 <= element.value && element.value <= value2) {
                    /** @type {?} */
                    let tooltipobj = { "label": "", "value": "" };
                    tooltipobj["label"] = element["label"];
                    tooltipobj["value"] = element["value"];
                    tooltipdata.push(tooltipobj);
                }
            }));
            this.tooltipArray.push(tooltipdata);
            value1 = value2;
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setKey(obj) {
        /** @type {?} */
        let object = {};
        /** @type {?} */
        let data = this.datahisto[0];
        /** @type {?} */
        let label1 = data[1];
        /** @type {?} */
        let label2 = data[0];
        object[label2 + ":"] = obj.label;
        object[label1 + ":"] = obj.value;
        return (this.toolTipForBar(object));
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    }
}
HistogramComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-histogram',
                template: `<div #chartId *ngIf="drillableFlag" (window:resize)="validateresize()">
    <table *ngIf="datahisto.length > 0" style="width: 100%;">
        <tr *ngIf="title.length > 0">
            <td colspan="2" style="font-size: 18px; font-weight: bold; "> {{title}} </td>
        </tr>
        <tr>
            <td>
                <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
                </svg>
            </td>
        </tr>
        <tr *ngIf="legend">
            <td style="display: block; padding: 5px;">
                <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="legendClick($event)" [data]="legends" style="height:100%;"></amexio-d3-legend>
            </td>
        </tr>
    </table>
    <div *ngIf="datahisto.length < 1" class="lmask" style="padding-top:50%">
        </div>
</div>`,
                styles: [`.bar{background-color:#3943cf;padding:.02px}`]
            },] },
];
HistogramComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef },
    { type: DeviceQueryService }
];
HistogramComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    color: [{ type: Input, args: ['color',] }],
    datahisto: [{ type: Input, args: ['data',] }],
    tickscount: [{ type: Input, args: ['yaxis-interval',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ScatterchartComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     * @param {?} device
     */
    constructor(myservice, cdf, device) {
        super('scatter');
        this.myservice = myservice;
        this.cdf = cdf;
        this.device = device;
        this.svgheight = 300;
        this.color = "blue";
        this.zoomflag = false;
        this.zoominitiated = false;
        this.keyArray = [];
        this.transformeddata = [];
        this.legendarray = [];
        this.resizebtnflag = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.wt = this.svgwidth;
        this.dataFormatted = [];
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    resp = response;
                    this.httpresponse = resp;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                }), (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.data = this.getResponseData(resp);
                        this.dataFormatted = this.data;
                        this.transformData(this.dataFormatted);
                        this.colorGeneration();
                        this.legendCreation();
                        this.plotScatterChart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.dataFormatted = this.data;
                    this.data = this.getResponseData(this.data);
                    this.transformData(this.data);
                    this.colorGeneration();
                    this.legendCreation();
                    this.plotScatterChart();
                }), 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                this.httpresponse = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
            }), (/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    //this.data = this.getResponseData(resp);
                    this.drawChart();
                }), 0);
            }));
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.data = this.getResponseData(this.httpresponse);
            this.dataFormatted = this.data;
            this.transformData(this.data);
            this.colorGeneration();
            this.legendCreation();
            this.plotScatterChart();
        }), 0);
    }
    // Method to transform data in key value pair 
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.keyArray = data[0];
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((/**
                 * @param {?} individualvalue
                 * @param {?} keyindex
                 * @return {?}
                 */
                (individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                }));
                this.transformeddata.push(DummyObject);
            }
        }));
        this.data = this.transformeddata;
    }
    // Method get response data using data reader
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    // Method to plot d3 chart
    /**
     * @return {?}
     */
    plotScatterChart() {
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        const margin = { top: 20, right: 20, bottom: 30, left: 60 };
        /** @type {?} */
        const width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        const height = this.svgheight - margin.top - margin.bottom;
        /** @type {?} */
        let x;
        /** @type {?} */
        let y;
        x = scaleLinear()
            .rangeRound([0, width]);
        y = scaleLinear()
            .rangeRound([height, 0]);
        /** @type {?} */
        let xAxis = axisBottom(x);
        /** @type {?} */
        let yAxis = axisLeft(y).ticks(this.tickscount);
        this.svg = select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        x.domain([0, max(this.data, (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return d[Object.keys(d)[0]]; }))]);
        y.domain([0, max(this.data, (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return d[Object.keys(d)[1]]; }))]);
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xAxis).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xAxis)
                    .append("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .style("text-anchor", "start");
            }
        }
        else {
            this.svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        // this.svg.append("g")
        //   .attr("class", "x axis")
        //   .attr("transform", "translate(0," + height + ")")
        //   .call(xAxis)
        //   .append("text")
        //   .attr("class", "label")
        //   .attr("x", width)
        //   .attr("y", -6)
        //   .style("text-anchor", "end");
        this.svg.append("g")
            .attr("class", "y axis")
            .call(yAxis)
            .append("text")
            .attr("class", "label")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end");
        if (this.dataFormatted[0].length == 2) {
            this.plotLine(this.svg, x, y, height, width);
            this.node = this.svg.selectAll(".dot")
                .data(this.data)
                .enter().append("circle")
                .attr("class", "dot")
                .attr("fill", this.color)
                .attr("r", 4.5)
                .attr("cursor", "pointer")
                .attr("cx", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return x(d[Object.keys(d)[0]]);
            }))
                .attr("cy", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return y(d[Object.keys(d)[1]]); }))
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.html(this.formTooltipData(d))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.scatterChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
            // ------------------------------------------------------------------------------
            if (this.labelflag) {
                this.nodelabel = this.svg.selectAll("labels")
                    .data(this.data)
                    .enter().append("text")
                    .style("font-weight", "bold")
                    .attr("text-anchor", "middle")
                    .attr("vertical-align", "middle")
                    .attr("margin-top", margin.top)
                    .attr("fill", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    if (this.labelcolor.length > 0) {
                        return this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                }))
                    .attr("x", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (d, i) => {
                    return x(d[Object.keys(d)[0]]) + 11;
                }))
                    .attr("y", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (d, i) => {
                    return y(d[Object.keys(d)[1]]);
                }))
                    .text((/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return d[Object.keys(d)[1]];
                }))
                    .attr("cursor", "pointer")
                    .on("mouseover", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.style("visibility", "visible");
                }))
                    .on("mousemove", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.html(this.formTooltipData(d))
                        .style("top", (event$1.pageY - 10) + "px")
                        .style("left", (event$1.pageX + 10) + "px");
                }))
                    .on("mouseout", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.style("visibility", "hidden");
                }))
                    .on("click", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    this.scatterChartClick(d);
                    this.fordrillableClick(this, d, event);
                    return tooltip.style("visibility", "hidden");
                }));
            }
        }
        else {
            this.plotLine(this.svg, x, y, height, width);
            this.node = this.svg.selectAll(".dot")
                .data(this.transformeddata)
                .enter().append("circle")
                .attr("class", "dot")
                .attr("r", 4.5)
                .attr("cursor", "pointer")
                .attr("cx", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return x(d[Object.keys(d)[0]]);
            }))
                .attr("cy", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return y(d[Object.keys(d)[1]]); }))
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return d[Object.keys(d)[4]]; }))
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.html(this.formTooltipData(d))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.scatterChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
            if (this.labelflag) {
                this.nodelabel = this.svg.selectAll("labels")
                    .data(this.data)
                    .enter().append("text")
                    .style("font-weight", "bold")
                    .attr("text-anchor", "middle")
                    .attr("vertical-align", "middle")
                    .attr("margin-top", margin.top)
                    .attr("fill", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    if (this.labelcolor.length > 0) {
                        return this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                }))
                    .attr("x", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (d, i) => {
                    return x(d[Object.keys(d)[0]]) + 11;
                }))
                    .attr("y", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (d, i) => {
                    return y(d[Object.keys(d)[1]]);
                }))
                    .text((/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return d[Object.keys(d)[1]];
                }))
                    .attr("cursor", "pointer")
                    .on("mouseover", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.style("visibility", "visible");
                }))
                    .on("mousemove", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.html(this.formTooltipData(d))
                        .style("top", (event$1.pageY - 10) + "px")
                        .style("left", (event$1.pageX + 10) + "px");
                }))
                    .on("mouseout", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.style("visibility", "hidden");
                }))
                    .on("click", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    this.scatterChartClick(d);
                    this.fordrillableClick(this, d, event);
                    return tooltip.style("visibility", "hidden");
                }));
            }
        }
        //create zoom handler 
        if (this.zoomflag) {
            this.zoominitiated = true;
            /** @type {?} */
            let zoom_handler = zoom()
                .on("zoom", this.zoom_actions.bind(this));
            zoom_handler(this.svg);
        }
    }
    /**
     * @return {?}
     */
    togglebtnflag() {
        this.resizebtnflag = true;
    }
    /**
     * @return {?}
     */
    zoom_actions() {
        this.node.attr("transform", event$1.transform);
        if (this.labelflag) {
            this.nodelabel.attr("transform", event$1.transform);
        }
        this.resizebtnflag = true;
        this.zoominitiated = false;
    }
    /**
     * @return {?}
     */
    resizesvg() {
        // this.svg = null;
        this.svg.selectAll("*").remove();
        this.plotScatterChart();
        this.resizebtnflag = false;
    }
    // Method to form tooltip data
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    formTooltipData(tooltipData) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(tooltipData)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        return this.toolTipForBar(object);
    }
    // Method on chart click
    /**
     * @param {?} event
     * @return {?}
     */
    scatterChartClick(event) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(event)) {
            if (key !== 'color') {
                object[key] = value;
            }
        }
        this.chartClick(object);
    }
    // method to create Legend
    /**
     * @return {?}
     */
    legendCreation() {
        if (this.dataFormatted[0].length == 2) {
            this.legends = [];
            /** @type {?} */
            let element = this.dataFormatted[0];
            /** @type {?} */
            let object = { 'label': element[0] + " " + "vs" + " " + element[1], 'color': this.color };
            this.legends.push(object);
        }
        else {
            this.legends = [];
            this.legendarray.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                /** @type {?} */
                let legendobject = {};
                legendobject['label'] = element.label;
                legendobject['color'] = element.color;
                this.legends.push(legendobject);
            }));
        }
    }
    // Method on Legend Click
    /**
     * @param {?} legendevent
     * @return {?}
     */
    onScatterLegendClick(legendevent) {
        if (this.dataFormatted[0].length == 2) {
            this.onLegendClick.emit(this.data);
        }
        else {
            this.legendarray.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (legendevent.label == element.label) {
                    /** @type {?} */
                    let arr = element.value;
                    /** @type {?} */
                    let temparr = [];
                    arr.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    element => {
                        /** @type {?} */
                        let obj = {};
                        for (let [key, value] of Object.entries(element)) {
                            if (key !== 'color') {
                                obj[key] = value;
                            }
                        } //for end
                        temparr.push(obj);
                    })); //for each ends
                    this.legendClick(temparr);
                }
            }));
        }
    }
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    validateresize() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.wt) ;
            else {
                this.resize();
            }
        }), 0);
    }
    //RESIZE STEP 4 ENDS
    // Method for responsiveness
    /**
     * @return {?}
     */
    resize() {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotScatterChart();
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, x, y, height, width) {
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(axisBottom(x).
                tickSize(-this.width).tickFormat(''));
        }
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    }
    /**
     * @return {?}
     */
    colorGeneration() {
        this.legendarray = [];
        /** @type {?} */
        let i = 0;
        /** @type {?} */
        let names = this.dataFormatted
            .map((/**
         * @param {?} e
         * @return {?}
         */
        e => e[2]))
            .filter((/**
         * @param {?} e
         * @param {?} i
         * @param {?} a
         * @return {?}
         */
        (e, i, a) => a.indexOf(e) === i));
        for (let j = 1; j < names.length; j++) {
            /** @type {?} */
            let value = [];
            /** @type {?} */
            let obj = { "label": "", "color": "", "value": [] };
            this.transformeddata.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (element[Object.keys(element)[2]] == names[j]) {
                    element['color'] = this.predefinedcolors[i];
                    value.push(element);
                }
            }));
            obj["value"] = value;
            obj["label"] = names[j];
            obj["color"] = this.predefinedcolors[i];
            this.legendarray.push(obj);
            i++;
        }
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendData = [];
        this.legendarray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let legendobject = {};
            legendobject['label'] = element.label;
            legendobject['color'] = element.color;
            this.legendData.push(legendobject);
        }));
    }
}
ScatterchartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-scatter',
                template: `<div #chartId  *ngIf="drillableFlag" (window:resize)="validateresize()">
        <table *ngIf="data.length > 0"  style="width: 100%;">
            <tr >
                <td colspan="2" style="font-size: 18px; font-weight: bold; "> {{title}}
                 <span *ngIf="resizebtnflag">
               <button  type="reset" class="fa fa-search-minus" style="cursor: pointer; float:right" (click)="resizesvg()">
               </button>
               </span>     
                </td>
            </tr>
            <tr>
                <td>
                    <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
                    </svg>
                </td>
            </tr>
            <tr *ngIf="legend">
                <td style="display: block; padding: 5px;">
                    <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="onScatterLegendClick($event)" [data]="legends" style="height:100%;"></amexio-d3-legend>
                </td>
            </tr>
        </table>
        <div *ngIf="data.length < 1" class="lmask" style="padding-top:50%">
            </div>
    </div>`,
                styles: [``]
            },] },
];
ScatterchartComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef },
    { type: DeviceQueryService }
];
ScatterchartComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    color: [{ type: Input, args: ['color',] }],
    zoomflag: [{ type: Input, args: ['zoom-enable',] }],
    tickscount: [{ type: Input, args: ['yaxis-interval',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MultiareaComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     * @param {?} device
     */
    constructor(myservice, cdf, device) {
        super("areachart");
        this.myservice = myservice;
        this.cdf = cdf;
        this.device = device;
        this.svgheight = 350;
        this.colorarray = [];
        this.onLegendClick = new EventEmitter();
        this.onTooltipClick = new EventEmitter();
        this.togglelabel = false;
        this.margin = {};
        this.keyArray = [];
        this.transformeddata = [];
        this.data1 = [];
        this.legendArray = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.wt = this.svgwidth;
        this.togglelabel = false;
        if (this.level <= 1) {
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    this.httpresponse = response;
                    this.data = this.getResponseData(response);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                }), (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.transformData(this.data);
                        this.initAreaChart();
                        this.plotD3Chart();
                    }), 0);
                }));
            }
            else if (this.data1) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.transformData(this.data);
                    this.initAreaChart();
                    this.plotD3Chart();
                }), 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                this.httpresponse = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
            }), (/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    //this.data = this.getResponseData(resp);
                    this.drawChart();
                }), 0);
            }));
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.data = this.getResponseData(this.httpresponse);
            this.transformData(this.data);
            this.initAreaChart();
            this.plotD3Chart();
        }), 0);
    }
    /**
     * @return {?}
     */
    initAreaChart() {
        this.tooltip = this.toolTip(d3);
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        this.margin = { top: 30, right: 44, bottom: 50, left: 30 },
            this.width = this.svgwidth - this.margin.left - this.margin.right,
            this.height = this.svgheight - this.margin.top - this.margin.bottom;
        //find max and initialize max
        this.maximumValue = this.findMaxData(this.data);
        this.x = scalePoint()
            .range([0, this.width]);
        // .padding(0.1);
        this.y = scaleLinear()
            .rangeRound([this.height, 0]);
        this.areaArray = [];
        //set x y domain
        this.areaArray = this.data.map((/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return d[Object.keys(d)[0]]; }));
        this.x.domain(this.areaArray);
        this.y.domain([0, this.maximumValue]);
        //initialize svg
        this.svg =
            select("#" + this.componentId)
                .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
                .attr("width", this.width + this.margin.left + this.margin.right)
                .attr("height", this.height + this.margin.top + this.margin.bottom);
        this.predefinedColors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        this.formLegendData();
        /** @type {?} */
        let counter;
        /** @type {?} */
        let g = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
        // add the X 
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                g.append("g")
                    .attr("transform", "translate(0," + this.height + ")")
                    .call(axisBottom(this.x)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                g.append("g")
                    .attr("transform", "translate(0," + this.height + ")")
                    .call(axisBottom(this.x));
            }
        }
        else {
            g.append("g")
                .attr("transform", "translate(0," + this.height + ")")
                .call(axisBottom(this.x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        // add the Y Axis
        g.append("g")
            .call(axisLeft(this.y).ticks(this.tickscount));
        this.plotLine(g, this.x, this.y, this.height, this.width);
        for (counter = 1; counter < this.keyArray.length; counter++) {
            /** @type {?} */
            let innerGroup = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
            this.plotAreaChart(innerGroup, counter, this);
        }
        //call method to plot points
        /** @type {?} */
        let increment;
        for (increment = 1; increment < this.keyArray.length; increment++) {
            //plot line
            /** @type {?} */
            let innerGroup = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
            this.PlotLineDot(innerGroup, increment, this);
        } //increment for ends
    }
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    validateresize() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.wt) ;
            else {
                this.resize();
            }
        }), 0);
    }
    //RESIZE STEP 4 ENDS
    /**
     * @param {?} g
     * @param {?} i
     * @param {?} thisa
     * @return {?}
     */
    PlotLineDot(g, i, thisa) {
        /** @type {?} */
        let flag = this.togglelabel;
        /** @type {?} */
        const line$$1 = line()
            .x((/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return thisa.x(d[Object.keys(d)[0]]); }))
            .y((/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return thisa.y(d[Object.keys(d)[i]]); }));
        g.append("path")
            .data([thisa.data])
            .attr("fill", "none")
            .attr("stroke", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            if (this.colorarray.length > 0) {
                if (this.colorarray[i - 1]) {
                    return this.colorarray[i - 1];
                }
                else {
                    return thisa.predefinedcolors[i];
                }
            }
            else {
                return thisa.predefinedcolors[i];
            }
        }))
            .attr("stroke-width", 1.5)
            .attr("d", line$$1)
            .attr("opacity", 0.2)
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")");
        "translate(" + 0 + "," + 0 + ")");
        //----------
        g.selectAll('dot')
            .data(thisa.data)
            .enter()
            .append('circle')
            .attr('opacity', 0)
            .attr("fill", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            if (this.colorarray.length > 0) {
                if (this.colorarray[i - 1]) {
                    return this.colorarray[i - 1];
                }
                else {
                    return thisa.predefinedcolors[i];
                }
            }
            else {
                return thisa.predefinedcolors[i];
            }
        }))
            .attr("cx", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return thisa.x(d[Object.keys(d)[0]]); }))
            .attr("cy", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return thisa.y(d[Object.keys(d)[i]]); }))
            .attr('r', 4)
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            this.formTooltipData(d, i);
            return this.tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return this.tooltip.html(this.formTooltipData(d, i))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return this.tooltip.style("visibility", "hidden");
        }))
            .style("opacity", 1)
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            this.onAreaTooltipClick(d, i);
            this.fordrillableClick(this, d, event);
            return this.tooltip.style("visibility", "hidden");
            //this.chartClick(d);
        }))
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")");
        "translate(" + 0 + "," + 0 + ")");
        // -----------------------------------------------------------------
        if (this.labelflag) {
            g.selectAll('labels')
                .data(thisa.data)
                .enter()
                .append('text')
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (this.labelcolor && this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                // let length = String(d[Object.keys(d)[i]]).length
                return thisa.x(d[Object.keys(d)[0]]) + 20;
            }))
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                /** @type {?} */
                let key = [Object.keys(d)[i]];
                if (flag) {
                    return thisa.y(d[key]) - 5; // fr up
                }
                else {
                    return thisa.y(d[key]) + 15;
                }
                // return thisa.y(d[Object.keys(d)[i]]);
                //  return y(d[Object.keys(d)[1]])+yTextPadding;
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return d[Object.keys(d)[i]];
            }))
                .attr("transform", "translate(" + 0 + "," + 0 + ")")
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.formTooltipData(d, i);
                return this.tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return this.tooltip.html(this.formTooltipData(d, i))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return this.tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.onAreaTooltipClick(d, i);
                this.fordrillableClick(this, d, event);
                return this.tooltip.style("visibility", "hidden");
                //this.chartClick(d);
            }));
        }
        if (this.togglelabel) {
            this.togglelabel = false;
        }
        else {
            this.togglelabel = true;
        }
    }
    /**
     * @param {?} g
     * @param {?} i
     * @param {?} thisa
     * @return {?}
     */
    plotAreaChart(g, i, thisa) {
        // calculate area and valueline
        // define the line
        /** @type {?} */
        const valueline = line()
            .x((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            /** @type {?} */
            let key = [Object.keys(d)[0]];
            return thisa.x(d[key]);
        }))
            .y((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            /** @type {?} */
            let key = [Object.keys(d)[i]];
            return thisa.y(d[key]);
        }));
        // add the valueline path.
        g.append("path")
            .data([this.data])
            .style("stroke", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            if (this.colorarray.length > 0) {
                //  return this.colorarray[i-1];
                if (this.colorarray[i - 1]) {
                    return this.colorarray[i - 1];
                }
                else {
                    return this.predefinedcolors[i];
                }
            }
            else {
                return this.predefinedColors[i];
            }
        }))
            .attr("fill", "none")
            .style("stroke-width", "2px")
            .attr("d", valueline)
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")");
        "translate(" + 0 + "," + 0 + ")");
        // define the area
        /** @type {?} */
        let area$$1 = area()
            .x((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            /** @type {?} */
            let key = [Object.keys(d)[0]];
            return thisa.x(d[key]);
        }))
            .y0(this.height)
            .y1((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            /** @type {?} */
            let key = [Object.keys(d)[i]];
            return thisa.y(d[key]);
        }));
        g.append("path")
            .data([this.data])
            .attr("d", area$$1)
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")")
        "translate(" + 0 + "," + 0 + ")")
            .style("stroke", "none")
            .attr("fill", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            if (this.colorarray.length > 0) {
                if (this.colorarray[i - 1]) {
                    return this.colorarray[i - 1];
                }
                else {
                    return this.predefinedcolors[i];
                }
            }
            else {
                return this.predefinedColors[i];
            }
        }))
            .style("opacity", 0.5);
    }
    /**
     * @param {?} tooltipData
     * @param {?} count
     * @return {?}
     */
    onAreaTooltipClick(tooltipData, count) {
        /** @type {?} */
        let obj = {};
        obj[this.keyArray[0]] = tooltipData[Object.keys(tooltipData)[0]];
        obj[this.keyArray[count]] = tooltipData[Object.keys(tooltipData)[count]];
        this.chartClick(obj);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    findMaxData(data) {
        /** @type {?} */
        let tempArray = [];
        /** @type {?} */
        let largeValues = [];
        /** @type {?} */
        let maxValue;
        //logic to search 3 largest values 
        data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let value;
            for (let [key, value] of Object.entries(element)) {
                //exempts first column of data as it is treated as x-axis
                if (key != this.keyArray[0]) {
                    tempArray.push(value);
                }
            } //for loop end
            value = this.findLargestValue(tempArray);
            largeValues.push(value);
        }));
        maxValue = this.findLargestValue(largeValues);
        return maxValue;
    }
    /**
     * @param {?} array
     * @return {?}
     */
    findLargestValue(array) {
        /** @type {?} */
        let i;
        /** @type {?} */
        let max$$1 = 0;
        for (i = 0; i < array.length; i++) {
            if (array[i] > max$$1) {
                max$$1 = array[i];
            } //if ends 
        } //max ends
        return max$$1;
    }
    //covert data
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.transformeddata = [];
        this.keyArray = data[0];
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((/**
                 * @param {?} individualvalue
                 * @param {?} keyindex
                 * @return {?}
                 */
                (individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                })); //inner for loop ends
                this.transformeddata.push(DummyObject);
            } //if ends
        })); //outer for loop ends
        //outer for loop ends
        /** @type {?} */
        let parsedtransformeddata = JSON.parse(JSON.stringify(this.transformeddata));
        this.data = parsedtransformeddata;
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendArray = [];
        /** @type {?} */
        let counter = 0;
        this.keyArray.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (index > 0) {
                /** @type {?} */
                let legendobject = {};
                legendobject['label'] = element;
                if ((this.colorarray.length > 0) && (this.colorarray[counter])) {
                    legendobject['color'] = this.colorarray[counter];
                }
                else {
                    legendobject['color'] = this.predefinedColors[counter + 1];
                }
                this.legendArray.push(legendobject);
                counter++;
            }
        }));
    }
    /**
     * @param {?} legendData
     * @return {?}
     */
    onAreaLegendClick(legendData) {
        /** @type {?} */
        let obj = {};
        obj["label"] = legendData.label;
        /** @type {?} */
        let data = [];
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            for (let [key, value] of Object.entries(element)) {
                if (key == legendData.label) {
                    /** @type {?} */
                    let object = {};
                    object[key] = value;
                    data.push(object);
                } //inner if ends
            } //inner forloop ends
        })); //outer foreach ends
        obj["data"] = data;
        this.onLegendClick.emit(obj);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    resize() {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            // this.resizewt = this.chartId.nativeElement.offsetWidth;
            // console.log("", new Date().getTime(), " ", this.resizewt);
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.initAreaChart();
        this.plotD3Chart();
    }
    /**
     * @param {?} tooltipData
     * @param {?} count
     * @return {?}
     */
    formTooltipData(tooltipData, count) {
        /** @type {?} */
        let obj = {};
        obj[this.keyArray[0]] = tooltipData[Object.keys(tooltipData)[0]];
        obj[this.keyArray[count]] = tooltipData[Object.keys(tooltipData)[count]];
        return this.toolTipForBar(obj);
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    }
    /**
     * @return {?}
     */
    validateData() {
        if (this.data) ;
        else {
            return "lmask";
        }
    }
}
MultiareaComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-multiarea',
                template: `
<div #chartId *ngIf="drillableFlag" #divid (window:resize)="validateresize()">
<table [ngClass]="validateData()" style="width: 100%;">
  <tr *ngIf = "title.length > 0">
      <td style="font-size: 18px; font-weight: bold; "> {{title}} </td>
  </tr>
  <tr>
      <td>
          <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
          </svg>
      </td>
  </tr>
  <tr *ngIf="legend" >
      <td style="display: block; padding: 5px;">
          <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="onAreaLegendClick($event)" [data]="legendArray" style="height:100%;">
          </amexio-d3-legend>
      </td>
  </tr>
</table>
<!-- <div *ngIf="data.length < 1" class="lmask" style="padding-top:50%">
    </div> -->
</div>`,
                styles: [``]
            },] },
];
MultiareaComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef },
    { type: DeviceQueryService }
];
MultiareaComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    colorarray: [{ type: Input, args: ['color',] }],
    tickscount: [{ type: Input, args: ['yaxis-interval',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    onLegendClick: [{ type: Output }],
    onTooltipClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CandlestickComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     * @param {?} device
     */
    constructor(myservice, cdf, device) {
        super("candlestickwaterfallchart");
        this.myservice = myservice;
        this.cdf = cdf;
        this.device = device;
        this.svgheight = 300;
        this.showzeroflag = true;
        this.onLegendClick = new EventEmitter();
        this.predefinedColor = [];
        this.keyArray = [];
        this.margin = {};
        this.legendArray = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.wt = this.svgwidth;
        this.predefinedColor = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
        if (this.level <= 1) {
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    //this.data = response;
                    this.httpresponse = response;
                    this.data = this.getResponseData(response);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                }), (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.transformData(this.data);
                        this.initializeData();
                        this.plotXYAxis();
                        this.plotD3Chart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.transformData(this.data);
                    this.initializeData();
                    this.plotXYAxis();
                    this.plotD3Chart();
                }), 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                this.httpresponse = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
            }), (/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    //this.data = this.getResponseData(resp);
                    this.drawChart();
                }), 0);
            }));
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.data = this.getResponseData(this.httpresponse);
            this.transformData(this.data);
            this.initializeData();
            this.plotXYAxis();
            this.plotD3Chart();
        }), 0);
    }
    /**
     * @return {?}
     */
    initializeData() {
        this.tooltip = this.toolTip(d3);
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        this.margin = { top: 20, right: 30, bottom: 50, left: 60 },
            this.width = this.svgwidth - this.margin.left - this.margin.right,
            this.height = this.svgheight - this.margin.top - this.margin.bottom;
    }
    /**
     * @return {?}
     */
    plotXYAxis() {
        // set the ranges
        this.x = scaleBand().range([0, this.width]);
        this.y = scaleLinear()
            .rangeRound([this.height, 0]);
        // scale the range of the data
        /** @type {?} */
        let candlestickArray = this.data.map((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return d[Object.keys(d)[0]];
        }));
        this.x.domain(candlestickArray);
        /** @type {?} */
        let max$$1 = max(this.data, (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return d.end; }));
        this.y.domain([0, max$$1]);
        // this.svg = d3.select("#" + this.componentId)
        //RESIZE STEP 2 START
        this.svg = select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
            .attr("width", this.width + this.margin.left + this.margin.right)
            .attr("height", this.height + this.margin.top + this.margin.bottom)
            .append("g")
            .attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
        // add the X Axis
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + this.height + ")")
                    .call(axisBottom(this.x)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + this.height + ")")
                    .call(axisBottom(this.x));
            }
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + this.height + ")")
                .call(axisBottom(this.x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        // this.svg.append("g")
        //   .attr("transform", "translate(0," + this.height + ")")
        //   .call(d3.axisBottom(this.x));
        // add the Y Axis
        this.svg.append("g")
            .call(axisLeft(this.y).ticks(this.tickscount));
        this.plotLine(this.svg, this.x, this.y, this.height, this.width);
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        /** @type {?} */
        let bar = this.svg.selectAll(".bar")
            .data(this.data)
            .enter().append("g")
            .attr("class", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return "bar " + d.class; }))
            .attr("transform", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return "translate(" + this.x(d[Object.keys(d)[0]]) + ",0)";
        }));
        bar.append("rect")
            .attr("y", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return this.y(Math.max(d.start, d.end)); }))
            .attr("height", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return Math.abs(this.y(d.start) - this.y(d.end)); }))
            .attr("width", this.x.bandwidth())
            .attr("fill", (/**
         * @param {?} d
         * @param {?} i
         * @return {?}
         */
        (d, i) => {
            return this.predefinedColor[i];
        }))
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            this.formTooltipData(d);
            return this.tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return this.tooltip.html(this.formTooltipData(d))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return this.tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            this.onCandlestickClick(d);
            this.fordrillableClick(this, d, event);
            return this.tooltip.style("visibility", "hidden");
        }));
        if (this.labelflag) {
            bar.append("text")
                .style("font-weight", "bold")
                .style("font-size", "1vw")
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (this.labelcolor && this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return (this.x.bandwidth()) / 2;
            }))
                .attr("y", (/**
             * @param {?} d
             * @param {?} index
             * @return {?}
             */
            (d, index) => {
                return this.y(Math.max(d.start, d.end)) + 20;
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                // return d[Object.keys(d)[1]]
                if (this.showzeroflag) {
                    return d[Object.keys(d)[1]];
                }
                else if (!this.showzeroflag) {
                    if (d[Object.keys(d)[1]] > 0) {
                        return d[Object.keys(d)[1]];
                    }
                }
            }))
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.formTooltipData(d);
                return this.tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return this.tooltip.html(this.formTooltipData(d))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return this.tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.onCandlestickClick(d);
                this.fordrillableClick(this, d, event);
                return this.tooltip.style("visibility", "hidden");
            }));
        }
    }
    /**
     * @param {?} svg
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(svg, x, y, height, width) {
        if (this.hScale) {
            svg.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.transformeddata = [];
        this.keyArray = [];
        this.keyArray = data[0];
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((/**
                 * @param {?} individualvalue
                 * @param {?} keyindex
                 * @return {?}
                 */
                (individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                })); //inner for loop ends
                this.transformeddata.push(DummyObject);
            } //if ends
        })); //outer for loop ends 
        this.data = this.transformeddata;
        this.addDataKeys();
        this.formLegendData();
    }
    /**
     * @return {?}
     */
    addDataKeys() {
        /** @type {?} */
        let cumulative = 0;
        for (let i = 0; i < this.data.length; i++) {
            this.data[i]["start"] = cumulative;
            cumulative += this.data[i][this.keyArray[1]];
            this.data[i]["end"] = cumulative;
            this.data[i]["class"] = (this.data[i][this.keyArray[1]] >= 0) ? 'positive' : 'negative';
        }
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    formTooltipData(tooltipData) {
        /** @type {?} */
        let object = {};
        object[this.keyArray[0]] = tooltipData[Object.keys(tooltipData)[0]];
        object[this.keyArray[1]] = tooltipData[Object.keys(tooltipData)[1]];
        return this.toolTipForBar(object);
    }
    /**
     * @param {?} chartData
     * @return {?}
     */
    onCandlestickClick(chartData) {
        /** @type {?} */
        let object = {};
        object[this.keyArray[0]] = chartData[Object.keys(chartData)[0]];
        object[this.keyArray[1]] = chartData[Object.keys(chartData)[1]];
        this.chartClick(object);
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendArray = [];
        this.data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            for (let [key, value] of Object.entries(element)) {
                if (key == this.keyArray[0]) {
                    /** @type {?} */
                    let object = {};
                    object["label"] = value;
                    object["color"] = this.predefinedColor[index];
                    this.legendArray.push(object);
                }
            }
        }));
    }
    /**
     * @param {?} chartData
     * @return {?}
     */
    onCandlestickLegendClick(chartData) {
        /** @type {?} */
        let object = {};
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            for (let [key, value] of Object.entries(element)) {
                if (value == chartData.label) {
                    object[chartData.label] = element[Object.keys(element)[1]];
                }
            }
        }));
        this.onLegendClick.emit(object);
    }
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    validateresize() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.wt) ;
            else {
                this.resize();
            }
        }), 0);
    }
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    resize() {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            // this.resizewt = this.chartId.nativeElement.offsetWidth;
            // console.log("", new Date().getTime(), " ", this.resizewt);
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.initializeData();
        this.plotXYAxis();
        this.plotD3Chart();
    }
}
CandlestickComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-waterfall',
                template: `
<div #chartId *ngIf="drillableFlag"  (window:resize)="validateresize()" >
<table *ngIf="data.length > 0" style="width: 100%;" >
  <tr *ngIf = "title.length > 0">
      <td style="font-size: 18px; font-weight: bold; "> {{title}} </td>
  </tr>
  <tr>
      <td>
          <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
          </svg>
      </td>
  </tr>
  <tr *ngIf="legend">
      <td style="display: block; padding: 5px;">
          <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="onCandlestickLegendClick($event)" [data]="legendArray" style="height:100%;">
          </amexio-d3-legend>
      </td>
  </tr>
</table>
<div *ngIf="data.length < 1" class="lmask" style="padding-top:50%">
    </div>
</div>`,
                styles: [``]
            },] },
];
CandlestickComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef },
    { type: DeviceQueryService }
];
CandlestickComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    data: [{ type: Input }],
    tickscount: [{ type: Input, args: ['yaxis-interval',] }],
    showzeroflag: [{ type: Input, args: ['show-zero-values',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    onLegendClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BubbleComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     * @param {?} device
     */
    constructor(myservice, cdf, device) {
        super('bubble');
        this.myservice = myservice;
        this.cdf = cdf;
        this.device = device;
        this.svgheight = 300;
        this.color = "blue";
        this.zoomflag = false;
        this.zoominitiated = false;
        this.keyArray = [];
        this.transformeddata = [];
        this.colors = [];
        this.xaxisArray = [];
        this.xarray = [];
        this.legends = [];
        this.legendarray = [];
        this.resizebtnflag = false;
        this.legendData = [];
        this.minxvalue = 0;
        this.maxxvalue = 0;
        this.bubblechartdata = [];
        this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.wt = this.svgwidth;
        this.data1 = [];
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    resp = response;
                    this.httpresponse = resp;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                }), (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.data = this.getResponseData(resp);
                        this.data1 = this.data;
                        this.xaxisData();
                        this.transformData(this.data1);
                        this.transformdata();
                        this.colorGeneration();
                        this.formLegendData();
                        this.plotBubbleChart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data1 = this.data;
                    this.data = this.getResponseData(this.data);
                    this.xaxisData();
                    this.transformData(this.data);
                    this.transformdata();
                    this.colorGeneration();
                    this.formLegendData();
                    this.plotBubbleChart();
                }), 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                this.httpresponse = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
            }), (/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    //this.data = this.getResponseData(resp);
                    this.drawChart();
                }), 0);
            }));
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.data = this.getResponseData(this.httpresponse);
            this.data1 = this.data;
            this.xaxisData();
            this.transformData(this.data1);
            this.transformdata();
            this.colorGeneration();
            this.formLegendData();
            this.plotBubbleChart();
        }), 0);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.colordata = [];
        this.keyArray = data[0];
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((/**
                 * @param {?} individualvalue
                 * @param {?} keyindex
                 * @return {?}
                 */
                (individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                }));
                this.transformeddata.push(DummyObject);
            }
        }));
        this.data = this.transformeddata;
        this.colordata = this.transformeddata;
    }
    /**
     * @return {?}
     */
    plotBubbleChart() {
        /** @type {?} */
        let colors = this.predefinedcolors;
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE
        }
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        const margin = { top: 20, right: 60, bottom: 50, left: 60 };
        /** @type {?} */
        const width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        const height = this.svgheight - margin.top - margin.bottom;
        /** @type {?} */
        let x;
        /** @type {?} */
        let y;
        x = scaleLinear()
            .rangeRound([0, width]);
        y = scaleLinear()
            .rangeRound([height, 0]);
        /** @type {?} */
        let xAxis = axisBottom(x).ticks(this.xtickscount);
        /** @type {?} */
        let yAxis = axisLeft(y).ticks(this.tickscount);
        this.svg = select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        y.domain([0, max(this.data, (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return d[Object.keys(d)[2]]; }))]);
        x.domain([this.minxvalue, this.maxxvalue]);
        /** @type {?} */
        let rScale = scaleSqrt().rangeRound([6, 30]);
        rScale.domain([min(this.data, (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return d[Object.keys(d)[4]]; })), max(this.data, (/**
             * @param {?} d
             * @param {?} i
             * @return {?}
             */
            (d, i) => { return d[Object.keys(d)[4]]; }))]);
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xAxis)
                    .append("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xAxis)
                    .append("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .style("text-anchor", "start");
            }
        }
        else {
            this.svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        this.svg.append("g")
            .attr("class", "y axis")
            .call(yAxis)
            .append("text")
            .attr("class", "label")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end");
        this.plotLine(this.svg, x, y, height, width);
        this.node = this.svg.selectAll(".dot")
            .data(this.bubblechartdata)
            .enter().append("circle")
            .attr("class", "dot")
            .attr("r", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return rScale(d[Object.keys(d)[4]]); }))
            .attr("cursor", "pointer")
            .attr("cx", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return x(d[Object.keys(d)[1]]);
        }))
            .attr("cy", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return y(d[Object.keys(d)[2]]); }))
            .attr("fill", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return d[Object.keys(d)[5]]; }))
            .attr('opacity', 0.7)
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.html(this.formTooltipData(d))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            // if(!this.zoominitiated) {
            this.bubbleChartClick(d);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
            // }
        }));
        //label
        if (this.labelflag) {
            this.nodelabel = this.svg.selectAll("labels")
                .data(this.bubblechartdata)
                .enter().append("text")
                .style("font-weight", "bold")
                .style("font-size", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return rScale(d[Object.keys(d)[4]]) - 4;
            }))
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (this.labelcolor && this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return x(d[Object.keys(d)[1]]);
            }))
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return y(d[Object.keys(d)[2]]); }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return d[Object.keys(d)[0]];
            }))
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.html(this.formTooltipData(d))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                // if(!this.zoominitiated) {
                this.bubbleChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
                // }
            }));
        }
        //create zoom handler 
        if (this.zoomflag) {
            this.zoominitiated = true;
            /** @type {?} */
            let zoom_handler = zoom()
                .on("zoom", this.zoom_actions.bind(this));
            zoom_handler(this.svg);
        }
    }
    /**
     * @return {?}
     */
    togglebtnflag() {
        this.resizebtnflag = true;
    }
    /**
     * @return {?}
     */
    zoom_actions() {
        this.node.attr("transform", event$1.transform);
        if (this.labelflag) {
            this.nodelabel.attr("transform", event$1.transform);
        }
        this.resizebtnflag = true;
        this.zoominitiated = false;
    }
    /**
     * @return {?}
     */
    resizesvg() {
        // this.svg = null;
        this.svg.selectAll("*").remove();
        this.plotBubbleChart();
        this.resizebtnflag = false;
    }
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    formTooltipData(tooltipData) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(tooltipData)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        return this.toolTipForBar(object);
    }
    // Method on chart click
    /**
     * @param {?} event
     * @return {?}
     */
    bubbleChartClick(event) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(event)) {
            if (key !== 'color') {
                object[key] = value;
            }
        }
        this.chartClick(object);
    }
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    validateresize() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.wt) ;
            else {
                this.resize();
            }
        }), 0);
    }
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    resize() {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotBubbleChart();
    }
    /**
     * @return {?}
     */
    xaxisData() {
        /** @type {?} */
        let array = [];
        this.minxvalue = 0;
        this.maxxvalue = 0;
        this.xaxisArray = [];
        this.xarray = [];
        this.data1.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            array.push(element[1]);
        }));
        for (let i = 1; i < array.length; i++) {
            this.xaxisArray.push(array[i]);
        }
        /** @type {?} */
        let minvalue = Math.floor(min(this.xaxisArray));
        /** @type {?} */
        let maxvalue = Math.ceil(max(this.xaxisArray));
        this.minxvalue = 5 * (Math.floor(Math.abs(minvalue / 5)));
        this.maxxvalue = 5 * (Math.ceil(Math.abs(maxvalue / 5)));
    }
    /**
     * @return {?}
     */
    colorGeneration() {
        this.legendarray = [];
        /** @type {?} */
        let i = 0;
        /** @type {?} */
        let names = this.data1
            .map((/**
         * @param {?} e
         * @return {?}
         */
        e => e[3]))
            .filter((/**
         * @param {?} e
         * @param {?} i
         * @param {?} a
         * @return {?}
         */
        (e, i, a) => a.indexOf(e) === i));
        for (let j = 1; j < names.length; j++) {
            /** @type {?} */
            let value = [];
            /** @type {?} */
            let obj = { "label": "", "color": "", "value": [] };
            this.colordata.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (element[Object.keys(element)[3]] == names[j]) {
                    element['color'] = this.predefinedcolors[i];
                    value.push(element);
                }
            }));
            obj["value"] = value;
            obj["label"] = names[j];
            obj["color"] = this.predefinedcolors[i];
            this.legendarray.push(obj);
            i++;
        }
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendData = [];
        this.legendarray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let legendobject = {};
            legendobject['label'] = element.label;
            legendobject['color'] = element.color;
            this.legendData.push(legendobject);
        }));
    }
    /**
     * @param {?} legendevent
     * @return {?}
     */
    onBubbleLegendClick(legendevent) {
        this.legendarray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let obj = {};
            /** @type {?} */
            let temparr = [];
            if (legendevent.label == element.label) {
                /** @type {?} */
                let arr = element.value;
                arr.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    for (let [key, value] of Object.entries(element)) {
                        if (key !== 'color') {
                            obj[key] = value;
                        }
                    } // for ends
                    temparr.push(obj);
                })); // for each ends
                this.legendClick(temparr);
            }
        }));
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, x, y, height, width) {
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(axisBottom(x).
                tickSize(-this.width).tickFormat('').ticks(this.xtickscount));
        }
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    }
    /**
     * @return {?}
     */
    transformdata() {
        this.bubblechartdata = [];
        /** @type {?} */
        let buubledata = [];
        this.colordata.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        (element, i) => {
            buubledata.push(element[Object.keys(element)[4]]);
        }));
        /** @type {?} */
        let data = buubledata.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => { return b - a; }));
        for (let j = 0; j <= data.length; j++) {
            this.colordata.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (data[j] == element[Object.keys(element)[4]])
                    this.bubblechartdata.push(element);
            }));
        }
    }
}
BubbleComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-bubble',
                template: `<div #chartId *ngIf="drillableFlag" (window:resize)="validateresize()">
    <table *ngIf="data.length > 0" style="width: 100%;">
        <tr>
            <td colspan="2" style="font-size: 18px; font-weight: bold; "> {{title}}
                <span *ngIf="resizebtnflag">
                    <button type="reset" class="fa fa-search-minus" style="cursor: pointer; float:right" (click)="resizesvg()">
                    </button>
                </span>
            </td>
            <td></td>
        </tr>
        <tr>
            <td>
                <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
                </svg>
            </td>
        </tr>
        <tr *ngIf="legend">
            <td style="display: block; padding: 5px;">
                <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="onBubbleLegendClick($event)" [data]="legendData"
                    style="height:100%;"></amexio-d3-legend>
            </td>
        </tr>
    </table>
    <div *ngIf="data.length < 1" class="lmask" style="padding-top:50%">
    </div>
</div>`,
                styles: [``]
            },] },
];
BubbleComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef },
    { type: DeviceQueryService }
];
BubbleComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    color: [{ type: Input, args: ['color',] }],
    zoomflag: [{ type: Input, args: ['zoom-enable',] }],
    tickscount: [{ type: Input, args: ['yaxis-interval',] }],
    xtickscount: [{ type: Input, args: ['xaxis-interval',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AmexioD3TimelineChartComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     * @param {?} device
     */
    constructor(myservice, cdf, device) {
        super('timeline');
        this.myservice = myservice;
        this.cdf = cdf;
        this.device = device;
        this.svgheight = 200;
        this.level = 0;
        this.drillabledatakey = [];
        this.labelcolor = "black";
        this.labelflag = false;
        this.lanes = [];
        this.timelinechartData = [];
        this.drillableFlag = true;
        this.resizeflag = false;
        this.monthlist = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    resp = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                }), (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.data = this.getResponseData(resp);
                        this.transformTODate(this.data);
                        this.transformData(this.urldata);
                        this.plotChart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(this.data);
                    this.transformData(this.data);
                    this.plotChart();
                }), 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                resp = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
            }), (/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(resp);
                    this.drawChart();
                }), 0);
            }));
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.transformTODate(this.data);
            this.transformData(this.urldata);
            this.plotChart();
        }), 0);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    plotChart() {
        /** @type {?} */
        let laneLength = this.lanes.length;
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        let m = [20, 25, 15, 120];
        /** @type {?} */
        let //top right bottom left
        width = this.svgwidth - m[1] - m[3];
        /** @type {?} */
        let height = this.svgheight - m[0] - m[2];
        /** @type {?} */
        let miniHeight = laneLength * 12 + 50;
        /** @type {?} */
        let mainHeight = height - miniHeight - 50;
        /** @type {?} */
        let mindate;
        /** @type {?} */
        let maxdate;
        /** @type {?} */
        let barheight = 20;
        if (this.httpurl && this.httpmethod) {
            mindate = this.urldata[0][1].getFullYear(),
                maxdate = this.urldata[this.urldata.length - 1][2].getFullYear();
        }
        else {
            mindate = this.data[0][1].getFullYear(),
                maxdate = this.data[this.data.length - 1][2].getFullYear();
        }
        /** @type {?} */
        let x = scaleTime()
            .domain([this.mindate, this.maxdate])
            .range([0, width]);
        /** @type {?} */
        let x1 = scaleLinear()
            .domain([mindate, maxdate])
            .range([m[3], width + m[3]]);
        /** @type {?} */
        let y1 = scaleLinear()
            .domain([0, laneLength])
            .range([0, miniHeight]);
        this.svg = select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
            .attr("width", width + m[1] + m[3])
            .attr("height", height + m[0] + m[2]);
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x1).ticks(this.xtickscount)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x1).ticks(this.xtickscount));
            }
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(axisBottom(x1).ticks(this.xtickscount)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        /** @type {?} */
        let mini = this.svg.append("g")
            .attr("transform", "translate(" + m[3] + "," + (mainHeight + m[0]) + ")")
            .attr("width", width)
            .attr("height", mainHeight)
            .attr("class", "mini");
        //mini lanes and texts
        mini.append("g").selectAll(".laneLines")
            .data(this.timelinechartData)
            .enter().append("line")
            .attr("y1", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return y1(d.lane); }))
            .attr("x2", width)
            .attr("y2", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return y1(d.lane); }))
            .attr("stroke", "lightgray");
        mini.append("g").selectAll(".laneText")
            .data(this.lanes)
            .enter().append("text")
            .text((/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return d; }))
            .attr("x", -m[1])
            .attr("y", (/**
         * @param {?} d
         * @param {?} i
         * @return {?}
         */
        (d, i) => { return y1(i + .5); }))
            .attr("dy", ".5ex")
            .attr("text-anchor", "end")
            .attr("class", "laneText");
        //mini item rects
        mini.append("g").selectAll("miniItems")
            .data(this.timelinechartData)
            .enter().append("rect")
            .attr("class", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return "miniItem" + d.lane; }))
            .attr("fill", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        (d, index) => { return this.predefinedcolors[index]; }))
            .attr("x", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return x(d.start); }))
            .attr("y", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return (y1(d.lane + .5) - 5); }))
            .attr("width", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return Math.abs(x(d.end) - x(d.start));
        }))
            .attr("height", barheight)
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.html(this.formTooltipData(d)
            //  this.toolTipForBar(d)
            // this.toolTipContent(d)
            )
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            this.timelineChartClick(d);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
        }));
        /** @type {?} */
        let barwidth;
        //mini labels
        /** @type {?} */
        let monthlist1 = this.monthlist;
        if (this.labelflag) {
            mini.append("g").selectAll(".miniLabels")
                .data(this.timelinechartData)
                .enter().append("text")
                .style("font-weight", "bold")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .style("font-size", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                barwidth = Math.min(Math.abs(x(d.end) - x(d.start)));
                return barwidth / 20 + "px";
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (d.id) {
                    /** @type {?} */
                    let startfullyear = d.start.getFullYear();
                    /** @type {?} */
                    let startMonth = monthlist1[d.start.getMonth()];
                    /** @type {?} */
                    let endfullyear = d.end.getFullYear();
                    /** @type {?} */
                    let endMonth = monthlist1[d.end.getMonth()];
                    /** @type {?} */
                    let date = startMonth + " " + startfullyear + "-" + endMonth + " " + endfullyear;
                    return date;
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return x(d.start);
            }))
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return y1(d.lane + .5); }))
                .attr("dy", "1.2ex")
                .attr("dx", "9ex")
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.html(this.formTooltipData(d)
                //  this.toolTipForBar(d)
                // this.toolTipContent(d)
                )
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.timelineChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
        }
    }
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    formTooltipData(tooltipData) {
        /** @type {?} */
        let object = {};
        /** @type {?} */
        let mlist = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
        /** @type {?} */
        let label1 = "Duration";
        /** @type {?} */
        let label2 = "Name";
        /** @type {?} */
        let startfullyear = tooltipData.start.getFullYear();
        /** @type {?} */
        let startMonth = mlist[tooltipData.start.getMonth()];
        /** @type {?} */
        let endfullyear = tooltipData.end.getFullYear();
        /** @type {?} */
        let endMonth = mlist[tooltipData.end.getMonth()];
        /** @type {?} */
        let date = startMonth + " " + startfullyear + "-" + endMonth + " " + endfullyear;
        object[label2 + ":"] = tooltipData.id;
        object[label1 + ":"] = date;
        return this.toolTipForBar(object);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformTODate(data) {
        this.urldata = [];
        data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let dataobj = [];
            /** @type {?} */
            let startdate = new Date(element[1]);
            /** @type {?} */
            let enddate = new Date(element[2]);
            dataobj.push(element[0]);
            dataobj.push(startdate);
            dataobj.push(enddate);
            this.urldata.push(dataobj);
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.lanes = [];
        this.timelinechartData = [];
        this.legends = [];
        /** @type {?} */
        let datalength = data.length - 1;
        /** @type {?} */
        let length = data.length;
        this.mindate = data[0][1];
        this.maxdate = data[datalength][2];
        /** @type {?} */
        let mlist = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
        data.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        (element, i) => {
            /** @type {?} */
            let dataObj = { "lane": "", "id": "", "start": "", "end": "" };
            this.lanes.push(element[0]);
            dataObj["lane"] = i;
            dataObj["id"] = element[0];
            dataObj["start"] = element[1];
            dataObj["end"] = element[2];
            this.timelinechartData.push(dataObj);
        }));
        this.timelinechartData.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        (element, i) => {
            /** @type {?} */
            let startfullyear = element.start.getFullYear();
            /** @type {?} */
            let startMonth = mlist[element.start.getMonth()];
            /** @type {?} */
            let endfullyear = element.end.getFullYear();
            /** @type {?} */
            let endMonth = mlist[element.end.getMonth()];
            /** @type {?} */
            let date = startMonth + " " + startfullyear + "-" + endMonth + " " + endfullyear;
            /** @type {?} */
            let object = { 'label': this.lanes[i], 'color': this.predefinedcolors[i], 'Duration': date };
            this.legends.push(object);
        }));
        /** @type {?} */
        let Obj = { "lane": "", "id": "", "start": "", "end": "" };
        Obj["lane"] = length;
        this.timelinechartData.push(Obj);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    timelineChartClick(event) {
        /** @type {?} */
        let object = {};
        /** @type {?} */
        let mlist = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
        /** @type {?} */
        let startfullyear = event.start.getFullYear();
        /** @type {?} */
        let startMonth = mlist[event.start.getMonth()];
        /** @type {?} */
        let endfullyear = event.end.getFullYear();
        /** @type {?} */
        let endMonth = mlist[event.end.getMonth()];
        /** @type {?} */
        let date = startMonth + " " + startfullyear + "-" + endMonth + " " + endfullyear;
        object["Name"] = event.id;
        object["Duration"] = date;
        this.chartClick(object);
    }
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    validateresize() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.wt) ;
            else {
                this.resize();
            }
        }), 0);
    }
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    resize() {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            // this.resizewt = this.chartId.nativeElement.offsetWidth;
            // console.log("", new Date().getTime(), " ", this.resizewt);
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotChart();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    timelinelegendClick(event) {
        /** @type {?} */
        let obj = {};
        for (let [key, value] of Object.entries(event)) {
            if (key !== 'color') {
                obj[key] = value;
            }
        }
        this.onLegendClick.emit(obj);
    }
}
AmexioD3TimelineChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-timeline',
                template: `
<div  #chartId *ngIf="drillableFlag"  (window:resize)="validateresize()" >
    <table style="width: 100%;" position=" relative">
        <tr *ngIf = "title.length > 0">
            <td style="font-size: 18px; font-weight: bold; "> {{title}} </td>
        </tr>
        <tr>
            <td>
                <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId" 
              >
                </svg>
            </td>
        </tr>
        <tr *ngIf="legend">
            <td style="display: block; padding: 5px;">
                <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="timelinelegendClick($event)" [data]="legends" style="height:100%;">
                </amexio-d3-legend>
            </td>
        </tr>
    </table>
    </div>`
            },] },
];
AmexioD3TimelineChartComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef },
    { type: DeviceQueryService }
];
AmexioD3TimelineChartComponent.propDecorators = {
    data: [{ type: Input, args: ['data',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    labelflag: [{ type: Input, args: ['label',] }],
    xtickscount: [{ type: Input, args: ['xaxis-interval',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ViewDrillableComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        return this.getComponentData();
    }
    /**
     * @return {?}
     */
    getComponentData() {
        this.chartInputArray = [];
        this.barchartinput = this.queryBarchartinput.toArray();
        this.groupbarchartinput = this.QueryGroupbarchartinput.toArray();
        this.linechartinput = this.QueryLinechartinput.toArray();
        this.donutchartinput = this.QueryDonutchartinput.toArray();
        this.piechartinput = this.QueryPiechartinput.toArray();
        this.barstackchartinput = this.QueryBarStackchartinput.toArray();
        this.combochartinput = this.QueryCombochartinput.toArray();
        this.histogramchartinput = this.QueryHistogramchartinput.toArray();
        this.scatterchartinput = this.QuerySatterchartinput.toArray();
        this.multiareachartinput = this.QueryMultiareachartinput.toArray();
        this.candlestickchartinput = this.QueryCandlestickchartinput.toArray();
        this.bubblechartinput = this.QueryBubblechartinput.toArray();
        this.timelinechartinput = this.QueryTimechartinput.toArray();
        this.chartInputArray = this.chartInputArray.concat(this.barchartinput, this.groupbarchartinput, this.linechartinput, this.donutchartinput, this.piechartinput, this.barstackchartinput, this.combochartinput, this.histogramchartinput, this.scatterchartinput, this.multiareachartinput, this.candlestickchartinput, this.bubblechartinput, this.timelinechartinput);
        return this.chartInputArray;
    }
}
ViewDrillableComponent.propDecorators = {
    queryBarchartinput: [{ type: ContentChildren, args: [AmexioD3BarChartComponent, { descendants: true },] }],
    QueryGroupbarchartinput: [{ type: ContentChildren, args: [GroupbarComponent, { descendants: true },] }],
    QueryLinechartinput: [{ type: ContentChildren, args: [AmexioD3LineComponent, { descendants: true },] }],
    QueryPiechartinput: [{ type: ContentChildren, args: [AmexioD3PieChartComponent, { descendants: true },] }],
    QueryDonutchartinput: [{ type: ContentChildren, args: [AmexioD3DounutChartComponent, { descendants: true },] }],
    QueryBarStackchartinput: [{ type: ContentChildren, args: [BarstackComponent, { descendants: true },] }],
    QueryCombochartinput: [{ type: ContentChildren, args: [CombochartComponent, { descendants: true },] }],
    QueryHistogramchartinput: [{ type: ContentChildren, args: [HistogramComponent, { descendants: true },] }],
    QuerySatterchartinput: [{ type: ContentChildren, args: [ScatterchartComponent, { descendants: true },] }],
    QueryMultiareachartinput: [{ type: ContentChildren, args: [MultiareaComponent, { descendants: true },] }],
    QueryCandlestickchartinput: [{ type: ContentChildren, args: [CandlestickComponent, { descendants: true },] }],
    QueryBubblechartinput: [{ type: ContentChildren, args: [BubbleComponent, { descendants: true },] }],
    QueryTimechartinput: [{ type: ContentChildren, args: [AmexioD3TimelineChartComponent, { descendants: true },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DrillableComponent extends ViewDrillableComponent {
    constructor() {
        super();
        this.mouseLocation = { left: 0, top: 0 };
        this.componentcounter = 1;
        this.disableFlag = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ComponentDataArray = this.getComponentData();
        this.getData(this.ComponentDataArray);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    getData(data) {
        data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (element.level !== 1) {
                element.drillableFlag = false;
                element.drillableEvent.subscribe((/**
                 * @param {?} eventdata
                 * @return {?}
                 */
                (eventdata) => {
                    this.hideUI(eventdata);
                    this.sameLevelChart(eventdata);
                    this.ShowUI(eventdata);
                }));
            }
            else {
                this.disableFlag = false;
                element.drillableEvent.subscribe((/**
                 * @param {?} eventdata
                 * @return {?}
                 */
                (eventdata) => {
                    this.hideUI(eventdata);
                    this.sameLevelChart(eventdata);
                    this.ShowUI(eventdata);
                }));
            }
        }));
    }
    /**
     * @param {?} eventRef
     * @return {?}
     */
    hideUI(eventRef) {
        this.ComponentDataArray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (element.level == eventRef.ref.level) {
                eventRef.ref.drillableFlag = false;
            }
        }));
    }
    /**
     * @param {?} eventRef
     * @return {?}
     */
    ShowUI(eventRef) {
        this.eventData = [];
        this.eventData = eventRef;
        this.ComponentDataArray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (eventRef.ref.target == element.level) {
                if (this.arrayofsameLevel.length == 1) {
                    this.disableFlag = true;
                    element.drillableFlag = true;
                    element.fetchData(eventRef.node);
                    this.componentcounter = element.level;
                }
                else {
                    this.contextmenuFlag = true;
                    this.mouseLocation.left = eventRef.event.clientX;
                    this.mouseLocation.top = eventRef.event.clientY;
                    this.contextStyle = this.getContextMenuStyle();
                }
            }
        }));
        if (this.componentcounter == eventRef.ref.level) {
            eventRef.ref.drillableFlag = true;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    previouschartClick(event) {
        /** @type {?} */
        let chartLevel = this.componentcounter - 1;
        this.ComponentDataArray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (chartLevel == element.level) {
                element.drillableFlag = true;
                element.drawChart();
            }
            else if (this.componentcounter == element.level) {
                element.drillableFlag = false;
            }
        }));
        if (this.componentcounter == 2) {
            this.disableFlag = false;
        }
        this.componentcounter = chartLevel;
    }
    /**
     * @param {?} eventRef
     * @return {?}
     */
    sameLevelChart(eventRef) {
        this.arrayofsameLevel = [];
        this.ComponentDataArray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (eventRef.ref.target == element.level) {
                this.arrayofsameLevel = this.arrayofsameLevel.concat(element);
            }
        }));
    }
    //Method Creates style if two same targets found.
    /**
     * @return {?}
     */
    getContextMenuStyle() {
        return {
            'cursor': 'default',
            'position': 'fixed',
            'display': this.contextmenuFlag ? 'block' : 'none',
            'left': this.mouseLocation.left + 'px',
            'top': this.mouseLocation.top + 'px',
            'box-shadow': '1px 1px 2px #000000',
            'width': '15%',
        };
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    getListPosition(elementRef) {
        /** @type {?} */
        const height = 240;
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onContextNodeClick(event) {
        this.componentcounter = 0;
        this.contextmenuFlag = false;
        this.eventData.ref.drillableFlag = false;
        this.disableFlag = true;
        event.drillableFlag = true;
        event.fetchData(this.eventData.node);
        this.componentcounter = event.level;
        if (this.componentcounter == this.eventData.ref.level) {
            this.eventData.ref.drillableFlag = true;
        }
    }
    /**
     * @return {?}
     */
    onCloseClick() {
        this.contextmenuFlag = false;
    }
}
DrillableComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-drillable',
                template: `
<div > 
    <ng-container *ngIf="disableFlag">
            <button type="button" class="button"
             (click)="previouschartClick($event)">
             <i class="fa fa-arrow-left"></i> 
             
            </button>
</ng-container>

<ng-content></ng-content>

</div>

<span [ngStyle]="contextStyle" >
  <ul *ngIf="contextmenuFlag" class="close-thik" class="context-menu-list"  >
    <span (click)="onCloseClick()" class="close"><i class="fa fa-close"></i></span>
  <li (click)="onContextNodeClick(itemConfig)" class="context-menu-list-items" 
  *ngFor="let itemConfig of arrayofsameLevel">
  <em [ngStyle]="{'padding-left': itemConfig.icon ? '5px':'19px'}"></em>
  <span style="white-space: nowrap;display: inline ; padding-left:5px">{{itemConfig.title}}
  </span>
  </li>
  </ul>
  </span>
  `,
                styles: [`.button{position:relative;border:1px solid #555;font-weight:400;color:#000;padding:.5rem 1rem;text-align:center;transition-duration:.4s;text-decoration:none;overflow:hidden;cursor:pointer;border-radius:3px}.button:after{content:"";background:#000;display:block;position:absolute;padding-top:300%;padding-left:350%;margin-left:-20px!important;margin-top:-120%;opacity:0;transition:.8s}.button:active:after{padding:0;margin:0;opacity:1;transition:none}.context-menu-list{display:block;position:absolute;flex-direction:column;min-width:180px;cursor:pointer;max-height:150px;z-index:1;padding:10px 0;overflow-y:auto;background-color:#fff!important;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.context-menu-list .context-menu-list-items{text-decoration:none;font-size:14px!important;padding:5px;display:block}.close{float:right;padding-right:8px;cursor:pointer}`]
            },] },
];
DrillableComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const D3_COMPONENTS = [
    AmexioD3Legend,
    AmexioD3DounutChartComponent,
    AmexioD3BarChartComponent,
    AmexioD3PieChartComponent,
    AmexioD3LineComponent,
    BarstackComponent,
    GroupbarComponent,
    CombochartComponent,
    DrillableComponent,
    HistogramComponent,
    MultiareaComponent,
    ScatterchartComponent,
    CandlestickComponent,
    BubbleComponent,
    AmexioD3TimelineChartComponent
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AmexioChartD3Module {
}
AmexioChartD3Module.decorators = [
    { type: NgModule, args: [{
                imports: [
                    FormsModule,
                    CommonModule
                ],
                declarations: D3_COMPONENTS,
                providers: [DeviceQueryService],
                exports: D3_COMPONENTS
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AmexioChartD3Module, DeviceQueryService, AmexioD3DounutChartComponent, AmexioD3PieChartComponent, AmexioD3BarChartComponent, AmexioD3LineComponent, BarstackComponent, GroupbarComponent, D3_COMPONENTS as ɵa, AmexioD3BaseChartComponent as ɵc, ViewDrillableComponent as ɵh, BubbleComponent as ɵm, CandlestickComponent as ɵl, CombochartComponent as ɵf, DrillableComponent as ɵg, HistogramComponent as ɵi, AmexioD3Legend as ɵb, AmexioD3BaseLineComponent as ɵe, MultiareaComponent as ɵk, ScatterchartComponent as ɵj, CommanDataService as ɵd, AmexioD3TimelineChartComponent as ɵn };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,