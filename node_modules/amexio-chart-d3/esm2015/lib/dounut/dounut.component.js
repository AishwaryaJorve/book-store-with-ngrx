/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, ChangeDetectorRef } from '@angular/core';
import * as d3 from 'd3';
import { AmexioD3BaseChartComponent } from '../base/base.component';
import { CommanDataService } from '../services/comman.data.service';
import { DeviceQueryService } from '../services/device.query.service';
export class AmexioD3DounutChartComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     * @param {?} device
     */
    constructor(myservice, cdf, device) {
        super('DONUTCHART');
        this.myservice = myservice;
        this.cdf = cdf;
        this.device = device;
        this.pie = false;
        this.svgwidth = 300;
        this.svgheight = 300;
        this.desktoplegend = false;
        this.mobilelegend = false;
        this.keyArray = [];
        this.transformeddata = [];
        this.legendArray = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    resp = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                }), (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.data = this.getResponseData(resp);
                        this.drawChart();
                        // this.data = this.getResponseData(resp);
                        this.transformData(this.data);
                        this.initializeData();
                        this.plotD3Chart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(this.data);
                    this.transformData(this.data);
                    this.initializeData();
                    this.plotD3Chart();
                }), 0);
            }
        }
        else {
            this.fetchData(this.drillData);
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                resp = response;
                this.response = resp;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
            }), (/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(resp);
                    this.drawChart();
                }), 0);
            }));
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.drillableFlag = true;
            this.initializeData();
            this.plotD3Chart();
        }), 0);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        this.formLegendData();
        //this.transformData(this.data);
        //  this.data = this.transformeddata;
        /** @type {?} */
        let outerRadius = 0;
        /** @type {?} */
        let innerRadius = 0;
        outerRadius = this.svgwidth / 2;
        innerRadius = this.svgwidth / 4;
        if (this.pie) {
            innerRadius = 0;
        }
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        const arc = d3.arc()
            .outerRadius(outerRadius)
            .innerRadius(innerRadius);
        /** @type {?} */
        const pie = d3.pie()
            .value((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return d[Object.keys(d)[1]];
            //  return d.value
        }));
        this.svg = d3.select("#" + this.componentId)
            .append('g')
            .attr('transform', 'translate(' + this.svgwidth / 2 + ',' + this.svgheight / 2 + ')')
            .selectAll('path')
            .data(pie(this.data))
            .enter();
        if (this.device.IsDesktop() == true) {
            this.desktoplegend = true;
            this.mobilelegend = false;
        }
        // else{
        //        if(this.device.IsPhone()==true && this.device.IsTablet()==true)
        //        {
        //             this.desktoplegend=false;
        //             this.mobilelegend=true;
        //        }
        // }
        /** @type {?} */
        const path = this.svg.append('path')
            .attr('d', arc)
            .attr('fill', (/**
         * @param {?} d
         * @param {?} i
         * @return {?}
         */
        (d, i) => {
            if (d.data.color) {
                return d.data.color;
            }
            else {
                return "black";
            }
            //  return (d && d.data && d.data.color) ? d.data.color : "black"
        }))
            .attr('cursor', 'pointer')
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.html(this.formTooltipData(d.data)
            //  this.formLegendData(d.data)
            // this.toolTipContent(d.data)
            )
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            this.DonutChartClick(d.data);
            this.fordrillableClick(this, d.data, event);
            return tooltip.style("visibility", "hidden");
            //this.chartClick(d.data);
        }));
        if (this.labelflag) {
            /** @type {?} */
            const text = this.svg.append("text")
                .transition()
                .duration(200)
                .attr("transform", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return "translate(" + arc.centroid(d) + ")";
            }))
                .attr("text-anchor", "middle")
                .text((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return d.data[Object.keys(d.data)[1]];
                //return d.data.value;
            }))
                .style('fill', (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (this.labelcolor && this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
                // return (d && d.data && d.data.textcolor) ? d.data.textcolor : "black";
            }))
                .style('font-size', '12px');
        }
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendArray = [];
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let legendobject = {};
            legendobject['label'] = element[Object.keys(element)[0]];
            legendobject['value'] = element[Object.keys(element)[1]];
            legendobject['color'] = element.color;
            this.legendArray.push(legendobject);
        }));
    }
    /**
     * @param {?} legendevent
     * @return {?}
     */
    onDonutLegendClick(legendevent) {
        /** @type {?} */
        let obj = {};
        //  obj['label'] = legendevent.label;
        //  obj['value'] = legendevent.value 
        obj[this.keyArray[0]] = legendevent.label;
        obj[this.keyArray[1]] = legendevent.value;
        //delete event.color;
        this.legendClick(obj);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.keyArray = data[0];
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((/**
                 * @param {?} individualvalue
                 * @param {?} keyindex
                 * @return {?}
                 */
                (individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                })); //inner for loop ends
                this.transformeddata.push(DummyObject);
            } //if ends
        })); //outer for loop ends
        this.data = this.transformeddata;
    }
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    formTooltipData(tooltipData) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(tooltipData)) {
            if (key != 'color' && key != 'textcolor') {
                object[key] = value;
            }
        }
        return this.toolTipForBar(object);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    DonutChartClick(event) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(event)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        this.chartClick(object);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    resize(data) {
        this.desktoplegend = false;
        this.mobilelegend = true;
        this.plotD3Chart();
    }
}
AmexioD3DounutChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-donut',
                template: `<div *ngIf="drillableFlag" #chartId (window:resize)="resize($event)">
    <div *ngIf="data.length > 0">

  
    <div colspan="2" style="font-size: 18px; font-weight: bold; ">
        {{title}}
    </div>
    <div [ngClass]="'donutcss'">
        <svg preserveAspectRatio="xMinYMin meet" viewBox="0 0 300 300" [attr.height]="height" [attr.width]="width" [attr.id]="componentId">
        </svg>
        <div>

            <div style="display: block; padding: 1%;">
                <div *ngIf="desktoplegend">
                    <amexio-d3-legend *ngIf="legend" (onClick)="onDonutLegendClick($event)" [data]="legendArray" style="height:100%;"></amexio-d3-legend>
                </div>
                <div *ngIf="mobilelegend">
                    <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="onDonutLegendClick($event)" [data]="legendArray" style="height:100%;"></amexio-d3-legend>
                </div>
            </div>
        </div>
        <!--  -->
        <div *ngIf="data.length < 1" class="lmask" style="padding-top:50%">
            </div>

        </div>`,
                styles: [`.donutcss{display:flex;flex-direction:row}@media screen and (max-width:1024px){.donutcss{display:flex;flex-direction:column}}`]
            },] },
];
AmexioD3DounutChartComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef },
    { type: DeviceQueryService }
];
AmexioD3DounutChartComponent.propDecorators = {
    pie: [{ type: Input, args: ['pie',] }],
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    drillid: [{ type: ViewChild, args: ['drillid',] }],
    drillData: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.pie;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.svgwidth;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.svgheight;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.chartId;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.divid;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.drillid;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.desktoplegend;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.mobilelegend;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.drillData;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.keyArray;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.transformeddata;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.legendArray;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.response;
    /** @type {?} */
    AmexioD3DounutChartComponent.prototype.svg;
    /**
     * @type {?}
     * @private
     */
    AmexioD3DounutChartComponent.prototype.myservice;
    /**
     * @type {?}
     * @private
     */
    AmexioD3DounutChartComponent.prototype.cdf;
    /**
     * @type {?}
     * @private
     */
    AmexioD3DounutChartComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,