/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, ElementRef, ChangeDetectorRef, } from "@angular/core";
import { AmexioD3BaseChartComponent } from "../base/base.component";
import { CommanDataService } from '../services/comman.data.service';
import * as d3 from 'd3';
import { DeviceQueryService } from '../services/device.query.service';
var CombochartComponent = /** @class */ (function (_super) {
    tslib_1.__extends(CombochartComponent, _super);
    function CombochartComponent(myservice, cdf, device) {
        var _this = _super.call(this, 'combochart') || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.device = device;
        _this.svgheight = 300;
        _this.lineColor = "black";
        _this.label = false;
        _this.horizontal = false;
        _this.barwidth = 0;
        //   @Input('line-data-index') lineInput: any;
        _this.lineInput = [];
        _this.barInput = [];
        _this.showzeroflag = true;
        _this.simpleComboFlag = false;
        _this.completeconverteddata = [];
        _this.simpleCombodata = [];
        _this.groupbarchartArray = [];
        _this.highercolorindex = 0;
        _this.colorflag = false;
        _this.keyArray = [];
        _this.transformeddata = [];
        _this.legendArray = [];
        _this.legends = [];
        _this.LineArray = [];
        _this.outputData = [];
        _this.higherdot1colorindex = 0;
        return _this;
    }
    /**
     * @return {?}
     */
    CombochartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    resp_1 = response;
                    _this.httpresponse = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                }), (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.data = _this.getResponseData(resp_1);
                        _this.transformData();
                        _this.initializeData();
                        _this.plotD3Chart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.transformData();
                    _this.initializeData();
                    _this.plotD3Chart();
                }), 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CombochartComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                resp = response;
                _this.httpresponse = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
            }), (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    // this.data = this.getResponseData(resp);
                    _this.drawChart();
                }), 0);
            }));
        }
    };
    /**
     * @return {?}
     */
    CombochartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.data = _this.getResponseData(_this.httpresponse);
            _this.transformData();
            _this.initializeData();
            _this.plotD3Chart();
        }), 0);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    CombochartComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = tslib_1.__values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @return {?}
     */
    CombochartComponent.prototype.transformData = /**
     * @return {?}
     */
    function () {
        this.formDatastructure();
        this.tranasforsimplejson();
    };
    /**
     * @return {?}
     */
    CombochartComponent.prototype.formDatastructure = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // for line
        //call createjson() for complete data for line
        this.lineflag = true;
        this.createjson(this.data);
        //validate scenarios
        //validate scenario1: bar + line + data
        if ((this.barInput.length > 0) && (this.lineInput.length > 0) &&
            (this.data[0].length > 2)) {
            this.sc1 = true;
            this.createData1(this.barInput, this.data);
        }
        else if ((this.lineInput.length > 0) &&
            //##get it checked
            (this.data[0].length > 1)) {
            this.sc2 = true;
            //decide whether only line will be plot or bar also
            //chk if data[0] has any extra column leaving lineinput array
            /** @type {?} */
            var barflag = void 0;
            //if so set sc2barflag
            this.data[0].forEach((/**
             * @param {?} column
             * @return {?}
             */
            function (column) {
                _this.lineInput.forEach((/**
                 * @param {?} linename
                 * @return {?}
                 */
                function (linename) {
                    if (column !== linename) {
                        _this.sc2barflag = true;
                        // u can plot bar now
                    }
                }));
            }));
            this.createData1(null, this.data);
            //chk if sc2barflag is set or reset
            if (this.sc2barflag == true) {
                //plot bar  + line
            }
            else {
                // plot only line
            }
        } //else if of sc2 ends
        else if ((this.barInput.length > 0) && (this.data[0].length > 1)) {
            this.sc3 = true;
            this.createData1(this.barInput, this.data);
        }
        else if ((this.barInput.length < 1) && (this.lineInput.length < 1) && this.data[0].length > 1) {
            this.sc4 = true;
            this.createData1(null, this.data);
        }
    };
    /**
     * @param {?} inpdata
     * @param {?} fulldata
     * @return {?}
     */
    CombochartComponent.prototype.createData1 = /**
     * @param {?} inpdata
     * @param {?} fulldata
     * @return {?}
     */
    function (inpdata, fulldata) {
        var _this = this;
        /** @type {?} */
        var linearr = [];
        this.lineInput.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            linearr.push(element.column);
        }));
        this.firstrow = this.data[0];
        /** @type {?} */
        var dummyArray = [];
        dummyArray.push(0);
        fulldata.forEach((/**
         * @param {?} record
         * @param {?} index
         * @return {?}
         */
        function (record, index) {
            if (index === 0) {
                // THIS LOGIC IS USED FOR FINDING INDEXS AND ADD INTO dummyArray ARRAY
                record.forEach((/**
                 * @param {?} innerObject
                 * @param {?} innerIndex
                 * @return {?}
                 */
                function (innerObject, innerIndex) {
                    //validates scenario1 and 3
                    if (_this.sc1 == true || _this.sc3 == true) {
                        _this.barInput.forEach((/**
                         * @param {?} elementOfInputData
                         * @return {?}
                         */
                        function (elementOfInputData) {
                            //aja
                            if (innerObject === elementOfInputData.column) {
                                //dummyarray has index stack
                                dummyArray.push(innerIndex);
                            }
                        }));
                    } //sc1 and sc3 validation done
                    //validates scenario 2
                    if (_this.sc2 == true) {
                        if (_this.sc2barflag == true) {
                            _this.lineInput.forEach((/**
                             * @param {?} elementOfLineData
                             * @return {?}
                             */
                            function (elementOfLineData) {
                                if ((innerObject !== elementOfLineData.column) && (innerIndex !== 0)) {
                                    //dummyarray has index stack
                                    // dummyArray.forEach(dummyelement => {
                                    //   if(dummyelement !== innerIndex) {
                                    // if ( (linearr.includes(innerObject) == false)) {
                                    linearr.includes(innerObject);
                                    if (linearr.includes(innerObject) == false) {
                                        if (dummyArray.includes(innerIndex)) {
                                        }
                                        else {
                                            dummyArray.push(innerIndex);
                                            return;
                                        }
                                    } // }
                                    //   }
                                    // });
                                }
                            }));
                        }
                    }
                }));
                //validates scenario 4
                if (_this.sc4 == true) {
                    // chk if barflag is set
                    /** @type {?} */
                    var columns = _this.data[0].length;
                    if (columns > 1) {
                        dummyArray.push(1);
                    }
                }
                // dummyArray.push(0);
                /** @type {?} */
                var firstArray_1 = [];
                // FOR FIRST RECORD
                dummyArray.forEach((/**
                 * @param {?} object
                 * @param {?} dummyIndex
                 * @return {?}
                 */
                function (object, dummyIndex) {
                    firstArray_1.push(record[object]);
                }));
                _this.outputData.push(firstArray_1);
            }
            else {
                /** @type {?} */
                var newData_1 = [];
                record.forEach((/**
                 * @param {?} innerObject
                 * @param {?} innerIndex
                 * @return {?}
                 */
                function (innerObject, innerIndex) {
                    dummyArray.forEach((/**
                     * @param {?} object
                     * @param {?} dummyIndex
                     * @return {?}
                     */
                    function (object, dummyIndex) {
                        if (innerIndex === object) {
                            newData_1.push(innerObject);
                        }
                    }));
                }));
                _this.outputData.push(newData_1);
            }
        }));
        this.createjson(this.outputData);
        // this.formLegendData(this.outputData);
    };
    /**
     * @param {?} arraydata
     * @return {?}
     */
    CombochartComponent.prototype.createjson = /**
     * @param {?} arraydata
     * @return {?}
     */
    function (arraydata) {
        /** @type {?} */
        var groupChartObj = { "labels": "", values: [] };
        this.groupbarchartArray = [];
        /** @type {?} */
        var firstRowOfData = arraydata[0];
        this.xaxisData = this.data[0][0];
        for (var i = 1; i < arraydata.length; i++) {
            /** @type {?} */
            var multiSeriesArray = [];
            /** @type {?} */
            var valueOfJ = void 0;
            for (var j = 1; j < arraydata[i].length; j++) {
                valueOfJ = arraydata[i][0];
                /** @type {?} */
                var singleBarObj = {};
                singleBarObj["value"] = arraydata[i][j];
                singleBarObj["label"] = firstRowOfData[j];
                singleBarObj["xaxis"] = arraydata[i][0];
                singleBarObj;
                multiSeriesArray.push(singleBarObj);
            }
            if (multiSeriesArray.length) {
                groupChartObj["values"] = multiSeriesArray;
                /** @type {?} */
                var newLabelsValues = valueOfJ;
                /** @type {?} */
                var newGroupDataObj = Object.assign({}, groupChartObj);
                newGroupDataObj['labels'] = newLabelsValues + '';
                this.groupbarchartArray.push(newGroupDataObj);
            }
        }
        if (this.lineflag) {
            this.groupbarchartArray;
            this.LineArray = this.groupbarchartArray;
        }
        else {
            this.groupbarchartArray = [];
            /** @type {?} */
            var firstRowOfData_1 = arraydata[0];
            // this.xaxisData = this.data[0][0];
            for (var i = 1; i < arraydata.length; i++) {
                /** @type {?} */
                var multiSeriesArray = [];
                /** @type {?} */
                var valueOfJ = void 0;
                for (var j = 1; j < arraydata[i].length; j++) {
                    valueOfJ = arraydata[i][0];
                    /** @type {?} */
                    var singleBarObj = {};
                    singleBarObj["value"] = arraydata[i][j];
                    singleBarObj["label"] = firstRowOfData_1[j];
                    singleBarObj["xaxis"] = arraydata[i][0];
                    singleBarObj;
                    multiSeriesArray.push(singleBarObj);
                }
                if (multiSeriesArray.length) {
                    groupChartObj["values"] = multiSeriesArray;
                    /** @type {?} */
                    var newLabelsValues = valueOfJ;
                    /** @type {?} */
                    var newGroupDataObj = Object.assign({}, groupChartObj);
                    newGroupDataObj['labels'] = newLabelsValues + '';
                    this.groupbarchartArray.push(newGroupDataObj);
                }
            }
            this.groupbarchartArray;
        }
    };
    /**
     * @return {?}
     */
    CombochartComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        //plot multiseries chart
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var colors = this.predefinedcolors;
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        var margin = { top: 20, right: 20, bottom: 50, left: 40 };
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height = this.svgheight - margin.top - margin.bottom;
        this.svg = d3.select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        var x0 = d3.scaleBand()
            .rangeRound([0, width])
            .padding(0.2);
        /** @type {?} */
        var x1 = d3.scaleBand().padding(0.1);
        /** @type {?} */
        var y = d3.scaleLinear()
            .rangeRound([height, 0]);
        //setting x and y domains
        this.years = this.groupbarchartArray.map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.labels; }));
        /** @type {?} */
        var label = this.groupbarchartArray[0].values.map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.label; }));
        x0.domain(this.years);
        x1.domain(label).rangeRound([0, x0.bandwidth()]);
        y.domain([0, d3.max(this.groupbarchartArray, (/**
             * @param {?} labels
             * @return {?}
             */
            function (labels) { return d3.max(labels.values, (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d.value; })); }))]);
        //dynamic barwidth
        if (this.barwidth > 0) {
            this.barwidth = this.barwidth;
        }
        else {
            this.barwidth = x0.bandwidth;
        }
        // add x axis to svg
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x0)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x0));
            }
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x0)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        //add y axis to svg
        this.svg.append("g")
            .call(d3.axisLeft(y)
            .ticks(this.tickscount));
        this.plotLineForMultiSeries(this.svg, y, height, width);
        //adding bars
        /** @type {?} */
        var slice = this.svg.selectAll(".slice")
            .data(this.groupbarchartArray)
            .enter().append("g")
            .attr("class", "g")
            .attr("transform", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return "translate(" + x0(d.labels) + ",0)"; }));
        slice.selectAll("rect")
            .data((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.values; }))
            .enter().append("rect")
            .attr("width", x1.bandwidth)
            .attr("x", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return x1(d.label);
        }))
            .style("fill", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        function (d, index) {
            _this.higherdot1colorindex = index;
            _this.legendcolorindex = index;
            return colors[index];
        }))
            .attr("y", (/**
         * @param {?} d
         * @param {?} ind
         * @return {?}
         */
        function (d, ind) { return y(d.value); }))
            .attr("height", (/**
         * @param {?} d
         * @param {?} ind
         * @return {?}
         */
        function (d, ind) {
            return height - y(d.value);
        }))
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.html(_this.setKey(d))
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        })).on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.groupbarClick(d);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
        }));
        // -------------------------------------------------------
        //bar label
        // if (this.labelflag) {
        slice.selectAll("text")
            .data((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.values; }))
            .enter().append("text")
            .attr("opacity", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            /** @type {?} */
            var visibility = false;
            if (_this.barInput.length > 0) {
                _this.barInput.forEach((/**
                 * @param {?} barname
                 * @return {?}
                 */
                function (barname) {
                    if ((barname.column == d.label) && (barname.label == true)) {
                        visibility = true;
                        return;
                    }
                }));
                if (visibility) {
                    return 1;
                }
                else {
                    return 0;
                }
            } // outer if 
            else if ((_this.sc4 == true) && (_this.label == true)) {
                return 1;
            }
            else {
                return 0;
            }
        }))
            .attr("width", x1.bandwidth)
            .attr("x", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return x1(d.label) + x1.bandwidth() / 2;
        }))
            .attr("y", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return y(d.value); }))
            .attr("height", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return height - y(0); }))
            .style("font-weight", "bold")
            .style("font-size", "1vw")
            .attr("text-anchor", "middle")
            .attr("fill", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (_this.labelcolor.length > 0) {
                return _this.labelcolor;
            }
            else {
                return "black";
            }
        })) //bar label
            .text((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (_this.showzeroflag) {
                return d.value;
            }
            else if (!_this.showzeroflag) {
                if (d.value > 0) {
                    return d.value;
                }
            }
            // return d.value;
        }))
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.html(_this.setKey(d))
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        })).on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.groupbarClick(d);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
        }));
        // }
        slice.selectAll("rect")
            .attr("y", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return y(d.value);
        }))
            .attr("height", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return height - y(d.value); }));
        // ------------------------------------------------------------------
        //sigle / multi line code starts here
        //code here fr multi line
        /** @type {?} */
        var i;
        // let lineName;
        /** @type {?} */
        var slice1 = this.svg.selectAll(".slice")
            .data(this.transformeddata)
            .enter().append("g")
            .attr("class", "g");
        this.higherdot1colorindex++;
        this.lineInput.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (element.color) {
            }
            else {
                element["color"] = colors[_this.higherdot1colorindex];
                _this.higherdot1colorindex++;
            }
        }));
        //line validation for scenario 1 and 2
        if (this.lineInput.length > 0) {
            var _loop_1 = function () {
                /** @type {?} */
                var colorincrementer = 1;
                /** @type {?} */
                var lineName = this_1.lineInput[i];
                /** @type {?} */
                var valueline = d3.line()
                    .x((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return x0(d[Object.keys(d)[0]]);
                }))
                    .y((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) { return y(d[lineName.column]); }));
                /** @type {?} */
                var shift = margin.left + x1.bandwidth() / 2;
                slice1.append("path")
                    .data([this_1.transformeddata])
                    .attr("fill", "none")
                    .style("stroke", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    if (lineName.color) {
                        return lineName.color;
                    }
                }))
                    .attr("stroke-width", 1.5)
                    .attr("transform", "translate( " + x1.bandwidth() / 2 + ", 0 )")
                    .attr("d", valueline);
                // points1
                /** @type {?} */
                var dotslice = slice1.selectAll("dot")
                    .data(this_1.transformeddata)
                    .enter()
                    .append("circle")
                    .attr("class", "point1")
                    .attr("cursor", "pointer")
                    .style("fill", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    if (lineName.color) {
                        return lineName.color;
                    }
                }))
                    .attr("cx", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return x0(d[Object.keys(d)[0]]);
                }))
                    .attr("cy", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return y(d[lineName.column]);
                }))
                    .attr("r", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) { return 5; }))
                    .attr("transform", "translate( " + x1.bandwidth() / 2 + ", 0 )")
                    .on("mouseover", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.style("visibility", "visible");
                }))
                    .on("mousemove", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.html(_this.formTooltipLineData(d, lineName, false))
                        .style("top", (d3.event.pageY - 10) + "px")
                        .style("left", (d3.event.pageX + 10) + "px");
                }))
                    .on("mouseout", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.style("visibility", "hidden");
                }))
                    .on("click", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    _this.onComboLineClick(d, lineName, false);
                    _this.fordrillableClick(_this, d, event);
                    return tooltip.style("visibility", "hidden");
                }));
                // }
                // 
            };
            var this_1 = this;
            for (i = 0; i < this.lineInput.length; i++) {
                _loop_1();
            } // line code ends
        } //lineinput if condition ends here
        else if ((this.sc4 == true) && (this.data[0].length > 2)) {
            //  lineName = this.lineInput[i];
            /** @type {?} */
            var valueline = d3.line()
                .x((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return x0(d[Object.keys(d)[0]]);
                //  return x1(d[Object.keys(d)[0]]);
            }))
                .y((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return y(d[Object.keys(d)[2]]
                // d[lineName]
                );
            }));
            /** @type {?} */
            var shift = margin.left + x1.bandwidth() / 2;
            slice1.append("path")
                .data([this.transformeddata])
                .attr("fill", "none")
                .style("stroke", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (_this.lineColor !== "black") {
                    return _this.lineColor;
                }
                else {
                    return colors[2];
                }
            }))
                .attr("stroke-width", 1.5)
                .attr("transform", "translate( " + x1.bandwidth() / 2 + ", 0 )")
                .attr("d", valueline);
            // points1
            slice1.selectAll("dot")
                .data(this.transformeddata).enter().append("circle")
                .attr("class", "point1")
                .attr("cursor", "pointer")
                .style("stroke", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (_this.lineColor !== "black") {
                    return _this.lineColor;
                }
                else {
                    return colors[2];
                }
            }))
                .style("fill", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (_this.lineColor !== "black") {
                    return _this.lineColor;
                }
                else {
                    return colors[2];
                }
            }))
                .attr("cx", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return x0(d[Object.keys(d)[0]]);
            }))
                .attr("cy", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return y(d[Object.keys(d)[2]]
                // d[lineName]
                );
            }))
                .attr("r", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return 5; }))
                .attr("transform", "translate( " + x1.bandwidth() / 2 + ", 0 )")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.html(_this.formTooltipLineData(d, null, true))
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.onComboLineClick(d, null, true);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
        }
        //line label validation for scenario 1 and 2
        if (this.lineInput.length > 0) {
            //iteration on lineinput
            /** @type {?} */
            var labelpostoggle = false;
            var _loop_2 = function () {
                /** @type {?} */
                var lineName1 = this_2.lineInput[i];
                if (lineName1.label) {
                    if (lineName1.label == true) {
                        slice1.selectAll("labels")
                            .data(this_2.transformeddata)
                            .enter().append("text")
                            .style("font-weight", "bold")
                            .attr("text-anchor", "middle")
                            .attr("fill", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        function (d) {
                            if (lineName1.labelcolor) {
                                return lineName1.labelcolor;
                            }
                            else {
                                return "black";
                            }
                        }))
                            .attr("x", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        function (d) {
                            return x0(d[Object.keys(d)[0]]);
                        }))
                            .attr("y", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        function (d) {
                            return y(d[lineName1.column]);
                        }))
                            .text((/**
                         * @param {?} d
                         * @return {?}
                         */
                        function (d) {
                            return d[lineName1.column];
                            // d[lineName];
                        }))
                            .attr("transform", "translate( " +
                            // margin.left
                            x1.bandwidth() / 2
                            // shift
                            + ", 19 )")
                            .attr("cursor", "pointer")
                            .on("mouseover", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        function (d) {
                            return tooltip.style("visibility", "visible");
                        }))
                            .on("mousemove", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        function (d) {
                            return tooltip.html(_this.formTooltipLineData(d, lineName1, false))
                                .style("top", (d3.event.pageY - 10) + "px")
                                .style("left", (d3.event.pageX + 10) + "px");
                        }))
                            .on("mouseout", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        function (d) {
                            return tooltip.style("visibility", "hidden");
                        }))
                            .on("click", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        function (d) {
                            _this.onComboLineClick(d, lineName1, false);
                            _this.fordrillableClick(_this, d, event);
                            return tooltip.style("visibility", "hidden");
                        }));
                    }
                }
            };
            var this_2 = this;
            for (i = 0; i < this.lineInput.length; i++) {
                _loop_2();
            }
        }
        else if ((this.sc4 == true) && (this.data[0].length > 2) && (this.label == true)) {
            //trial line label for 4th scenario
            slice1.selectAll("labels")
                .data(this.transformeddata)
                .enter().append("text")
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (_this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return x0(d[Object.keys(d)[0]]);
            }))
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return y(d[Object.keys(d)[2]]
                // d[lineName]
                );
                //  + 50;
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return d[Object.keys(d)[2]];
                // d[lineName];
            }))
                .attr("transform", "translate( " +
                // margin.left
                x1.bandwidth() / 2
                // shift
                + ", 19 )")
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.html(_this.formTooltipLineData(d, null, true))
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.onComboLineClick(d, null, true);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
        }
        this.formLegendData(this.outputData);
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    CombochartComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    };
    /**
     * @param {?} d
     * @return {?}
     */
    CombochartComponent.prototype.setKey = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var object = {};
        object[d.label] = d.value;
        object[this.xaxisData] = d.xaxis;
        return (this.toolTipForBar(object));
    };
    /**
     * @return {?}
     */
    CombochartComponent.prototype.finMaxLineValue = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var lineValues = [];
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            var _loop_3 = function (key, value) {
                _this.lineInput.forEach((/**
                 * @param {?} line
                 * @return {?}
                 */
                function (line) {
                    if (line == key) {
                        lineValues.push(value);
                    }
                }));
            };
            try {
                for (var _a = tslib_1.__values(Object.entries(element)), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                    _loop_3(key, value);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_2) throw e_2.error; }
            }
            var e_2, _d;
        }));
        /** @type {?} */
        var max = 0;
        /** @type {?} */
        var j;
        for (j = 0; j < lineValues.length; j++) {
            if (lineValues[j] > max) {
                max = lineValues[j];
            }
        }
        this.lineRange = max;
    };
    /**
     * @param {?} d
     * @return {?}
     */
    CombochartComponent.prototype.groupbarClick = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var object = {};
        object[d.label] = d.value;
        object[this.xaxisData] = d.xaxis;
        this.chartClick(object);
    };
    /**
     * @param {?} g
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    CombochartComponent.prototype.plotLineForMultiSeries = /**
     * @param {?} g
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    };
    //RESIZE STEP 4 STARTS
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    CombochartComponent.prototype.validateresize = 
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.wt) {
            }
            else {
                _this.resize();
            }
        }), 0);
    };
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    CombochartComponent.prototype.resize = 
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    function () {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotD3Chart();
    };
    /**
     * @return {?}
     */
    CombochartComponent.prototype.tranasforsimplejson = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.transformeddata = [];
        this.keyArray = this.data[0];
        this.data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var DummyObject_1 = {};
                element.forEach((/**
                 * @param {?} individualvalue
                 * @param {?} keyindex
                 * @return {?}
                 */
                function (individualvalue, keyindex) {
                    DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                })); //inner for loop ends
                _this.transformeddata.push(DummyObject_1);
            } //if ends
        })); //outer for loop ends
    };
    /**
     * @param {?} data
     * @param {?} line
     * @param {?} flag
     * @return {?}
     */
    CombochartComponent.prototype.formTooltipLineData = /**
     * @param {?} data
     * @param {?} line
     * @param {?} flag
     * @return {?}
     */
    function (data, line, flag) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = tslib_1.__values(Object.entries(data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                //flag is considered true for forth scenario
                if (flag == true) {
                    if (key == this.data[0][2]) {
                        object[key] = value;
                    }
                } // if foe true flag ends here
                else {
                    if (key == line.column) {
                        object[key] = value;
                    }
                } //else for false flag ends here
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return this.toolTipForBar(object);
        var e_3, _d;
    };
    /**
     * @param {?} data
     * @param {?} line
     * @param {?} flag
     * @return {?}
     */
    CombochartComponent.prototype.onComboLineClick = /**
     * @param {?} data
     * @param {?} line
     * @param {?} flag
     * @return {?}
     */
    function (data, line, flag) {
        // flag is considered true for 4th scenario
        /** @type {?} */
        var object = {};
        /** @type {?} */
        var i = 0;
        try {
            for (var _a = tslib_1.__values(Object.entries(data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                if (i == 0 || i == 1) {
                    if (key != "color") {
                        object[key] = value;
                    }
                }
                if (flag == true) {
                    if (key == this.data[0][2]) {
                        object[key] = value;
                    }
                }
                else {
                    if (key == line.column) {
                        object[key] = value;
                    }
                }
                i++;
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_4) throw e_4.error; }
        }
        //this calls base class function
        this.comboLineClick(object);
        var e_4, _d;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CombochartComponent.prototype.formLegendData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.keyArray = [];
        this.legendArray = [];
        data.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        function (element, i) {
            if (i == 0) {
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} index
                 * @return {?}
                 */
                function (innerelement, index) {
                    if (index > 0) {
                        _this.legendArray[innerelement] = { 'data': [] };
                        _this.keyArray.push(innerelement);
                    }
                }));
            }
        }));
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var obj_1 = {};
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} innerindex
                 * @return {?}
                 */
                function (innerelement, innerindex) {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        var key = _this.keyArray[innerindex - 1];
                        obj_1[key] = element[innerindex];
                        /** @type {?} */
                        var legenddata = _this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'label': element[0], 'value': element[innerindex] });
                        }
                    }
                }));
            }
        }));
        this.legends = [];
        this.keyArray.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            /** @type {?} */
            var legenddata = _this.legendArray[element];
            /** @type {?} */
            var object = { 'label': element, 'color': _this.predefinedcolors[index], 'data': legenddata.data };
            _this.legends.push(object);
        }));
        //this logic will wrk fr sc1 and sc2
        if (this.lineInput.length > 0) {
            /** @type {?} */
            var inc_1 = 1;
            this.lineInput.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                /** @type {?} */
                var object = {};
                object["label"] = element.column;
                if (element.color) {
                    object["color"] = element.color;
                }
                else {
                    object["color"] = _this.predefinedcolors[_this.legendcolorindex + inc_1];
                    inc_1++;
                }
                object["data"] = [];
                _this.legends.push(object);
            }));
            this.legends;
            this.transformeddata;
            /** @type {?} */
            var tempdataarray = [];
            this.legends.forEach((/**
             * @param {?} legendelement
             * @return {?}
             */
            function (legendelement) {
                _this.lineInput.forEach((/**
                 * @param {?} lineelement
                 * @return {?}
                 */
                function (lineelement) {
                    if (lineelement.column == legendelement.label) {
                        _this.transformeddata.forEach((/**
                         * @param {?} singlerow
                         * @return {?}
                         */
                        function (singlerow) {
                            /** @type {?} */
                            var obj = {};
                            // d[Object.keys(d)[0]]
                            obj["label"] = singlerow[Object.keys(singlerow)[0]];
                            obj["value"] = singlerow[legendelement.label];
                            legendelement.data.push(obj);
                        }));
                    }
                }));
            }));
        }
        //this logic works for sc4
        // chk if line column exist in data1
        if ((this.sc4 == true) && (this.data[0].length > 2)) {
            /** @type {?} */
            var object = [];
            object["label"] = this.data[0][2];
            object["color"] = this.predefinedcolors[2];
            object["data"] = [];
            this.legends.push(object);
            /** @type {?} */
            var temparray = [];
            //logic to push data
            this.data.forEach((/**
             * @param {?} element
             * @param {?} index
             * @return {?}
             */
            function (element, index) {
                if (index > 0) {
                    /** @type {?} */
                    var object_1 = [];
                    object_1["label"] = element[0];
                    object_1["value"] = element[2];
                    _this.legends[1].data.push(object_1);
                }
            }));
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CombochartComponent.prototype.legendClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var obj = {};
        obj["label"] = event.label;
        /** @type {?} */
        var data = [];
        event.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var object = {};
            object[element.label] = element.value;
            data.push(object);
        }));
        obj["data"] = data;
        this.onLegendClick.emit(obj);
    };
    CombochartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-combochart',
                    template: " \n<div #chartId *ngIf=\"drillableFlag\" (window:resize)=\"validateresize()\">\n    <table *ngIf=\"data.length > 0\" style=\"width: 100%;\">\n      <tr *ngIf = \"title.length > 0\">\n          <td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n      </tr>\n      <tr>\n          <td>\n              <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n              </svg>\n          </td>\n      </tr>\n      <tr *ngIf=\"legend\">\n          <td style=\"display: block; padding: 5px;\">\n              <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"legendClick($event)\" [data]=\"legends\" style=\"height:100%;\">\n              </amexio-d3-legend> \n          </td>\n      </tr>\n    </table>\n    <div *ngIf=\"data.length < 1\" class=\"lmask\" style=\"padding-top:50%\">\n    </div>\n    </div>",
                    styles: [""]
                },] },
    ];
    CombochartComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef },
        { type: DeviceQueryService }
    ]; };
    CombochartComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        lineColor: [{ type: Input, args: ['line-color',] }],
        label: [{ type: Input }],
        horizontal: [{ type: Input }],
        barwidth: [{ type: Input }],
        lineInput: [{ type: Input, args: ['line-data-index',] }],
        barInput: [{ type: Input, args: ['bar-data-index',] }],
        tickscount: [{ type: Input, args: ['yaxis-interval',] }],
        showzeroflag: [{ type: Input, args: ['show-zero-values',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }]
    };
    return CombochartComponent;
}(AmexioD3BaseChartComponent));
export { CombochartComponent };
if (false) {
    /** @type {?} */
    CombochartComponent.prototype.svgwidth;
    /** @type {?} */
    CombochartComponent.prototype.svgheight;
    /** @type {?} */
    CombochartComponent.prototype.lineColor;
    /** @type {?} */
    CombochartComponent.prototype.label;
    /** @type {?} */
    CombochartComponent.prototype.horizontal;
    /** @type {?} */
    CombochartComponent.prototype.barwidth;
    /** @type {?} */
    CombochartComponent.prototype.lineInput;
    /** @type {?} */
    CombochartComponent.prototype.barInput;
    /** @type {?} */
    CombochartComponent.prototype.tickscount;
    /** @type {?} */
    CombochartComponent.prototype.showzeroflag;
    /** @type {?} */
    CombochartComponent.prototype.chartId;
    /** @type {?} */
    CombochartComponent.prototype.divid;
    /** @type {?} */
    CombochartComponent.prototype.simpleComboFlag;
    /** @type {?} */
    CombochartComponent.prototype.completeconverteddata;
    /** @type {?} */
    CombochartComponent.prototype.simpleCombodata;
    /** @type {?} */
    CombochartComponent.prototype.firstrow;
    /** @type {?} */
    CombochartComponent.prototype.years;
    /** @type {?} */
    CombochartComponent.prototype.data;
    /** @type {?} */
    CombochartComponent.prototype.svg;
    /** @type {?} */
    CombochartComponent.prototype.totalColumns;
    /** @type {?} */
    CombochartComponent.prototype.groupbarchartArray;
    /** @type {?} */
    CombochartComponent.prototype.highercolorindex;
    /** @type {?} */
    CombochartComponent.prototype.legendcolorindex;
    /** @type {?} */
    CombochartComponent.prototype.xaxisData;
    /** @type {?} */
    CombochartComponent.prototype.colorflag;
    /** @type {?} */
    CombochartComponent.prototype.keyArray;
    /** @type {?} */
    CombochartComponent.prototype.transformeddata;
    /** @type {?} */
    CombochartComponent.prototype.object;
    /** @type {?} */
    CombochartComponent.prototype.legendArray;
    /** @type {?} */
    CombochartComponent.prototype.httpresponse;
    /** @type {?} */
    CombochartComponent.prototype.offsetheight;
    /** @type {?} */
    CombochartComponent.prototype.lineRange;
    /** @type {?} */
    CombochartComponent.prototype.legends;
    /** @type {?} */
    CombochartComponent.prototype.totalcolumns;
    /** @type {?} */
    CombochartComponent.prototype.sc1;
    /** @type {?} */
    CombochartComponent.prototype.sc2;
    /** @type {?} */
    CombochartComponent.prototype.sc2barflag;
    /** @type {?} */
    CombochartComponent.prototype.sc3;
    /** @type {?} */
    CombochartComponent.prototype.sc4;
    /** @type {?} */
    CombochartComponent.prototype.LineArray;
    /** @type {?} */
    CombochartComponent.prototype.outputData;
    /** @type {?} */
    CombochartComponent.prototype.lineflag;
    /** @type {?} */
    CombochartComponent.prototype.higherdot1colorindex;
    /** @type {?} */
    CombochartComponent.prototype.wt;
    /**
     * @type {?}
     * @private
     */
    CombochartComponent.prototype.myservice;
    /**
     * @type {?}
     * @private
     */
    CombochartComponent.prototype.cdf;
    /**
     * @type {?}
     * @private
     */
    CombochartComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,