import { __values, __read, __extends } from 'tslib';
import { Input, Output, EventEmitter, Injectable, Component, NgModule, ViewChild, defineInjectable, inject, ContentChildren, ChangeDetectorRef, Inject, PLATFORM_ID } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import * as d3 from 'd3';
import { scaleBand, scaleLinear, max, select, axisBottom, axisLeft, event as event$1, scaleTime, scaleSqrt, min, zoom, stack, stackOffsetDiverging, scalePoint, scaleOrdinal, schemeCategory10, line, area, arc, pie } from 'd3';
import { FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AmexioD3BaseChartComponent = /** @class */ (function () {
    function AmexioD3BaseChartComponent(charttype) {
        this.onLegendClick = new EventEmitter();
        this.onChartClick = new EventEmitter();
        this.onLineClick = new EventEmitter();
        this.drillableEvent = new EventEmitter();
        this.data = [];
        this.legend = true;
        this.height = "300";
        this.width = "300";
        this.title = "";
        this.labelcolor = "black";
        this.labelflag = false;
        this.level = 0;
        this.drillabledatakey = [];
        this.hScale = true;
        this.vScale = false;
        this.resizeflag = false;
        //-------------------
        this.drillableFlag = true;
        this.possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcddefghijklmonpqrstuvwxyz";
        this.colorIndex = 0;
        this.colors = [];
        this.charttype = charttype;
        this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
        this.componentId = this.charttype + "-" + this.generateId();
    }
    /**
     * @protected
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.initializeData = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            element.color = _this.getColor(element);
        }));
    };
    /**
     * @protected
     * @param {?} data
     * @param {?} drillablekeys
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.getMultipleDrillbleKeyData = /**
     * @protected
     * @param {?} data
     * @param {?} drillablekeys
     * @return {?}
     */
    function (data, drillablekeys) {
        /** @type {?} */
        var nodeObject = {};
        if (data) {
            for (var index = 0; index < drillablekeys.length; index++) {
                /** @type {?} */
                var element = drillablekeys[index];
                try {
                    for (var _a = __values(Object.entries(data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                        if (key == element) {
                            nodeObject[key] = value;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return nodeObject;
        }
        var e_1, _d;
    };
    /**
     * @private
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.generateId = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var id = "";
        for (var i = 0; i < 5; i++) {
            id = id + this.possible
                .charAt(Math.floor(Math.random() * this.possible.length));
        }
        id = id + "-" + new Date().getTime();
        return id;
    };
    /**
     * @private
     * @param {?} object
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.getColor = /**
     * @private
     * @param {?} object
     * @return {?}
     */
    function (object) {
        if (object.color) {
            return object.color;
        }
        else if (this.colors.length > this.colorIndex) {
            /** @type {?} */
            var color = this.colors[this.colorIndex];
            this.colorIndex++;
            return color;
        }
        else if ((this.colors.length > 0) && (this.colors.length <= this.colorIndex)) {
            this.colorIndex = 0;
            /** @type {?} */
            var color = this.colors[this.colorIndex];
            return color;
        }
        else {
            /** @type {?} */
            var color = this.predefinedcolors[this.colorIndex];
            this.colorIndex++;
            return color;
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.legendClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.onLegendClick.emit(node);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.chartClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.onChartClick.emit(node);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.comboLineClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.onLineClick.emit(node);
    };
    /**
     * @param {?} ref
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.fordrillableClick = /**
     * @param {?} ref
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    function (ref, node, event) {
        this.drillableEvent.emit({ ref: ref, node: node, event: event });
    };
    /**
     * @protected
     * @param {?} d3
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.toolTip = /**
     * @protected
     * @param {?} d3
     * @return {?}
     */
    function (d3$$1) {
        return d3$$1.select("body")
            .append("div")
            .attr('id', 'tooltipid')
            .attr('class', 'amexiod3tooltip')
            .style("position", "absolute")
            .style("z-index", "10")
            .style("fill", "black")
            .style("visibility", "hidden");
    };
    /**
     * @protected
     * @param {?} tooltipdata
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.toolTipContent = /**
     * @protected
     * @param {?} tooltipdata
     * @return {?}
     */
    function (tooltipdata) {
        /** @type {?} */
        var tooltiphtml = "<table>";
        for (var key in tooltipdata) {
            if (tooltipdata.hasOwnProperty(key)) {
                /** @type {?} */
                var value = tooltipdata[key];
                tooltiphtml = tooltiphtml + "<tr>";
                //------------------
                //   tooltiphtml = tooltiphtml + "<td>";
                //   tooltiphtml = tooltiphtml + key+':';
                //   tooltiphtml = tooltiphtml + "</td>";
                //------------------
                tooltiphtml = tooltiphtml + "<td>";
                tooltiphtml = tooltiphtml + value;
                tooltiphtml = tooltiphtml + "</td>";
                tooltiphtml = tooltiphtml + "</tr>";
            }
        }
        tooltiphtml = tooltiphtml + "</table>";
        return tooltiphtml;
    };
    /**
     * @protected
     * @param {?} legend
     * @param {?} xaxis
     * @param {?} yaxis
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.toolTipWithLegendandAxis = /**
     * @protected
     * @param {?} legend
     * @param {?} xaxis
     * @param {?} yaxis
     * @return {?}
     */
    function (legend, xaxis, yaxis) {
        /** @type {?} */
        var tooltiphtml = "<div>";
        tooltiphtml = tooltiphtml + "<b>" + xaxis + "</b>, ";
        tooltiphtml = tooltiphtml + legend + "</b> ";
        tooltiphtml = tooltiphtml + "<b>" + yaxis + "</b> ";
        tooltiphtml = tooltiphtml + "</div>";
        return tooltiphtml;
    };
    /**
     * @protected
     * @param {?} tooltipData
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.toolTipForBar = /**
     * @protected
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var tooltiphtml = "<div>";
        try {
            for (var _a = __values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                /** @type {?} */
                var sideStyle = "float:left";
                tooltiphtml = tooltiphtml + "<div>";
                tooltiphtml = tooltiphtml + "<span style =" + sideStyle + " ><b>" + key + " " + "</b>" + value + "</br></span>";
                tooltiphtml = tooltiphtml + "</div>";
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return tooltiphtml;
        var e_2, _d;
    };
    AmexioD3BaseChartComponent.propDecorators = {
        onLegendClick: [{ type: Output }],
        onChartClick: [{ type: Output }],
        onLineClick: [{ type: Output }],
        drillableEvent: [{ type: Output }],
        data: [{ type: Input, args: ['data',] }],
        httpurl: [{ type: Input, args: ['http-url',] }],
        httpmethod: [{ type: Input, args: ['http-method',] }],
        legend: [{ type: Input, args: ['legend',] }],
        colors: [{ type: Input, args: ['color',] }],
        height: [{ type: Input, args: ['height',] }],
        width: [{ type: Input, args: ['width',] }],
        title: [{ type: Input, args: ['title',] }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        labelflag: [{ type: Input, args: ['label',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
        hScale: [{ type: Input, args: ['horizontal-scale',] }],
        vScale: [{ type: Input, args: ['vertical-scale',] }]
    };
    return AmexioD3BaseChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CommanDataService = /** @class */ (function () {
    function CommanDataService(http) {
        this.http = http;
    }
    /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @return {?}
     */
    CommanDataService.prototype.fetchUrlData = /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @return {?}
     */
    function (serviceUrl, methodType) {
        /** @type {?} */
        var requestJson = {};
        /** @type {?} */
        var headers = new HttpHeaders().append('Content-Type', 'application/json;charset=UTF-8');
        if (methodType === 'post') {
            return this.http.post(serviceUrl, requestJson, { headers: headers });
        }
        else if (methodType === 'get') {
            return this.http.get(serviceUrl, { headers: headers });
        }
    };
    /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @param {?} requestJson
     * @return {?}
     */
    CommanDataService.prototype.postfetchData = /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @param {?} requestJson
     * @return {?}
     */
    function (serviceUrl, methodType, requestJson) {
        /** @type {?} */
        var headers = new HttpHeaders().append('Content-Type', 'application/json;charset=UTF-8');
        if (methodType === 'post') {
            return this.http.post(serviceUrl, requestJson, { headers: headers });
        }
        else if (methodType === 'get') {
            return this.http.get(serviceUrl, { headers: headers });
        }
    };
    CommanDataService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    CommanDataService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ CommanDataService.ngInjectableDef = defineInjectable({ factory: function CommanDataService_Factory() { return new CommanDataService(inject(HttpClient)); }, token: CommanDataService, providedIn: "root" });
    return CommanDataService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DeviceQueryService = /** @class */ (function () {
    function DeviceQueryService(platformId) {
        this.platformId = platformId;
        this.rules = {
            print: 'print',
            screen: 'screen',
            phone: '(max-width: 767px)',
            tablet: '(min-width: 768px) and (max-width: 1024px)',
            desktop: '(min-width: 1025px)',
            portrait: '(orientation: portrait)',
            landscape: '(orientation: landscape)',
            retina: '(-webkit-min-device-pixel-ratio: 2) and (min-resolution: 192dpi)',
        };
        this.Check = (/**
         * @param {?} mq
         * @return {?}
         */
        function (mq) {
            if (isPlatformBrowser(this.platformId)) {
                if (!mq) {
                    return;
                }
                return window.matchMedia(mq).matches;
            }
            else {
                return;
            }
        });
        this.IsTablet = (/**
         * @return {?}
         */
        function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.tablet).matches;
            }
            else {
                return null;
            }
        });
        this.IsDesktop = (/**
         * @return {?}
         */
        function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.desktop).matches;
            }
            else {
                return null;
            }
        });
        this.IsPortrait = (/**
         * @return {?}
         */
        function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.portrait).matches;
            }
            else {
                return null;
            }
        });
        this.IsLandscape = (/**
         * @return {?}
         */
        function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.landscape).matches;
            }
            else {
                return null;
            }
        });
        this.IsRetina = (/**
         * @return {?}
         */
        function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.retina).matches;
            }
            else {
                return null;
            }
        });
        this.browserWindow = (/**
         * @return {?}
         */
        function () {
            return window;
        });
    }
    /**********************************************
     METHODS FOR CHECKING TYPE
     **********************************************/
    /**
     * *******************************************
     * METHODS FOR CHECKING TYPE
     * ********************************************
     * @return {?}
     */
    DeviceQueryService.prototype.IsPhone = /**
     * *******************************************
     * METHODS FOR CHECKING TYPE
     * ********************************************
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platformId)) {
            return window.matchMedia(this.rules.phone).matches;
        }
        else {
            return null;
        }
    };
    /**********************************************
     EVENT LISTENERS BY TYPE
     **********************************************/
    /**
     * *******************************************
     * EVENT LISTENERS BY TYPE
     * ********************************************
     * @param {?} callBack
     * @return {?}
     */
    DeviceQueryService.prototype.OnPhone = /**
     * *******************************************
     * EVENT LISTENERS BY TYPE
     * ********************************************
     * @param {?} callBack
     * @return {?}
     */
    function (callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            var mql = window.matchMedia(this.rules.phone);
            this.mqlMethod(callBack, mql);
        }
    };
    /**
     * @param {?} callBack
     * @return {?}
     */
    DeviceQueryService.prototype.OnTablet = /**
     * @param {?} callBack
     * @return {?}
     */
    function (callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            var mql = window.matchMedia(this.rules.tablet);
            this.mqlMethod(callBack, mql);
        }
    };
    /**
     * @param {?} callBack
     * @return {?}
     */
    DeviceQueryService.prototype.OnDesktop = /**
     * @param {?} callBack
     * @return {?}
     */
    function (callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            var mql = window.matchMedia(this.rules.desktop);
            this.mqlMethod(callBack, mql);
        }
    };
    /**
     * @param {?} callBack
     * @return {?}
     */
    DeviceQueryService.prototype.OnPortrait = /**
     * @param {?} callBack
     * @return {?}
     */
    function (callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            var mql = window.matchMedia(this.rules.portrait);
            this.mqlMethod(callBack, mql);
        }
    };
    /**
     * @param {?} callBack
     * @return {?}
     */
    DeviceQueryService.prototype.OnLandscape = /**
     * @param {?} callBack
     * @return {?}
     */
    function (callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            var mql = window.matchMedia(this.rules.landscape);
            this.mqlMethod(callBack, mql);
        }
    };
    /**
     * @param {?} callBack
     * @param {?} mql
     * @return {?}
     */
    DeviceQueryService.prototype.mqlMethod = /**
     * @param {?} callBack
     * @param {?} mql
     * @return {?}
     */
    function (callBack, mql) {
        mql.addListener((/**
         * @param {?} mql1
         * @return {?}
         */
        function (mql1) {
            if (mql1.matches) {
                callBack(mql);
            }
        }));
    };
    DeviceQueryService.decorators = [
        { type: Injectable },
    ];
    DeviceQueryService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return DeviceQueryService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AmexioD3DounutChartComponent = /** @class */ (function (_super) {
    __extends(AmexioD3DounutChartComponent, _super);
    function AmexioD3DounutChartComponent(myservice, cdf, device) {
        var _this = _super.call(this, 'DONUTCHART') || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.device = device;
        _this.pie = false;
        _this.svgwidth = 300;
        _this.svgheight = 300;
        _this.desktoplegend = false;
        _this.mobilelegend = false;
        _this.keyArray = [];
        _this.transformeddata = [];
        _this.legendArray = [];
        return _this;
    }
    /**
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    resp_1 = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                }), (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.data = _this.getResponseData(resp_1);
                        _this.drawChart();
                        // this.data = this.getResponseData(resp);
                        _this.transformData(_this.data);
                        _this.initializeData();
                        _this.plotD3Chart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.transformData(_this.data);
                    _this.initializeData();
                    _this.plotD3Chart();
                }), 0);
            }
        }
        else {
            this.fetchData(this.drillData);
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                resp = response;
                _this.response = resp;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
            }), (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(resp);
                    _this.drawChart();
                }), 0);
            }));
        }
    };
    /**
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.drillableFlag = true;
            _this.initializeData();
            _this.plotD3Chart();
        }), 0);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.formLegendData();
        //this.transformData(this.data);
        //  this.data = this.transformeddata;
        /** @type {?} */
        var outerRadius = 0;
        /** @type {?} */
        var innerRadius = 0;
        outerRadius = this.svgwidth / 2;
        innerRadius = this.svgwidth / 4;
        if (this.pie) {
            innerRadius = 0;
        }
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var arc$$1 = arc()
            .outerRadius(outerRadius)
            .innerRadius(innerRadius);
        /** @type {?} */
        var pie$$1 = pie()
            .value((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return d[Object.keys(d)[1]];
            //  return d.value
        }));
        this.svg = select("#" + this.componentId)
            .append('g')
            .attr('transform', 'translate(' + this.svgwidth / 2 + ',' + this.svgheight / 2 + ')')
            .selectAll('path')
            .data(pie$$1(this.data))
            .enter();
        if (this.device.IsDesktop() == true) {
            this.desktoplegend = true;
            this.mobilelegend = false;
        }
        // else{
        //        if(this.device.IsPhone()==true && this.device.IsTablet()==true)
        //        {
        //             this.desktoplegend=false;
        //             this.mobilelegend=true;
        //        }
        // }
        /** @type {?} */
        var path = this.svg.append('path')
            .attr('d', arc$$1)
            .attr('fill', (/**
         * @param {?} d
         * @param {?} i
         * @return {?}
         */
        function (d, i) {
            if (d.data.color) {
                return d.data.color;
            }
            else {
                return "black";
            }
            //  return (d && d.data && d.data.color) ? d.data.color : "black"
        }))
            .attr('cursor', 'pointer')
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.html(_this.formTooltipData(d.data)
            //  this.formLegendData(d.data)
            // this.toolTipContent(d.data)
            )
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.DonutChartClick(d.data);
            _this.fordrillableClick(_this, d.data, event);
            return tooltip.style("visibility", "hidden");
            //this.chartClick(d.data);
        }));
        if (this.labelflag) {
            /** @type {?} */
            var text = this.svg.append("text")
                .transition()
                .duration(200)
                .attr("transform", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return "translate(" + arc$$1.centroid(d) + ")";
            }))
                .attr("text-anchor", "middle")
                .text((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return d.data[Object.keys(d.data)[1]];
                //return d.data.value;
            }))
                .style('fill', (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (_this.labelcolor && _this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
                // return (d && d.data && d.data.textcolor) ? d.data.textcolor : "black";
            }))
                .style('font-size', '12px');
        }
    };
    /**
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.formLegendData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendArray = [];
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var legendobject = {};
            legendobject['label'] = element[Object.keys(element)[0]];
            legendobject['value'] = element[Object.keys(element)[1]];
            legendobject['color'] = element.color;
            _this.legendArray.push(legendobject);
        }));
    };
    /**
     * @param {?} legendevent
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.onDonutLegendClick = /**
     * @param {?} legendevent
     * @return {?}
     */
    function (legendevent) {
        /** @type {?} */
        var obj = {};
        //  obj['label'] = legendevent.label;
        //  obj['value'] = legendevent.value 
        obj[this.keyArray[0]] = legendevent.label;
        obj[this.keyArray[1]] = legendevent.value;
        //delete event.color;
        this.legendClick(obj);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.transformData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.keyArray = data[0];
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var DummyObject_1 = {};
                element.forEach((/**
                 * @param {?} individualvalue
                 * @param {?} keyindex
                 * @return {?}
                 */
                function (individualvalue, keyindex) {
                    DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                })); //inner for loop ends
                _this.transformeddata.push(DummyObject_1);
            } //if ends
        })); //outer for loop ends
        this.data = this.transformeddata;
    };
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.formTooltipData = /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color' && key != 'textcolor') {
                    object[key] = value;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return this.toolTipForBar(object);
        var e_2, _d;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.DonutChartClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.chartClick(object);
        var e_3, _d;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3DounutChartComponent.prototype.resize = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.desktoplegend = false;
        this.mobilelegend = true;
        this.plotD3Chart();
    };
    AmexioD3DounutChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-donut',
                    template: "<div *ngIf=\"drillableFlag\" #chartId (window:resize)=\"resize($event)\">\n    <div *ngIf=\"data.length > 0\">\n\n  \n    <div colspan=\"2\" style=\"font-size: 18px; font-weight: bold; \">\n        {{title}}\n    </div>\n    <div [ngClass]=\"'donutcss'\">\n        <svg preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 300 300\" [attr.height]=\"height\" [attr.width]=\"width\" [attr.id]=\"componentId\">\n        </svg>\n        <div>\n\n            <div style=\"display: block; padding: 1%;\">\n                <div *ngIf=\"desktoplegend\">\n                    <amexio-d3-legend *ngIf=\"legend\" (onClick)=\"onDonutLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\"></amexio-d3-legend>\n                </div>\n                <div *ngIf=\"mobilelegend\">\n                    <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onDonutLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\"></amexio-d3-legend>\n                </div>\n            </div>\n        </div>\n        <!--  -->\n        <div *ngIf=\"data.length < 1\" class=\"lmask\" style=\"padding-top:50%\">\n            </div>\n\n        </div>",
                    styles: [".donutcss{display:flex;flex-direction:row}@media screen and (max-width:1024px){.donutcss{display:flex;flex-direction:column}}"]
                },] },
    ];
    AmexioD3DounutChartComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef },
        { type: DeviceQueryService }
    ]; };
    AmexioD3DounutChartComponent.propDecorators = {
        pie: [{ type: Input, args: ['pie',] }],
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        drillid: [{ type: ViewChild, args: ['drillid',] }],
        drillData: [{ type: Input }]
    };
    return AmexioD3DounutChartComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AmexioD3PieChartComponent = /** @class */ (function () {
    function AmexioD3PieChartComponent() {
        this.data = [];
        this.onLegendClick = new EventEmitter();
        this.onChartClick = new EventEmitter();
        this.drillableEvent = new EventEmitter();
        this.legend = true;
        this.colors = [];
        this.width = "300";
        this.height = "300";
        this.title = "";
        this.level = 0;
        this.labelcolor = "black";
        this.labelflag = false;
        this.drillableFlag = true;
    }
    /**
     * @return {?}
     */
    AmexioD3PieChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3PieChartComponent.prototype.legendClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.onLegendClick.emit(node);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3PieChartComponent.prototype.chartClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.onChartClick.emit(node);
    };
    /**
     * @param {?} ref
     * @return {?}
     */
    AmexioD3PieChartComponent.prototype.fordrillableClick = /**
     * @param {?} ref
     * @return {?}
     */
    function (ref) {
        this.drillableEvent.emit(ref);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3PieChartComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.drillData = data;
    };
    /**
     * @return {?}
     */
    AmexioD3PieChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        this.donutref.drillableFlag = true;
        this.donutref.drawChart();
    };
    AmexioD3PieChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-pie',
                    template: "<div   *ngIf=\"drillableFlag\">\n<amexio-d3-chart-donut #id (onLegendClick)=\"legendClick($event)\" \n                       (onChartClick)=\"chartClick($event)\" \n                       (drillableEvent)=\" fordrillableClick($event)\"\n                        [height]=\"height\"\n                        [width]=\"width\"\n                        [title]=\"title\"\n                        [data] = \"data\"\n                        [pie]  = \"true\"\n                        [color]=\"colors\"\n                        [http-url]=\"httpurl\"\n                        [http-method]=\"httpmethod\"\n                        [data-reader]=\"datareader\"\n                        [label]=\"labelflag\"\n                        [label-color]=\"labelcolor\"\n                        [level]=\"level\"\n                        [target]=\"target\"\n                        [drillable-data]=\"drillabledatakey\"\n                        [drillData]=\"drillData\">\n</amexio-d3-chart-donut>\n</div>\n"
                },] },
    ];
    AmexioD3PieChartComponent.propDecorators = {
        data: [{ type: Input, args: ['data',] }],
        onLegendClick: [{ type: Output }],
        onChartClick: [{ type: Output }],
        drillableEvent: [{ type: Output }],
        donutref: [{ type: ViewChild, args: ['id',] }],
        legend: [{ type: Input }],
        colors: [{ type: Input, args: ['color',] }],
        width: [{ type: Input, args: ['width',] }],
        height: [{ type: Input, args: ['height',] }],
        title: [{ type: Input }],
        httpurl: [{ type: Input, args: ['http-url',] }],
        httpmethod: [{ type: Input, args: ['http-method',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        labelflag: [{ type: Input, args: ['label',] }]
    };
    return AmexioD3PieChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AmexioD3Legend = /** @class */ (function () {
    function AmexioD3Legend() {
        this.horizontal = false;
        this.temparr = [];
        this.onClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    AmexioD3Legend.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.data = this.data;
        this.temparr = this.data;
    };
    /**
     * @return {?}
     */
    AmexioD3Legend.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        // debugger;
        // window.location.reload();
        this.data = this.data;
        this.temparr = this.data;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3Legend.prototype.onLegendClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.onClick.emit(node);
    };
    AmexioD3Legend.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-legend',
                    template: "<div style =\" width: 100% ; padding-left: 20px; padding-top: 8px; \">\n<table *ngIf=\"!horizontal\" style=\"height: 100%;\">\n    <tr *ngFor = \"let node of data\" style=\"cursor: pointer;\" (click)=\"onLegendClick(node)\">\n        <td style=\"height: 10px; width: 23px; padding-left: 2px;\"\n            [ngStyle]=\"{'background-color': node.color}\"></td>\n        <td>{{node.label}}</td>\n    </tr>\n</table>\n</div>\n\n<table *ngIf=\"horizontal\" style=\"height: 100%;\">\n    <tr>\n        <td *ngFor = \"let node of data\" \n                    (click)=\"onLegendClick(node)\" \n                    style=\"cursor: pointer;\">\n            \n            <div style=\" display: inline-block; display: inline-block; padding: 2px;\">\n                    <div style=\" width: 10px; display: inline-block; padding: 2px; \" \n                    [ngStyle]=\"{'background-color': node.color}\"></div>\n                {{node.label}}\n            </div>\n        </td>\n        \n    </tr>\n</table>\n\n<br>\n "
                },] },
    ];
    AmexioD3Legend.ctorParameters = function () { return []; };
    AmexioD3Legend.propDecorators = {
        data: [{ type: Input, args: ['data',] }],
        horizontal: [{ type: Input, args: ['horizontal',] }],
        onClick: [{ type: Output }]
    };
    return AmexioD3Legend;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AmexioD3BarChartComponent = /** @class */ (function (_super) {
    __extends(AmexioD3BarChartComponent, _super);
    function AmexioD3BarChartComponent(myservice, cdf, device) {
        var _this = _super.call(this, 'bar') || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.device = device;
        _this.svgheight = 300;
        _this.horizontal = false;
        _this.labelcolor = "black";
        _this.labelflag = false;
        _this.level = 0;
        _this.drillabledatakey = [];
        _this.hScale = true;
        _this.showzeroflag = true;
        _this._data = [];
        _this.resizeflag = false;
        _this.drillableFlag = true;
        _this.colorflag = false;
        _this.keyArray = [];
        _this.transformeddata = [];
        _this.legendArray = [];
        _this.firstloading = false;
        _this.inc = 0;
        _this.isChartInit = false;
        return _this;
    }
    Object.defineProperty(AmexioD3BarChartComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        // private _data: any = [];
        set: 
        // private _data: any = [];
        /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v && (v.length > 0)) {
                this._data = v;
                // if(this.isChartInit){
                //   this.resize();
                // }
                // if (this.data) {
                // setTimeout(() => {
                //   this.data = this.getResponseData(this.data);
                //   this.transformData(this.data)
                //   this.initializeData();
                //   this.plotD3Chart();
                // }, 0);
                // }
                // this.cdf.detectChanges();
                // this.formLegendData();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    resp_1 = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                }), (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.data = _this.getResponseData(resp_1);
                        // this.drawChart();
                        _this.transformData(_this.data);
                        _this.initializeData();
                        _this.plotD3Chart();
                        _this.isChartInit = true;
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.transformData(_this.data);
                    _this.initializeData();
                    _this.plotD3Chart();
                    _this.isChartInit = true;
                }), 0);
            }
        }
    };
    // Fetch Data
    // Fetch Data
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.fetchData = 
    // Fetch Data
    /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                resp = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
            }), (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(resp);
                    _this.drawChart();
                }), 0);
            }));
        }
    };
    /**
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.initializeData();
            _this.plotD3Chart();
        }), 0);
    };
    /**
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // console.log("repeat");
        if (this.inc > 1) {
            if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.transformData(_this.data);
                    _this.initializeData();
                    _this.plotD3Chart();
                }), 500);
            }
            this.formLegendData();
        }
        this.inc++;
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.formLegendData();
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var margin = { top: 20, right: 60, bottom: 40, left: 60 };
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height = this.svgheight - margin.top - margin.bottom;
        //RESIZE STEP 2 START
        // this.svg.selectAll("*").remove();
        this.svg = select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight);
        this.svg.selectAll("*").remove();
        // this.svg.exit().remove();//remove unneeded circles
        //RESIZE STEP 2 ENDS HERE
        /** @type {?} */
        var x;
        /** @type {?} */
        var y;
        /** @type {?} */
        var g = this.svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        // vertical bar
        if (this.horizontal == false) {
            // this.svg.selectAll("*").remove();
            // -----------------------------
            if (this.data) {
                x = scaleBand()
                    .rangeRound([0, width])
                    .padding(0.1);
                //setting content for x and y axis
                x.domain(this.data.map((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return d[Object.keys(d)[0]];
                    //    return d.label
                })));
            }
            //-----------------------------
            if (this.data) {
                y = scaleLinear()
                    .rangeRound([height, 0]);
                y.domain([0, max(this.data, (/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) {
                        return d[Object.keys(d)[1]];
                        //return d.value;
                    }))]);
            }
            // add x axis to svg
            if (this.device.IsDesktop() == true) {
                if (this.svgwidth <= 400) {
                    g.append("g")
                        .attr("transform", "translate(0," + height + ")")
                        .call(axisBottom(x)).
                        selectAll("text")
                        .attr("y", 0)
                        .attr("x", 9)
                        .attr("dy", ".35em")
                        .attr("transform", "rotate(60)")
                        .style("text-anchor", "start");
                }
                else {
                    g.append("g")
                        .attr("transform", "translate(0," + height + ")")
                        .call(axisBottom(x));
                }
            }
            else {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            //add y axis to svg
            g.append("g")
                .call(axisLeft(y)
                .ticks(this.tickscount));
            this.plotLine(g, x, y, height, width);
            //add bar chart
            g.selectAll(".bar")
                .data(this.data)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return x(d[Object.keys(d)[0]]);
                // return x(d.label); 
            }))
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return y(d[Object.keys(d)[1]]);
                // return y(d.value); 
            }))
                .attr("cursor", "pointer")
                .attr("width", x.bandwidth())
                .attr("height", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return height - y(d[Object.keys(d)[1]]); }))
                .style("fill", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                // return "blue";
                return d.color;
            }))
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.html(_this.formTooltipData(d)
                //  this.toolTipForBar(d)
                // this.toolTipContent(d)
                )
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.barChartClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
                //this.chartClick(d);
            }));
            if (this.labelflag) {
                /** @type {?} */
                var yTextPadding = 40;
                this.svg.selectAll(".label")
                    .data(this.data)
                    .enter()
                    .append("text")
                    .style("font-weight", "bold")
                    .style("font-size", "1vw")
                    .attr("text-anchor", "middle")
                    .attr("fill", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    if (_this.labelcolor.length > 0) {
                        if ((_this.labelcolor.length > 0) && d[Object.keys(d)[1]] > 0) {
                            return _this.labelcolor;
                        }
                    }
                    else {
                        return "black";
                    }
                }))
                    .attr("x", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (d, i) {
                    return x(d[Object.keys(d)[0]]) + margin.left + x.bandwidth() / 2;
                }))
                    .attr("y", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (d, i) {
                    return y(d[Object.keys(d)[1]]) + yTextPadding;
                }))
                    .text((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    // if (d[Object.keys(d)[1]] > 0) {
                    //   return d[Object.keys(d)[1]];
                    // }.
                    if (_this.showzeroflag) {
                        return d[Object.keys(d)[1]];
                    }
                    else if (!_this.showzeroflag) {
                        if (d[Object.keys(d)[1]] > 0) {
                            return d[Object.keys(d)[1]];
                        }
                    }
                }))
                    .attr("cursor", "pointer")
                    .on("mouseover", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.style("visibility", "visible");
                }))
                    .on("mousemove", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.html(_this.formTooltipData(d)
                    //  this.toolTipForBar(d)
                    // this.toolTipContent(d)
                    )
                        .style("top", (event$1.pageY - 10) + "px")
                        .style("left", (event$1.pageX + 10) + "px");
                }))
                    .on("mouseout", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.style("visibility", "hidden");
                }))
                    .on("click", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    _this.barChartClick(d);
                    _this.fordrillableClick(_this, d, event);
                    return tooltip.style("visibility", "hidden");
                    //this.chartClick(d);
                }));
            } //if ends fr 
        }
        else if (this.horizontal == true) {
            if (this.data) {
                x = scaleLinear()
                    .rangeRound([0, width]);
                //setting content for x and y axis
                x.domain([0, max(this.data, (/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) {
                        return parseInt(d[Object.keys(d)[1]]
                        // d.value
                        );
                    }))]);
                // d[Object.keys(d)[1]]
                y = scaleBand()
                    .rangeRound([height, 0]).padding(0.1);
                y.domain(this.data.map((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return d[Object.keys(d)[0]];
                    //return d.label;
                })));
            }
            // add x axis to svg
            g.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(axisBottom(x).ticks(this.xtickscount));
            //add y axis to svg
            g.append("g")
                .call(axisLeft(y).ticks(this.tickscount));
            this.plotLine(g, x, y, height, width);
            //add bar chart
            g.selectAll(".bar")
                .data(this.data)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", 0)
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return y(d[Object.keys(d)[0]]
                // d.label
                );
            }))
                .attr("cursor", "pointer")
                .attr("width", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return x(d[Object.keys(d)[1]]
                // d.value
                );
            }))
                .attr("height", y.bandwidth())
                .style("fill", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d.color; }))
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.html(_this.formTooltipData(d)
                // this.formLegendData(d)
                // this.toolTipContent(d)
                )
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.barChartClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
                //this.chartClick(d);
            }));
            if (this.labelflag) {
                /** @type {?} */
                var yTextPadding_1 = 40;
                this.svg.selectAll(".label")
                    .data(this.data)
                    .enter()
                    .append("text")
                    .style("font-weight", "bold")
                    .attr("text-anchor", "middle")
                    .attr("vertical-align", "middle")
                    .attr("margin-top", margin.top)
                    .attr("fill", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    if (_this.labelcolor.length > 0) {
                        return _this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                }))
                    .attr("x", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (d, i) {
                    return x(d[Object.keys(d)[1]]) + yTextPadding_1;
                }))
                    .attr("y", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (d, i) {
                    return y(d[Object.keys(d)[0]])
                        + margin.top + y.bandwidth() / 2;
                }))
                    .text((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    // return d[Object.keys(d)[1]];
                    if (_this.showzeroflag) {
                        return d[Object.keys(d)[1]];
                    }
                    else if (!_this.showzeroflag) {
                        if (d[Object.keys(d)[1]] > 0) {
                            return d[Object.keys(d)[1]];
                        }
                    }
                }))
                    .attr("cursor", "pointer")
                    .on("mouseover", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.style("visibility", "visible");
                }))
                    .on("mousemove", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.html(_this.formTooltipData(d)
                    // this.formLegendData(d)
                    // this.toolTipContent(d)
                    )
                        .style("top", (event$1.pageY - 10) + "px")
                        .style("left", (event$1.pageX + 10) + "px");
                }))
                    .on("mouseout", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.style("visibility", "hidden");
                }))
                    .on("click", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    _this.barChartClick(d);
                    _this.fordrillableClick(_this, d, event);
                    return tooltip.style("visibility", "hidden");
                    //this.chartClick(d);
                }));
            }
        }
        //else ends(horizontal bar logic ends)
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y).ticks(this.tickscount)
                .tickSize(-width).tickFormat(''));
        }
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(axisBottom(x).
                tickSize(-this.width).tickFormat('').ticks(this.xtickscount));
        }
    };
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.formTooltipData = /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return this.toolTipForBar(object);
        var e_2, _d;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.transformData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        if (data && (data.length > 0)) {
            this.transformeddata = [];
            this.keyArray = data[0];
            if (data && (data.length > 0)) {
                data.forEach((/**
                 * @param {?} element
                 * @param {?} index
                 * @return {?}
                 */
                function (element, index) {
                    if (index > 0) {
                        /** @type {?} */
                        var DummyObject_1 = {};
                        element.forEach((/**
                         * @param {?} individualvalue
                         * @param {?} keyindex
                         * @return {?}
                         */
                        function (individualvalue, keyindex) {
                            DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                        })); //inner for loop ends
                        _this.transformeddata.push(DummyObject_1);
                    } //if ends
                })); //outer for loop ends
            }
            this.data = this.transformeddata;
        } //
    };
    /**
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.formLegendData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendArray = [];
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var legendobject = {};
            legendobject['label'] = element[Object.keys(element)[0]];
            legendobject['value'] = element[Object.keys(element)[1]];
            legendobject['color'] = element.color;
            _this.legendArray.push(legendobject);
        }));
        this.legendArray;
    };
    /**
     * @param {?} legendevent
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.onBarLegendClick = /**
     * @param {?} legendevent
     * @return {?}
     */
    function (legendevent) {
        /** @type {?} */
        var obj = {};
        //  obj['label'] = legendevent.label;
        //  obj['value'] = legendevent.value;
        obj[this.keyArray[0]] = legendevent.label;
        obj[this.keyArray[1]] = legendevent.value;
        //obj[legendevent.label] = legendevent.value;
        //delete event.color;
        this.legendClick(obj);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.barChartClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.chartClick(object);
        var e_3, _d;
    };
    //RESIZE STEP 4 STARTS
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.validateresize = 
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.wt) ;
            else {
                _this.resize();
            }
        }), 0);
    };
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 5 STARTS
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 5 STARTS
    /**
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.resize = 
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 5 STARTS
    /**
     * @return {?}
     */
    function () {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotD3Chart();
    };
    // //RESIZE STEP 5 STARTS
    //   initialresize() {
    //     if (this.wt) {
    //       //RESIZE STEP 3 START
    //       // if(this.firstloading)
    //       // this.svg.selectAll("*").remove();
    //       this.resizeflag = true;
    //       if (this.svgwidth) {
    //         this.svgwidth = this.svgwidth;
    //       } else if (this.chartId) {
    //         this.svgwidth = this.chartId.nativeElement.offsetWidth;
    //       }
    //       //RESIZE STEP 3 ENDS
    //       // this.svgwidth = this.divid.nativeElement.offsetWidth;
    //       this.cdf.detectChanges();
    //       this.plotD3Chart();
    //     }
    //     this.firstloading = false;
    //   }
    // //RESIZE STEP 5 ENDS
    // //RESIZE STEP 5 STARTS
    //   initialresize() {
    //     if (this.wt) {
    //       //RESIZE STEP 3 START
    //       // if(this.firstloading)
    //       // this.svg.selectAll("*").remove();
    //       this.resizeflag = true;
    //       if (this.svgwidth) {
    //         this.svgwidth = this.svgwidth;
    //       } else if (this.chartId) {
    //         this.svgwidth = this.chartId.nativeElement.offsetWidth;
    //       }
    //       //RESIZE STEP 3 ENDS
    //       // this.svgwidth = this.divid.nativeElement.offsetWidth;
    //       this.cdf.detectChanges();
    //       this.plotD3Chart();
    //     }
    //     this.firstloading = false;
    //   }
    // //RESIZE STEP 5 ENDS
    /**
     * @return {?}
     */
    AmexioD3BarChartComponent.prototype.validateData = 
    // //RESIZE STEP 5 STARTS
    //   initialresize() {
    //     if (this.wt) {
    //       //RESIZE STEP 3 START
    //       // if(this.firstloading)
    //       // this.svg.selectAll("*").remove();
    //       this.resizeflag = true;
    //       if (this.svgwidth) {
    //         this.svgwidth = this.svgwidth;
    //       } else if (this.chartId) {
    //         this.svgwidth = this.chartId.nativeElement.offsetWidth;
    //       }
    //       //RESIZE STEP 3 ENDS
    //       // this.svgwidth = this.divid.nativeElement.offsetWidth;
    //       this.cdf.detectChanges();
    //       this.plotD3Chart();
    //     }
    //     this.firstloading = false;
    //   }
    // //RESIZE STEP 5 ENDS
    /**
     * @return {?}
     */
    function () {
        if (this.data) ;
        else {
            return "lmask";
        }
    };
    AmexioD3BarChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-bar',
                    template: "<div #chartId *ngIf=\"drillableFlag \" #divid (window:resize)=\"validateresize()\">\n    <table [ngClass]=\"validateData()\" style=\"width: 100%;\" position=\" relative\">\n        <ng-container *ngIf=\"title.length > 0\">\n            <tr>\n                <td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n            </tr>\n        </ng-container>\n        <tr>\n            <td>\n                <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n                </svg>\n            </td>\n        </tr>\n        <tr *ngIf=\"legend\">\n            <td style=\"display: block; padding: 5px;\">\n                <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onBarLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\">\n                </amexio-d3-legend>\n            </td>\n        </tr>\n    </table>\n    <!-- <table *ngIf=\"!(data && data.length >0)\" class=\"lmask\">\n        \n    </table > -->\n    <!-- <div *ngIf=\"data.length < 1\" class=\"lmask\" style=\"padding-top:50%\">\n    </div> -->\n\n</div>"
                },] },
    ];
    AmexioD3BarChartComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef },
        { type: DeviceQueryService }
    ]; };
    AmexioD3BarChartComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        horizontal: [{ type: Input }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        labelflag: [{ type: Input, args: ['label',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        drillid: [{ type: ViewChild, args: ['drillid',] }],
        DOM: [{ type: ViewChild, args: ['domref',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
        hScale: [{ type: Input, args: ['horizontal-scale',] }],
        tickscount: [{ type: Input, args: ['yaxis-interval',] }],
        xtickscount: [{ type: Input, args: ['xaxis-interval',] }],
        showzeroflag: [{ type: Input, args: ['show-zero-values',] }],
        _data: [{ type: Input, args: ['data',] }]
    };
    return AmexioD3BarChartComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AmexioD3BaseLineComponent = /** @class */ (function (_super) {
    __extends(AmexioD3BaseLineComponent, _super);
    function AmexioD3BaseLineComponent(deviceQueryService) {
        var _this = _super.call(this, 'line') || this;
        _this.deviceQueryService = deviceQueryService;
        _this._data = [];
        _this.xarr = [];
        _this.displayindex = 0;
        _this.svgheight = 300;
        // @Input('xaxis-interval') xtickscount: number = 3;
        _this.linecolor = [];
        _this.slant = false;
        return _this;
    }
    Object.defineProperty(AmexioD3BaseLineComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._data = v;
            if (this._data && (this._data.length > 0)) {
                this.createXYAxisData();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @protected
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.createXYAxisData = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        this.labelcolor;
        this.xaxisdata = [];
        this.yaxisdata = [];
        this.multiseriesdata = [];
        this.legenddata = [];
        this.legends = [];
        this.xaxisname = this.data[0][0].label;
        /** @type {?} */
        var msdarray = [];
        /** @type {?} */
        var count = 0
        // ************************************************
        ;
        // ************************************************
        if (this.displayfield) {
            // find displayfield index
            this._data[0].forEach((/**
             * @param {?} element
             * @param {?} index
             * @return {?}
             */
            function (element, index) {
                if (element.label == _this.displayfield) {
                    _this.displayindex = index;
                }
            }));
        }
        // ***********************************************
        for (var index = 0; index < this._data[0].length; index++) {
            /** @type {?} */
            var legend = this._data[0][index];
            msdarray[index] = [];
            /** @type {?} */
            var obj = {};
            obj['label'] = legend.label;
            if ((this.linecolor.length > 0) && this.linecolor[index]) {
                obj['color'] = this.linecolor[index];
            }
            else {
                obj['color'] = this.predefinedcolors[index];
            }
            this.legenddata.push(obj);
            // this.legenddata.push({'label':legend.label,'color':this.predefinedcolors[index+1]});
            if (index > 0) {
                /** @type {?} */
                var obj_1 = {};
                obj_1['label'] = legend.label;
                if ((this.linecolor.length > 0) && this.linecolor[count]) {
                    obj_1['color'] = this.linecolor[count];
                }
                else {
                    obj_1['color'] = this.predefinedcolors[count];
                }
                this.legends.push(obj_1);
                count++;
                // this.legends.push({'label':legend.label,'color':this.predefinedcolors[index]});
            }
        }
        /** @type {?} */
        var i = 0;
        // xaxisdata yaxisdata msdarray is formed here
        this._data.forEach((/**
         * @param {?} object
         * @return {?}
         */
        function (object) {
            if (i > 0) {
                /** @type {?} */
                var j_1 = 0;
                /** @type {?} */
                var xobj_1 = {};
                object.forEach((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) {
                    // if (j === 0) {
                    //     this.xaxisdata.push({ 'label': a, 'value': a });
                    // } else {
                    //     this.yaxisdata.push({ 'label': a, 'value': a });
                    // }
                    if ((j_1 > 0) && (j_1 !== _this.displayindex)) {
                        _this.yaxisdata.push({ 'label': a, 'value': a });
                    }
                    if (j_1 == 0) {
                        xobj_1['value'] = a;
                    }
                    if (j_1 == _this.displayindex) {
                        xobj_1['label'] = a;
                    }
                    msdarray[j_1].push(a);
                    j_1++;
                }));
                _this.xaxisdata.push(xobj_1);
            }
            i++;
        }));
        for (var index = 0; index < msdarray.length; index++) {
            /** @type {?} */
            var element = msdarray[index];
            if ((index > 0) && (index !== this.displayindex)) {
                /** @type {?} */
                var md = [];
                for (var j = 0; j < element.length; j++) {
                    /** @type {?} */
                    var v = element[j];
                    md.push({ 'legend': this.legenddata[index].label, 'label': this.xaxisdata[j].label, 'value': v });
                }
                this.multiseriesdata.push(md);
                this.legends[index - 1].data = md;
            }
        }
    };
    /**
     * @param {?} width
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.recalculatescale = /**
     * @param {?} width
     * @return {?}
     */
    function (width) {
        var _this = this;
        // consider fontsize to be 10
        this.xaxisdata;
        /** @type {?} */
        var summationwidth = 0;
        if (!this.displayfield) {
            this.xaxisdata.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (typeof (element.label) == 'string') {
                    summationwidth = summationwidth + (element.label.length * 10);
                }
                if (typeof (element.label) == 'number') {
                    /** @type {?} */
                    var n = _this.findDigitCount(element.label);
                    summationwidth = summationwidth + (n * 10);
                }
            }));
        }
        if (this.displayfield) {
            this.xaxisdata.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                // if (typeof (element.label) == 'string') {
                summationwidth = summationwidth + (element.label.length * 10);
                // }
            }));
        }
        if (this.displayfield && this.slant) {
            summationwidth = this.xaxisdata.length * 10;
        }
        if (summationwidth > width) {
            //  function call
            this.calculatexaxisarray(summationwidth, width);
        }
    };
    /**
     * @param {?} summationwidth
     * @param {?} width
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.calculatexaxisarray = /**
     * @param {?} summationwidth
     * @param {?} width
     * @return {?}
     */
    function (summationwidth, width) {
        /** @type {?} */
        var interval = Math.round(summationwidth / width);
        this.generateNewAxis(interval, width);
    };
    /**
     * @param {?} interval
     * @param {?} avlwidth
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.generateNewAxis = /**
     * @param {?} interval
     * @param {?} avlwidth
     * @return {?}
     */
    function (interval, avlwidth) {
        this.xaxisdata;
        /** @type {?} */
        var arr = [];
        /** @type {?} */
        var newarr = [];
        /** @type {?} */
        var min$$1;
        /** @type {?} */
        var max$$1;
        //    make Array out of this.xaxisdata
        this.xaxisdata.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            // if (typeof (element.label) == 'number') {
            arr.push(element.label);
            // }
        }));
        //null check on arr
        if (arr.length > 0) {
            // find min
            min$$1 = Math.min.apply(null, arr);
            //find max
            max$$1 = Math.max.apply(null, arr);
            /** @type {?} */
            var temp = Math.round(avlwidth / 10);
            /** @type {?} */
            var differential = (temp - (temp * 0.2)) / 4;
            //form new arr
            /** @type {?} */
            var j = Math.round(differential);
            //   hjlkllll
            /** @type {?} */
            var i = void 0;
            /** @type {?} */
            var isredundant = false;
            if (!this.displayfield) {
                newarr[0] = min$$1;
                for (i = 1; j < this.xaxisdata.length; i++) {
                    j = Math.round((differential * i) + i);
                    isredundant = this.checkArrayRedundancy(newarr, Math.round(j));
                    if (isredundant) {
                        newarr[i] = Math.round(j + 1);
                    }
                    else {
                        newarr[i] = Math.round(j);
                    }
                }
                this.sortarr(newarr);
            }
            if (this.displayfield) {
                for (i = 0; j < this.xaxisdata.length; i++) {
                    j = Math.round((differential * i) + i);
                    if (this.xaxisdata[j]) {
                        newarr[i] = this.xaxisdata[j].label;
                    }
                    else {
                        if (this.xaxisdata[j + 1]) {
                            newarr[i] = this.xaxisdata[j + 1].label;
                        }
                    }
                }
                this.xarr = newarr;
            }
        }
    };
    /**
     * @param {?} newarr
     * @param {?} chknum
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.checkArrayRedundancy = /**
     * @param {?} newarr
     * @param {?} chknum
     * @return {?}
     */
    function (newarr, chknum) {
        /** @type {?} */
        var inc = 0;
        newarr.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (chknum == element) {
                inc++;
            }
        }));
        if (inc > 1) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} newarr
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.sortarr = /**
     * @param {?} newarr
     * @return {?}
     */
    function (newarr) {
        /** @type {?} */
        var i;
        /** @type {?} */
        var j;
        /** @type {?} */
        var temp;
        for (i = 0; i < newarr.length; ++i) {
            for (j = i + 1; j < newarr.length; ++j) {
                if (newarr[i] > newarr[j]) {
                    temp = newarr[i];
                    newarr[i] = newarr[j];
                    newarr[j] = temp;
                }
            }
        }
        //    newarr;
        this.setXaxisData(newarr);
    };
    /**
     * @param {?} newarr
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.setXaxisData = /**
     * @param {?} newarr
     * @return {?}
     */
    function (newarr) {
        var _this = this;
        this.xarr = newarr;
        // this.xaxisdata.push({label: 125, value: 125});
        // chk if newarr elements are present in xaxisdata
        /** @type {?} */
        var ispresent = false;
        newarr.forEach((/**
         * @param {?} arrelement
         * @return {?}
         */
        function (arrelement) {
            _this.xaxisdata.forEach((/**
             * @param {?} xaxiselement
             * @return {?}
             */
            function (xaxiselement) {
                if (arrelement == xaxiselement.label) {
                    ispresent = true;
                }
            }));
            if (!ispresent) {
                //create & push an obj in xaxisdata
                /** @type {?} */
                var obj = { label: arrelement, value: arrelement };
                _this.xaxisdata.push(obj);
            }
            ispresent = false;
        }));
        //  
        // change arr to arr of objs
        /** @type {?} */
        var xdata = [];
        newarr.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var obj = { label: element, value: element };
            xdata.push(obj);
        }));
        this.xaxisdata;
        this.xaxisdata1 = xdata;
        //initialize xaxis data
    };
    /**
     * @param {?} n
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.findDigitCount = /**
     * @param {?} n
     * @return {?}
     */
    function (n) {
        /** @type {?} */
        var count = 0;
        if (n >= 1)
            ++count;
        while (n / 10 >= 1) {
            n /= 10;
            ++count;
        }
        return count;
    };
    /**
     * @param {?} width
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.setXinterval = /**
     * @param {?} width
     * @return {?}
     */
    function (width) {
        var _this = this;
        /** @type {?} */
        var interval = Math.round(this.xaxisdata.length / this.xinterval);
        /** @type {?} */
        var arr = [];
        /** @type {?} */
        var newarr = [];
        //    make Array out of this.xaxisdata
        this.xaxisdata.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (typeof (element.label) == 'number') {
                arr.push(element.label);
            }
        }));
        /** @type {?} */
        var min$$1 = Math.min.apply(null, arr);
        //find max
        /** @type {?} */
        var max$$1 = Math.max.apply(null, arr);
        /** @type {?} */
        var j = interval;
        /** @type {?} */
        var i;
        /** @type {?} */
        var ispresent = false;
        newarr[0] = min$$1;
        // assa
        for (i = 1; j < max$$1; i++) {
            j = interval * i;
            newarr[i] = j;
        }
        // newarr[i] = max;
        //inset numbers which are not present in xaxis domain but present in newarr
        newarr.forEach((/**
         * @param {?} arrelement
         * @return {?}
         */
        function (arrelement) {
            _this.xaxisdata.forEach((/**
             * @param {?} xaxiselement
             * @return {?}
             */
            function (xaxiselement) {
                if (xaxiselement.label == arrelement) {
                    ispresent = true;
                }
            }));
            if (!ispresent) {
                /** @type {?} */
                var obj = { label: arrelement, value: arrelement };
                _this.xaxisdata.push(obj);
            }
            ispresent = false;
        }));
        // this.sortarr(newarr);
        // newarr;
        // this.xaxisdata;
        this.xarr = newarr;
    };
    /**
     * @param {?} width
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.setDisplayfieldXinterval = /**
     * @param {?} width
     * @return {?}
     */
    function (width) {
        /** @type {?} */
        var interval = Math.round(this.xaxisdata.length / this.xinterval);
        /** @type {?} */
        var arr = [];
        /** @type {?} */
        var newarr = [];
        //    make Array out of this.xaxisdata
        this.xaxisdata.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            arr.push(element.label);
        }));
        /** @type {?} */
        var min$$1 = 0;
        /** @type {?} */
        var max$$1 = this.xaxisdata.length - 1;
        /** @type {?} */
        var j = interval;
        /** @type {?} */
        var i;
        newarr[0] = this.xaxisdata[min$$1].label;
        for (i = 1; j < max$$1; i++) {
            newarr[i] = this.xaxisdata[j].label;
            j = interval * i;
        }
        newarr.push(this.xaxisdata[max$$1].label);
        this.xarr = newarr;
    };
    // formatxaxisarr() {
    //     let formattedarr = [];
    //     let temp = '';
    //     if(this.xarr) {
    //     if (typeof (this.xarr[0]) == 'string') {
    //         // treat string
    //         this.xarr.forEach(element => {
    //             if (typeof (element) == 'string') {
    //                 temp = '';
    //                 temp = element[0] + element[1] + '..'
    //                 formattedarr.push(temp)
    //             }
    //         });
    //          this.xarr = formattedarr;
    //     }
    //     if (typeof (this.xarr[0]) == 'number') {
    //         // treat numerials
    //         // wrap numbers
    //     }
    //              }
    // }
    // formatxaxisarr() {
    //     let formattedarr = [];
    //     let temp = '';
    //     if(this.xarr) {
    //     if (typeof (this.xarr[0]) == 'string') {
    //         // treat string
    //         this.xarr.forEach(element => {
    //             if (typeof (element) == 'string') {
    //                 temp = '';
    //                 temp = element[0] + element[1] + '..'
    //                 formattedarr.push(temp)
    //             }
    //         });
    //          this.xarr = formattedarr;
    //     }
    //     if (typeof (this.xarr[0]) == 'number') {
    //         // treat numerials
    //         // wrap numbers
    //     }
    //              }
    // }
    /**
     * @protected
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.initChart = 
    // formatxaxisarr() {
    //     let formattedarr = [];
    //     let temp = '';
    //     if(this.xarr) {
    //     if (typeof (this.xarr[0]) == 'string') {
    //         // treat string
    //         this.xarr.forEach(element => {
    //             if (typeof (element) == 'string') {
    //                 temp = '';
    //                 temp = element[0] + element[1] + '..'
    //                 formattedarr.push(temp)
    //             }
    //         });
    //          this.xarr = formattedarr;
    //     }
    //     if (typeof (this.xarr[0]) == 'number') {
    //         // treat numerials
    //         // wrap numbers
    //     }
    //              }
    // }
    /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        //RESIZE STEP 2 START
        this.svg = select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight);
        this.svg.selectAll("*").remove();
        /** @type {?} */
        var margin = { top: 40, right: 20, bottom: 30, left: 40 };
        //RESIZE STEP 2 ENDS HERE
        /** @type {?} */
        var width = +this.svgwidth - margin.left - margin.right;
        // this.xaxisdata;
        if (this.xinterval) {
            if (!this.displayfield) {
                this.setXinterval(width);
            }
            if (this.displayfield) {
                this.setDisplayfieldXinterval(width);
            }
        }
        else {
            this.recalculatescale(width);
        }
        /** @type {?} */
        var height = +this.svgheight - margin.top - margin.bottom;
        /** @type {?} */
        var g = this.svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        var x = scalePoint()
            .rangeRound([0, width])
            .padding(0.1);
        /** @type {?} */
        var y = scaleLinear()
            .rangeRound([height, 0]);
        if (this.xaxisdata) {
            x.domain(this.xaxisdata.map((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (typeof (d.label) == 'string') {
                    return d.label;
                }
                else {
                    return parseInt(d.value);
                }
            })));
        }
        if (this.yaxisdata) {
            y.domain([0, max(this.yaxisdata, (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) { return d.value; }))]);
        }
        //add axis
        /** @type {?} */
        var xaxisbottom = axisBottom(x);
        if (this.xarr.length > 0) {
            // if(this.slant) {
            // this.formatxaxisarr();
            //  }
            xaxisbottom.tickValues(this.xarr);
        }
        if (this.deviceQueryService.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xaxisbottom
                // d3.axisBottom(x)
                // .tickValues(this.xarr)
                ).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                /** @type {?} */
                var bottomaxis = g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xaxisbottom);
                if (this.slant) {
                    // this.formatxaxisarr(); 
                    bottomaxis.selectAll("text")
                        .attr("cursor", "pointer")
                        .on("mouseover", (/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) {
                        return tooltip.style("visibility", "visible");
                    }))
                        .on("mousemove", (/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) {
                        return tooltip.html(_this.callXaxisTooltip(d))
                            .style("top", (event$1.pageY - 10) + "px")
                            .style("left", (event$1.pageX + 10) + "px");
                    }))
                        .on("mouseout", (/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) {
                        return tooltip.style("visibility", "hidden");
                    }))
                        .on("click", (/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) {
                        return tooltip.style("visibility", "hidden");
                    }))
                        .attr("y", 0)
                        .attr("x", 9)
                        .attr("dy", ".35em")
                        .attr("transform", "rotate(90)")
                        .style("text-anchor", "start")
                        .style("font-size", 10);
                }
            }
        }
        else {
            g.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(xaxisbottom).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start")
                .style("font-size", 10);
        }
        g.append("g")
            .call(axisLeft(y).ticks(this.tickscount));
        // tickSize(0,10));
        /** @type {?} */
        var rawdata = this._data;
        // call function to alter legends if displayfield condn satisfy
        this.alterLegend();
        return {
            g: g, x: x, y: y, height: height, width: width, rawdata: rawdata
        };
        // 
    };
    /**
     * @protected
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.plotScale = /**
     * @protected
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(axisBottom(x).
                tickSize(-this.width).tickFormat(''));
        }
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y).ticks(this.tickscount)
                .tickSize(-width).tickFormat(''));
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.legendClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        // const legendNode = JSON.parse(JSON.stringify(node));
        // delete legendNode.color;
        // legendNode.data.forEach(element => {
        //     delete element.legend;
        // });
        var _this = this;
        // const legendNode = JSON.parse(JSON.stringify(node));
        // delete legendNode.color;
        // legendNode.data.forEach(element => {
        //     delete element.legend;
        // });
        /** @type {?} */
        var obj = {};
        obj["label"] = node.label;
        /** @type {?} */
        var data = [];
        node.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var object = {};
            object[element.legend] = element.value;
            object[_this.xaxisname] = element.label;
            //   object[element.label] = element.value;
            data.push(object);
        }));
        obj["data"] = data;
        this.onLegendClick.emit(obj);
        // this.onLegendClick.emit(legendNode);
    };
    /**
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.alterLegend = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.linelegends = [];
        if (this.displayfield) {
            this.legends.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (element.label !== _this.displayfield) {
                    _this.linelegends.push(element);
                }
            }));
        }
        else {
            this.linelegends = this.legends;
        }
    };
    /**
     * @param {?} tooltipdata
     * @return {?}
     */
    AmexioD3BaseLineComponent.prototype.callXaxisTooltip = /**
     * @param {?} tooltipdata
     * @return {?}
     */
    function (tooltipdata) {
        /** @type {?} */
        var obj = {};
        obj['x-axis'] = tooltipdata;
        return this.toolTipForBar(obj);
    };
    AmexioD3BaseLineComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        xinterval: [{ type: Input, args: ['data',] }, { type: Input, args: ['xaxis-interval',] }],
        httpurl: [{ type: Input, args: ['http-url',] }],
        httpmethod: [{ type: Input, args: ['http-method',] }],
        tickscount: [{ type: Input, args: ['yaxis-interval',] }],
        linecolor: [{ type: Input, args: ['color',] }],
        displayfield: [{ type: Input, args: ['display-field',] }],
        slant: [{ type: Input, args: ['rotate',] }]
    };
    return AmexioD3BaseLineComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AmexioD3LineComponent = /** @class */ (function (_super) {
    __extends(AmexioD3LineComponent, _super);
    function AmexioD3LineComponent(deviceQueryService, cdf, myservice) {
        var _this = _super.call(this, deviceQueryService) || this;
        _this.deviceQueryService = deviceQueryService;
        _this.cdf = cdf;
        _this.myservice = myservice;
        _this.labelcolor = '';
        return _this;
    }
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    resp_1 = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                }), (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.data = _this.getResponseData(resp_1);
                        _this.plotD3Chart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.plotD3Chart();
                }), 0);
            }
        }
    };
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.data) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.data = _this.getResponseData(_this.data);
                _this.plotD3Chart();
            }), 0);
        }
    };
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.validateData = /**
     * @return {?}
     */
    function () {
        if (this.data) ;
        else {
            return "lmask";
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3LineComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                resp = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
            }), (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(resp);
                    _this.drawChart();
                }), 0);
            }));
        }
    };
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.plotD3Chart();
        }), 0);
    };
    //RESIZE STEP 5 STARTS
    //RESIZE STEP 5 STARTS
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.resize = 
    //RESIZE STEP 5 STARTS
    /**
     * @return {?}
     */
    function () {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            // this.resizewt = this.chartId.nativeElement.offsetWidth;
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotD3Chart();
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioD3LineComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var linechart = this.initChart();
        this.rawdata = linechart.rawdata;
        // this.svgwidth = linechart.width;
        this.plotScale(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width);
        this.plotLine(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width, [], tooltip, (1));
        if (this.multiseriesdata) {
            for (var index = 0; index < this.multiseriesdata.length; index++) {
                this.plotLine(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width, this.multiseriesdata[index], tooltip, (index + 1));
            }
        }
    };
    //RESIZE STEP 4 STARTS
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.validateresize = 
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.wt) ;
            else {
                _this.resize();
            }
        }), 0);
    };
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 4 ENDS
    /**
     * @private
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @param {?} data
     * @param {?} tooltip
     * @param {?} i
     * @return {?}
     */
    AmexioD3LineComponent.prototype.plotLine = 
    //RESIZE STEP 4 ENDS
    /**
     * @private
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @param {?} data
     * @param {?} tooltip
     * @param {?} i
     * @return {?}
     */
    function (g, x, y, height, width, data, tooltip, i) {
        var _this = this;
        /** @type {?} */
        var line$$1 = line()
            .x((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return x(d.label); }))
            .y((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return y(d.value); }));
        g.append("path")
            .datum(data)
            .attr("fill", "none")
            .attr("stroke", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (_this.linecolor.length > 0) {
                if (_this.linecolor[i - 1]) {
                    return _this.linecolor[i - 1];
                }
                else {
                    return _this.predefinedcolors[i - 1];
                }
            }
            else if (_this.linecolor.length < 1) {
                return _this.predefinedcolors[i - 1];
                //  return tempcolor;
            }
        }))
            .attr("stroke-width", 1.5)
            .attr("d", line$$1);
        g.selectAll('dot')
            .data(data)
            .enter()
            .append('circle')
            .attr("cx", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return x(d.label); }))
            .attr("cy", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return y(d.value); }))
            .attr('r', 2)
            .attr("fill", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (_this.linecolor.length > 0) {
                if (_this.linecolor[i - 1]) {
                    return _this.linecolor[i - 1];
                }
                else {
                    return _this.predefinedcolors[i - 1];
                }
            }
            else if (_this.linecolor.length < 1) {
                //  return tempcolor;
                return _this.predefinedcolors[i - 1];
            }
        }))
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.html(_this.callTooltip(d))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.lineChartClick(d);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
        }));
        //lets plot labels here
        if (this.labelflag) {
            g.selectAll('label')
                .data(data)
                .enter()
                .append('text')
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                // if (this.labelcolor && this.labelcolor.length > 0) {
                //   return this.labelcolor;
                // } else {
                //   return "black";
                // }
                if (_this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else if (_this.linecolor.length > 0) {
                    if (_this.linecolor[i - 1]) {
                        return _this.linecolor[i - 1];
                    }
                    else {
                        return _this.predefinedcolors[i - 1];
                    }
                }
                else if (_this.linecolor.length < 1) {
                    //  return tempcolor;
                    return _this.predefinedcolors[i - 1];
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @param {?} i
             * @return {?}
             */
            function (d, i) {
                return x(d.label);
            }))
                .attr("y", (/**
             * @param {?} d
             * @param {?} i
             * @return {?}
             */
            function (d, i) {
                return y(d.value) - 10;
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return d.value;
            }))
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.html(_this.callTooltip(d))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.lineChartClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
        }
    };
    /**
     * @param {?} d
     * @return {?}
     */
    AmexioD3LineComponent.prototype.lineChartClick = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var obj = {};
        obj[d.legend] = d.value;
        obj[this.xaxisname] = d.label;
        this.chartClick(obj);
    };
    /**
     * @param {?} tooltipdata
     * @return {?}
     */
    AmexioD3LineComponent.prototype.callTooltip = /**
     * @param {?} tooltipdata
     * @return {?}
     */
    function (tooltipdata) {
        /** @type {?} */
        var obj = {};
        obj[tooltipdata.legend] = tooltipdata.value;
        obj[this.xaxisname] = tooltipdata.label;
        return this.toolTipForBar(obj);
    };
    AmexioD3LineComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-line',
                    template: "<div  #chartId *ngIf=\"drillableFlag\" #divid (window:resize)=\"validateresize()\"> \n    <table [ngClass]=\"validateData()\"  style=\"width: 100%;\" > \n            <ng-container *ngIf = \"title.length > 0\">\n            <tr><td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td></tr>\n            </ng-container>\n            <tr>\n                <td>\n                    <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n                    </svg>            \n                </td>\n            </tr>\n            <tr  *ngIf=\"legend\">\n                <td style=\"display: block; padding: 5px;\">\n                        <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"legendClick($event)\" \n                                            [data]=\"linelegends\" style=\"height:100%;\">\n                        </amexio-d3-legend>\n                </td>\n            \n            </tr>\n    </table>\n    <!-- <div *ngIf=\"data.length < 1\" class=\"lmask\" style=\"padding-top:50%\">\n        </div> -->\n    </div>\n    \n    <!-- {{legends | json}} -->"
                },] },
    ];
    AmexioD3LineComponent.ctorParameters = function () { return [
        { type: DeviceQueryService },
        { type: ChangeDetectorRef },
        { type: CommanDataService }
    ]; };
    AmexioD3LineComponent.propDecorators = {
        labelcolor: [{ type: Input, args: ['label-color',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        drillid: [{ type: ViewChild, args: ['drillid',] }]
    };
    return AmexioD3LineComponent;
}(AmexioD3BaseLineComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BarstackComponent = /** @class */ (function (_super) {
    __extends(BarstackComponent, _super);
    function BarstackComponent(myservice, cdf, device) {
        var _this = _super.call(this, 'barstack') || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.device = device;
        _this.maxYValue = 0;
        _this.data = [];
        _this.barwidth = 0;
        _this.title = "";
        _this.legend = true;
        _this.color = [];
        _this.svgheight = 300;
        _this.onLegendClick = new EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    BarstackComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    _this.httpresponse = response;
                    _this.data = _this.getResponseData(response);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                }), (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.transformData(_this.data);
                        _this.plotChart();
                    }), 0);
                }));
            }
            else if (this.data1) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.transformData(_this.data1);
                    _this.plotChart();
                }), 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    BarstackComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.httpresponse = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
            }), (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.drawChart();
                }), 0);
            }));
        }
    };
    /**
     * @return {?}
     */
    BarstackComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.data = _this.getResponseData(_this.httpresponse);
            _this.transformData(_this.data);
            _this.plotChart();
        }), 0);
    };
    /**
     * @param {?} data1
     * @return {?}
     */
    BarstackComponent.prototype.transformData = /**
     * @param {?} data1
     * @return {?}
     */
    function (data1) {
        var _this = this;
        this.keyArray = [];
        this.legendArray = [];
        data1.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        function (element, i) {
            if (i == 0) {
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} index
                 * @return {?}
                 */
                function (innerelement, index) {
                    if (index > 0) {
                        _this.legendArray[innerelement] = { 'data': [] };
                        _this.keyArray.push(innerelement);
                    }
                    else if (index == 0) {
                        _this.xaxis = innerelement;
                    }
                }));
            }
        }));
        /** @type {?} */
        var tempinnerarray;
        tempinnerarray = [];
        data1.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var obj_1 = {};
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} innerindex
                 * @return {?}
                 */
                function (innerelement, innerindex) {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        var key = _this.keyArray[innerindex - 1];
                        obj_1[key] = element[innerindex];
                        /** @type {?} */
                        var legenddata = _this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'value': element[innerindex], 'label': element[0] });
                        }
                    }
                }));
                tempinnerarray.push(obj_1);
            }
        }));
        this.data = [];
        tempinnerarray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            _this.data.push(element);
        }));
        /** @type {?} */
        var maxY = 0;
        /** @type {?} */
        var yaxismaxArray = [];
        //find max for yaxis
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            var _loop_1 = function (key, value) {
                _this.keyArray.forEach((/**
                 * @param {?} key1
                 * @return {?}
                 */
                function (key1) {
                    if (key == key1) {
                        maxY = maxY + value;
                    }
                })); //keyarray loop ends here
            };
            try {
                for (var _a = __values(Object.entries(element)), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                    _loop_1(key, value);
                } //for ends here
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
            }
            yaxismaxArray.push(maxY);
            maxY = 0;
            var e_1, _d;
        })); // foreach ends
        // foreach ends
        /** @type {?} */
        var tempLarge = 0;
        /** @type {?} */
        var i;
        for (i = 0; i < yaxismaxArray.length; i++) {
            if (yaxismaxArray[i] > tempLarge) {
                this.maxYValue = yaxismaxArray[i];
            } //if ends
        } // for ends
        this.legends = [];
        this.keyArray.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            /** @type {?} */
            var legenddata = _this.legendArray[element];
            if (_this.color.length > 0) {
                /** @type {?} */
                var object = { 'label': element, 'color': _this.color[index], 'data': legenddata.data };
                _this.legends.push(object);
            }
            else {
                /** @type {?} */
                var object = { 'label': element, 'color': _this.predefinedcolors[index], 'data': legenddata.data };
                _this.legends.push(object);
            }
        }));
    };
    /**
     * @return {?}
     */
    BarstackComponent.prototype.plotChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var margin = { top: 30, right: 30, bottom: 90, left: 60 };
        /** @type {?} */
        var colors = this.predefinedcolors;
        if (this.device.IsDesktop()) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        //this.svgwidth = this.chartId.nativeElement.offsetWidth;
        /** @type {?} */
        var data;
        data = this.data;
        /** @type {?} */
        var keysetarray = [];
        if (this.httpmethod && this.httpurl) {
            try {
                for (var _a = __values(Object.entries(this.data[0])), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                    keysetarray.push(key);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this.keyArray = keysetarray;
            this.keyArray.splice(0, 1);
        }
        /** @type {?} */
        var series = stack().keys(this.keyArray)
            .offset(stackOffsetDiverging)(this.data);
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height
        //  = this.svgheight - margin.bottom - margin.top;
        ;
        //  = this.svgheight - margin.bottom - margin.top;
        this.svg = select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight);
        if (this.device.IsDesktop()) {
            this.offsetheight = this.chartId.nativeElement.offsetHeight;
            //  - margin.bottom -margin.top;
            height = this.offsetheight;
        }
        else {
            height = this.chartId.nativeElement.offsetHeight - 10;
        }
        /** @type {?} */
        var x = scaleBand()
            .domain(data.map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return d[Object.keys(d)[0]];
        })))
            .rangeRound([margin.left, this.svgwidth - margin.right])
            .padding(0.35);
        /** @type {?} */
        var y = scaleLinear()
            .domain([min(this.stackMin(series)),
            this.maxYValue
            // d3.max(this.stackMax(series))
        ])
            .rangeRound([height - margin.bottom, margin.top]);
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + y(0) + ")")
                    .call(axisBottom(x)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + y(0) + ")")
                    .call(axisBottom(x));
            }
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + y(0) + ")")
                .call(axisBottom(x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        this.svg.append("g")
            .attr("transform", "translate(" + margin.left + ",0)")
            .call(axisLeft(y).ticks(this.tickscount));
        this.plotLine(this.svg, x, y, height, width, margin.left);
        /** @type {?} */
        var svgRect = this.svg.append("g")
            .selectAll("g")
            .data(series)
            .enter().append("g")
            .attr("fill", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        function (d, index) {
            if (_this.color.length > 0) {
                if (_this.color[index]) {
                    return _this.color[index];
                }
                else {
                    return colors[index];
                }
            }
            else {
                return colors[index];
            }
        }))
            .selectAll("rect")
            .data((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return d;
        }));
        svgRect.enter().append("rect")
            .attr("width", x.bandwidth()).attr('id', (/**
         * @param {?} d
         * @param {?} i
         * @return {?}
         */
        function (d, i) {
            return d.data[i];
        }))
            .attr("x", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return x(+d.data[Object.keys(d.data)[0]]);
        }))
            .attr("y", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        function (d, index) {
            return y(d[1]);
        }))
            .attr("cursor", "pointer")
            .attr("height", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        function (d, index) {
            return y(d[0]) - y(d[1]);
        }))
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.html(_this.setKey(d))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.setBarClickText(d);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
            // this.chartClick(d);
        }));
        // -------------------------
        if (this.labelflag) {
            svgRect.enter()
                .append("text")
                .style("font-weight", "bold")
                .style("font-size", "1vw")
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (_this.labelcolor && _this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return x(+d.data[Object.keys(d.data)[0]]) + x.bandwidth() / 2;
            }))
                .attr("y", (/**
             * @param {?} d
             * @param {?} index
             * @return {?}
             */
            function (d, index) {
                return y(d[1]) + 20;
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if ((d[Object.keys(d)[1]] - d[Object.keys(d)[0]]) > 0) {
                    return d[Object.keys(d)[1]] - d[Object.keys(d)[0]];
                }
            }))
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.html(_this.setKey(d))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.setBarClickText(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
                // this.chartClick(d);
            }));
        }
        var e_2, _d;
    };
    /**
     * @param {?} serie
     * @return {?}
     */
    BarstackComponent.prototype.stackMin = /**
     * @param {?} serie
     * @return {?}
     */
    function (serie) {
        return min(serie, (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d[0]; }));
    };
    //RESIZE STEP 4 STARTS
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    BarstackComponent.prototype.validateresize = 
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.wt) ;
            else {
                _this.resize();
            }
        }), 0);
    };
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    BarstackComponent.prototype.resize = 
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    function () {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotChart();
    };
    /**
     * @param {?} svg
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @param {?} m
     * @return {?}
     */
    BarstackComponent.prototype.plotLine = /**
     * @param {?} svg
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @param {?} m
     * @return {?}
     */
    function (svg, x, y, height, width, m) {
        if (this.hScale) {
            svg.append('g')
                .attr("transform", "translate(" + m + ",0)")
                .attr("color", "lightgrey")
                .call(axisLeft(y).ticks(this.tickscount)
                .tickSize(-width).tickFormat(''));
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BarstackComponent.prototype.legendClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var obj = {};
        obj["label"] = event.label;
        /** @type {?} */
        var data = [];
        event.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var object = {};
            object[element.label] = element.value;
            data.push(object);
        }));
        obj["data"] = data;
        this.onLegendClick.emit(obj);
    };
    /**
     * @param {?} d
     * @return {?}
     */
    BarstackComponent.prototype.setKey = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var diff = d[0] - d[1];
        if (diff < 0) {
            diff = (diff * (-1));
        }
        try {
            for (var _a = __values(Object.entries(d.data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (value == diff) {
                    /** @type {?} */
                    var object = {};
                    object[key] = value;
                    object[this.xaxis] = d.data[Object.keys(d.data)[0]];
                    return (this.toolTipForBar(object));
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        var e_3, _d;
    };
    /**
     * @param {?} d
     * @return {?}
     */
    BarstackComponent.prototype.setBarClickText = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var diff = d[0] - d[1];
        if (diff < 0) {
            diff = (diff * (-1));
        }
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(d.data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (value == diff) {
                    object[key] = value;
                    object[this.xaxis] = d.data[Object.keys(d.data)[0]];
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_4) throw e_4.error; }
        }
        this.chartClick(object);
        var e_4, _d;
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    BarstackComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_5, _a;
    };
    BarstackComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-barstack',
                    template: "<div #chartId *ngIf=\"drillableFlag\" (window:resize)=\"validateresize()\">\n    <table *ngIf=\"data1.length > 0\" style=\"width: 100%;\">\n            <ng-container *ngIf = \"title.length > 0\">\n        <tr>\n            <td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n        </tr>\n            </ng-container>\n        <tr>\n            <td>\n                <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n                </svg>\n            </td>\n        </tr>\n        <tr *ngIf=\"legend\">\n            <td style=\"display: block; padding: 5px;\">\n                <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"legendClick($event)\" [data]=\"legends\"\n                    style=\"height:100%;\">\n                </amexio-d3-legend>\n            </td>\n\n        </tr>\n    </table>\n    <div *ngIf=\"data1.length < 1\" class=\"lmask\" style=\"padding-top:50%\">\n    </div>\n</div>",
                    styles: [""]
                },] },
    ];
    BarstackComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef },
        { type: DeviceQueryService }
    ]; };
    BarstackComponent.propDecorators = {
        data1: [{ type: Input, args: ['data',] }],
        barwidth: [{ type: Input }],
        title: [{ type: Input }],
        legend: [{ type: Input }],
        color: [{ type: Input }],
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        tickscount: [{ type: Input, args: ['yaxis-interval',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        drillid: [{ type: ViewChild, args: ['drillid',] }],
        onLegendClick: [{ type: Output }]
    };
    return BarstackComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GroupbarComponent = /** @class */ (function (_super) {
    __extends(GroupbarComponent, _super);
    function GroupbarComponent(myservice, cdf, device) {
        var _this = _super.call(this, 'multibar') || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.device = device;
        _this.data = [];
        _this.legend = true;
        _this.barwidth = 0;
        _this.onLegendClick = new EventEmitter();
        _this.svgheight = 300;
        _this.showzeroflag = true;
        _this.groupbarchartArray = [];
        _this.urllegendArray = [];
        _this.defualtColors = [];
        _this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
        return _this;
    }
    /**
     * @return {?}
     */
    GroupbarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            /** @type {?} */
            var res_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    res_1 = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                }), (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.data = _this.getResponseData(res_1);
                        _this.initializeData();
                        _this.plotD3Chart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.initializeData();
                    _this.plotD3Chart();
                }), 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    GroupbarComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                resp = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
            }), (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(resp);
                    _this.drawChart();
                }), 0);
            }));
        }
    };
    /**
     * @return {?}
     */
    GroupbarComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.initializeData();
            _this.plotD3Chart();
        }), 0);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    GroupbarComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @return {?}
     */
    GroupbarComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        this.convertToJSON();
        this.plotGroupBarChart();
        this.transformData(this.data);
    };
    /**
     * @private
     * @return {?}
     */
    GroupbarComponent.prototype.plotGroupBarChart = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        this.defualtColors = this.predefinedcolors;
        // this.svgwidth = this.chartId.nativeElement.offsetWidth;
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        var margin = { top: 20, right: 20, bottom: 50, left: 40 };
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height = this.svgheight - margin.top - margin.bottom;
        this.svg = select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        var x0 = scaleBand()
            .rangeRound([0, width])
            .padding(0.2);
        /** @type {?} */
        var x1 = scaleBand().padding(0.1);
        /** @type {?} */
        var y = scaleLinear()
            .rangeRound([height, 0]);
        //setting x and y domains
        this.years = this.groupbarchartArray.map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.labels; }));
        /** @type {?} */
        var label = this.groupbarchartArray[0].values.map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.label; }));
        x0.domain(this.years);
        x1.domain(label).rangeRound([0, x0.bandwidth()]);
        y.domain([0, max(this.groupbarchartArray, (/**
             * @param {?} labels
             * @return {?}
             */
            function (labels) { return max(labels.values, (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d.value; })); }))]);
        //dynamic barwidth
        if (this.barwidth > 0) {
            this.barwidth = this.barwidth;
        }
        else {
            this.barwidth = x0.bandwidth;
        }
        // add x axis to svg
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x0)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x0));
            }
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(axisBottom(x0)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        //add y axis to svg
        this.svg.append("g")
            .call(axisLeft(y)
            .ticks(10).ticks(this.tickscount));
        this.plotLine(this.svg, y, height, width);
        // svg.select('.y').transition().duration(500).delay(1300).style('opacity', '1');
        //adding bars
        /** @type {?} */
        var slice = this.svg.selectAll(".slice")
            .data(this.groupbarchartArray)
            .enter().append("g")
            .attr("class", "g")
            .attr("transform", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            (d.values).forEach((/**
             * @param {?} element
             * @param {?} index
             * @return {?}
             */
            function (element, index) {
                //splice 0 
                if (element.value && (element.value < 1)) {
                    d.values.splice(0, index);
                }
            }));
            return "translate(" + x0(d.labels) + ",0)";
        }));
        slice.selectAll("rect")
            .data((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.values; }))
            .enter().
            append("rect")
            .attr("width", x1.bandwidth)
            .attr("x", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return x1(d.label);
        }))
            .style("fill", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        function (d, index) {
            if (_this.colors.length > 0) {
                if (_this.colors[index]) {
                    return _this.colors[index];
                }
                else {
                    return _this.defualtColors[index];
                }
            }
            else {
                return _this.defualtColors[index];
            }
        }))
            .attr("y", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return y(0); }))
            .attr("height", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return height - y(0); }))
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.html(_this.setKey(d))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        })).on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.groupbarClick(d);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
        }));
        // -------------------------------------------------------
        if (this.labelflag) {
            slice.selectAll("text")
                .data((/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d.values; }))
                .enter().append("text")
                .attr("width", x1.bandwidth)
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return x1(d.label) + x1.bandwidth() / 2;
            }))
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return y(d.value); }))
                .attr("height", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return height - y(0); }))
                .style("font-weight", "bold")
                .style("font-size", "1vw")
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (_this.labelcolor && _this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                // if((d.value > 0) ) {
                // return d.value;
                // }
                if (_this.showzeroflag) {
                    return d.value;
                }
                else if (!_this.showzeroflag) {
                    if (d.value > 0) {
                        return d.value;
                    }
                }
            }))
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.html(_this.setKey(d)
                //  this.toolTipContent(d)
                )
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            })).on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.groupbarClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
                // this.chartClick(d);
            }));
        }
        slice.selectAll("rect")
            .attr("y", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return y(d.value);
        }))
            .attr("height", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return height - y(d.value); }));
    };
    /**
     * @param {?} d
     * @return {?}
     */
    GroupbarComponent.prototype.groupbarClick = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var object = {};
        object[d.label] = d.value;
        object[this.xaxisData] = d.xaxis;
        this.chartClick(object);
    };
    //RESIZE STEP 4 STARTS
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    GroupbarComponent.prototype.validateresize = 
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.wt) ;
            else {
                _this.resize();
            }
        }), 0);
    };
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    GroupbarComponent.prototype.resize = 
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    function () {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotGroupBarChart();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    GroupbarComponent.prototype.legendClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var obj = {};
        obj["label"] = event.label;
        /** @type {?} */
        var data = [];
        event.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var object = {};
            object[element.label] = element.value;
            data.push(object);
        }));
        obj["data"] = data;
        this.onLegendClick.emit(obj);
    };
    //2d array to json conversion
    //2d array to json conversion
    /**
     * @return {?}
     */
    GroupbarComponent.prototype.convertToJSON = 
    //2d array to json conversion
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var groupChartObj = { "labels": "", values: [] };
        /** @type {?} */
        var firstRowOfData = this.data[0];
        this.xaxisData = this.data[0][0];
        for (var i = 1; i < this.data.length; i++) {
            /** @type {?} */
            var multiSeriesArray = [];
            /** @type {?} */
            var valueOfJ = void 0;
            for (var j = 1; j < this.data[i].length; j++) {
                valueOfJ = this.data[i][0];
                /** @type {?} */
                var singleBarObj = {};
                singleBarObj["value"] = this.data[i][j];
                singleBarObj["label"] = firstRowOfData[j];
                singleBarObj["xaxis"] = this.data[i][0];
                multiSeriesArray.push(singleBarObj);
            }
            if (multiSeriesArray.length) {
                groupChartObj["values"] = multiSeriesArray;
                /** @type {?} */
                var newLabelsValues = valueOfJ;
                /** @type {?} */
                var newGroupDataObj = Object.assign({}, groupChartObj);
                newGroupDataObj['labels'] = newLabelsValues + '';
                this.groupbarchartArray.push(newGroupDataObj);
            }
        }
    };
    /**
     * @return {?}
     */
    GroupbarComponent.prototype.transformto2dArray = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var result = [];
        result.push("years");
        this.data.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        function (element, i) {
            if (i == 0) {
                element.values.forEach((/**
                 * @param {?} element2
                 * @return {?}
                 */
                function (element2) {
                    result.push(element2.label);
                }));
            }
        }));
        this.urllegendArray.push(result);
        /** @type {?} */
        var temparray = [];
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            temparray = [];
            /** @type {?} */
            var values;
            /** @type {?} */
            var year = element.labels;
            temparray.push(year);
            element.values.forEach((/**
             * @param {?} element2
             * @return {?}
             */
            function (element2) {
                values = element2.value;
                temparray.push(values);
            }));
            _this.urllegendArray.push(temparray);
        }));
    };
    /**
     * @param {?} data
     * @return {?}
     */
    GroupbarComponent.prototype.transformData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.keyArray = [];
        this.legendArray = [];
        data.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        function (element, i) {
            if (i == 0) {
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} index
                 * @return {?}
                 */
                function (innerelement, index) {
                    if (index > 0) {
                        _this.legendArray[innerelement] = { 'data': [] };
                        _this.keyArray.push(innerelement);
                    }
                }));
            }
        }));
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var obj_1 = {};
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} innerindex
                 * @return {?}
                 */
                function (innerelement, innerindex) {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        var key = _this.keyArray[innerindex - 1];
                        obj_1[key] = element[innerindex];
                        /** @type {?} */
                        var legenddata = _this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'value': element[innerindex], 'label': element[0] });
                        }
                    }
                }));
            }
        }));
        this.legends = [];
        this.keyArray.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            /** @type {?} */
            var legenddata = _this.legendArray[element];
            /** @type {?} */
            var object;
            if (_this.colors.length > 0) {
                object = { 'label': element, 'color': _this.colors[index], 'data': legenddata.data };
            }
            else {
                object = { 'label': element, 'color': _this.predefinedcolors[index], 'data': legenddata.data };
            }
            _this.legends.push(object);
        }));
    };
    /**
     * @param {?} d
     * @return {?}
     */
    GroupbarComponent.prototype.setKey = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var object = {};
        object[d.label] = d.value;
        object[this.xaxisData] = d.xaxis;
        return (this.toolTipForBar(object));
    };
    /**
     * @param {?} g
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    GroupbarComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    };
    GroupbarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-multiseries',
                    template: "<div  #chartId *ngIf=\"drillableFlag\" (window:resize)=\"validateresize()\"> \n<table *ngIf=\"data.length > 0\"  style=\"width: 100%;\">\n    <tr *ngIf = \"title.length > 0\" >\n        <td colspan=\"2\" style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n    </tr>\n    <tr>\n        <td>\n            <svg [attr.height]=\"height\" [attr.width]=\"width\" [attr.id]=\"componentId\">\n            </svg>\n        </td>\n    </tr>\n    <tr *ngIf=\"legend\">\n        <td style=\"display: block; padding: 5px;\">\n            <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"legendClick($event)\" [data]=\"legends\" style=\"height:100%;\"></amexio-d3-legend>\n        </td>\n    </tr>\n</table>\n<div *ngIf=\"data.length < 1\" class=\"lmask\" style=\"padding-top:50%\">\n    </div>\n</div>\n\n\n",
                    styles: [""]
                },] },
    ];
    GroupbarComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef },
        { type: DeviceQueryService }
    ]; };
    GroupbarComponent.propDecorators = {
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        drillid: [{ type: ViewChild, args: ['drillid',] }],
        data: [{ type: Input, args: ['data',] }],
        legend: [{ type: Input }],
        barwidth: [{ type: Input }],
        onLegendClick: [{ type: Output }],
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        tickscount: [{ type: Input, args: ['yaxis-interval',] }],
        showzeroflag: [{ type: Input, args: ['show-zero-values',] }]
    };
    return GroupbarComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CombochartComponent = /** @class */ (function (_super) {
    __extends(CombochartComponent, _super);
    function CombochartComponent(myservice, cdf, device) {
        var _this = _super.call(this, 'combochart') || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.device = device;
        _this.svgheight = 300;
        _this.lineColor = "black";
        _this.label = false;
        _this.horizontal = false;
        _this.barwidth = 0;
        //   @Input('line-data-index') lineInput: any;
        _this.lineInput = [];
        _this.barInput = [];
        _this.showzeroflag = true;
        _this.simpleComboFlag = false;
        _this.completeconverteddata = [];
        _this.simpleCombodata = [];
        _this.groupbarchartArray = [];
        _this.highercolorindex = 0;
        _this.colorflag = false;
        _this.keyArray = [];
        _this.transformeddata = [];
        _this.legendArray = [];
        _this.legends = [];
        _this.LineArray = [];
        _this.outputData = [];
        _this.higherdot1colorindex = 0;
        return _this;
    }
    /**
     * @return {?}
     */
    CombochartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    resp_1 = response;
                    _this.httpresponse = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                }), (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.data = _this.getResponseData(resp_1);
                        _this.transformData();
                        _this.initializeData();
                        _this.plotD3Chart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.transformData();
                    _this.initializeData();
                    _this.plotD3Chart();
                }), 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CombochartComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.httpresponse = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
            }), (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    // this.data = this.getResponseData(resp);
                    _this.drawChart();
                }), 0);
            }));
        }
    };
    /**
     * @return {?}
     */
    CombochartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.data = _this.getResponseData(_this.httpresponse);
            _this.transformData();
            _this.initializeData();
            _this.plotD3Chart();
        }), 0);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    CombochartComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @return {?}
     */
    CombochartComponent.prototype.transformData = /**
     * @return {?}
     */
    function () {
        this.formDatastructure();
        this.tranasforsimplejson();
    };
    /**
     * @return {?}
     */
    CombochartComponent.prototype.formDatastructure = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // for line
        //call createjson() for complete data for line
        this.lineflag = true;
        this.createjson(this.data);
        //validate scenarios
        //validate scenario1: bar + line + data
        if ((this.barInput.length > 0) && (this.lineInput.length > 0) &&
            (this.data[0].length > 2)) {
            this.sc1 = true;
            this.createData1(this.barInput, this.data);
        }
        else if ((this.lineInput.length > 0) &&
            //##get it checked
            (this.data[0].length > 1)) {
            this.sc2 = true;
            //if so set sc2barflag
            this.data[0].forEach((/**
             * @param {?} column
             * @return {?}
             */
            function (column) {
                _this.lineInput.forEach((/**
                 * @param {?} linename
                 * @return {?}
                 */
                function (linename) {
                    if (column !== linename) {
                        _this.sc2barflag = true;
                        // u can plot bar now
                    }
                }));
            }));
            this.createData1(null, this.data);
            //chk if sc2barflag is set or reset
            if (this.sc2barflag == true) ;
        } //else if of sc2 ends
        else if ((this.barInput.length > 0) && (this.data[0].length > 1)) {
            this.sc3 = true;
            this.createData1(this.barInput, this.data);
        }
        else if ((this.barInput.length < 1) && (this.lineInput.length < 1) && this.data[0].length > 1) {
            this.sc4 = true;
            this.createData1(null, this.data);
        }
    };
    /**
     * @param {?} inpdata
     * @param {?} fulldata
     * @return {?}
     */
    CombochartComponent.prototype.createData1 = /**
     * @param {?} inpdata
     * @param {?} fulldata
     * @return {?}
     */
    function (inpdata, fulldata) {
        var _this = this;
        /** @type {?} */
        var linearr = [];
        this.lineInput.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            linearr.push(element.column);
        }));
        this.firstrow = this.data[0];
        /** @type {?} */
        var dummyArray = [];
        dummyArray.push(0);
        fulldata.forEach((/**
         * @param {?} record
         * @param {?} index
         * @return {?}
         */
        function (record, index) {
            if (index === 0) {
                // THIS LOGIC IS USED FOR FINDING INDEXS AND ADD INTO dummyArray ARRAY
                record.forEach((/**
                 * @param {?} innerObject
                 * @param {?} innerIndex
                 * @return {?}
                 */
                function (innerObject, innerIndex) {
                    //validates scenario1 and 3
                    if (_this.sc1 == true || _this.sc3 == true) {
                        _this.barInput.forEach((/**
                         * @param {?} elementOfInputData
                         * @return {?}
                         */
                        function (elementOfInputData) {
                            //aja
                            if (innerObject === elementOfInputData.column) {
                                //dummyarray has index stack
                                dummyArray.push(innerIndex);
                            }
                        }));
                    } //sc1 and sc3 validation done
                    //validates scenario 2
                    if (_this.sc2 == true) {
                        if (_this.sc2barflag == true) {
                            _this.lineInput.forEach((/**
                             * @param {?} elementOfLineData
                             * @return {?}
                             */
                            function (elementOfLineData) {
                                if ((innerObject !== elementOfLineData.column) && (innerIndex !== 0)) {
                                    if (linearr.includes(innerObject) == false) {
                                        if (dummyArray.includes(innerIndex)) ;
                                        else {
                                            dummyArray.push(innerIndex);
                                            return;
                                        }
                                    } // }
                                    //   }
                                    // });
                                }
                            }));
                        }
                    }
                }));
                //validates scenario 4
                if (_this.sc4 == true) {
                    // chk if barflag is set
                    /** @type {?} */
                    var columns = _this.data[0].length;
                    if (columns > 1) {
                        dummyArray.push(1);
                    }
                }
                // dummyArray.push(0);
                /** @type {?} */
                var firstArray_1 = [];
                // FOR FIRST RECORD
                dummyArray.forEach((/**
                 * @param {?} object
                 * @param {?} dummyIndex
                 * @return {?}
                 */
                function (object, dummyIndex) {
                    firstArray_1.push(record[object]);
                }));
                _this.outputData.push(firstArray_1);
            }
            else {
                /** @type {?} */
                var newData_1 = [];
                record.forEach((/**
                 * @param {?} innerObject
                 * @param {?} innerIndex
                 * @return {?}
                 */
                function (innerObject, innerIndex) {
                    dummyArray.forEach((/**
                     * @param {?} object
                     * @param {?} dummyIndex
                     * @return {?}
                     */
                    function (object, dummyIndex) {
                        if (innerIndex === object) {
                            newData_1.push(innerObject);
                        }
                    }));
                }));
                _this.outputData.push(newData_1);
            }
        }));
        this.createjson(this.outputData);
        // this.formLegendData(this.outputData);
    };
    /**
     * @param {?} arraydata
     * @return {?}
     */
    CombochartComponent.prototype.createjson = /**
     * @param {?} arraydata
     * @return {?}
     */
    function (arraydata) {
        /** @type {?} */
        var groupChartObj = { "labels": "", values: [] };
        this.groupbarchartArray = [];
        /** @type {?} */
        var firstRowOfData = arraydata[0];
        this.xaxisData = this.data[0][0];
        for (var i = 1; i < arraydata.length; i++) {
            /** @type {?} */
            var multiSeriesArray = [];
            /** @type {?} */
            var valueOfJ = void 0;
            for (var j = 1; j < arraydata[i].length; j++) {
                valueOfJ = arraydata[i][0];
                /** @type {?} */
                var singleBarObj = {};
                singleBarObj["value"] = arraydata[i][j];
                singleBarObj["label"] = firstRowOfData[j];
                singleBarObj["xaxis"] = arraydata[i][0];
                multiSeriesArray.push(singleBarObj);
            }
            if (multiSeriesArray.length) {
                groupChartObj["values"] = multiSeriesArray;
                /** @type {?} */
                var newLabelsValues = valueOfJ;
                /** @type {?} */
                var newGroupDataObj = Object.assign({}, groupChartObj);
                newGroupDataObj['labels'] = newLabelsValues + '';
                this.groupbarchartArray.push(newGroupDataObj);
            }
        }
        if (this.lineflag) {
            this.groupbarchartArray;
            this.LineArray = this.groupbarchartArray;
        }
        else {
            this.groupbarchartArray = [];
            /** @type {?} */
            var firstRowOfData_1 = arraydata[0];
            // this.xaxisData = this.data[0][0];
            for (var i = 1; i < arraydata.length; i++) {
                /** @type {?} */
                var multiSeriesArray = [];
                /** @type {?} */
                var valueOfJ = void 0;
                for (var j = 1; j < arraydata[i].length; j++) {
                    valueOfJ = arraydata[i][0];
                    /** @type {?} */
                    var singleBarObj = {};
                    singleBarObj["value"] = arraydata[i][j];
                    singleBarObj["label"] = firstRowOfData_1[j];
                    singleBarObj["xaxis"] = arraydata[i][0];
                    multiSeriesArray.push(singleBarObj);
                }
                if (multiSeriesArray.length) {
                    groupChartObj["values"] = multiSeriesArray;
                    /** @type {?} */
                    var newLabelsValues = valueOfJ;
                    /** @type {?} */
                    var newGroupDataObj = Object.assign({}, groupChartObj);
                    newGroupDataObj['labels'] = newLabelsValues + '';
                    this.groupbarchartArray.push(newGroupDataObj);
                }
            }
            this.groupbarchartArray;
        }
    };
    /**
     * @return {?}
     */
    CombochartComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        //plot multiseries chart
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var colors = this.predefinedcolors;
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        var margin = { top: 20, right: 20, bottom: 50, left: 40 };
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height = this.svgheight - margin.top - margin.bottom;
        this.svg = select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        var x0 = scaleBand()
            .rangeRound([0, width])
            .padding(0.2);
        /** @type {?} */
        var x1 = scaleBand().padding(0.1);
        /** @type {?} */
        var y = scaleLinear()
            .rangeRound([height, 0]);
        //setting x and y domains
        this.years = this.groupbarchartArray.map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.labels; }));
        /** @type {?} */
        var label = this.groupbarchartArray[0].values.map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.label; }));
        x0.domain(this.years);
        x1.domain(label).rangeRound([0, x0.bandwidth()]);
        y.domain([0, max(this.groupbarchartArray, (/**
             * @param {?} labels
             * @return {?}
             */
            function (labels) { return max(labels.values, (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d.value; })); }))]);
        //dynamic barwidth
        if (this.barwidth > 0) {
            this.barwidth = this.barwidth;
        }
        else {
            this.barwidth = x0.bandwidth;
        }
        // add x axis to svg
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x0)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x0));
            }
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(axisBottom(x0)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        //add y axis to svg
        this.svg.append("g")
            .call(axisLeft(y)
            .ticks(this.tickscount));
        this.plotLineForMultiSeries(this.svg, y, height, width);
        //adding bars
        /** @type {?} */
        var slice = this.svg.selectAll(".slice")
            .data(this.groupbarchartArray)
            .enter().append("g")
            .attr("class", "g")
            .attr("transform", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return "translate(" + x0(d.labels) + ",0)"; }));
        slice.selectAll("rect")
            .data((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.values; }))
            .enter().append("rect")
            .attr("width", x1.bandwidth)
            .attr("x", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return x1(d.label);
        }))
            .style("fill", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        function (d, index) {
            _this.higherdot1colorindex = index;
            _this.legendcolorindex = index;
            return colors[index];
        }))
            .attr("y", (/**
         * @param {?} d
         * @param {?} ind
         * @return {?}
         */
        function (d, ind) { return y(d.value); }))
            .attr("height", (/**
         * @param {?} d
         * @param {?} ind
         * @return {?}
         */
        function (d, ind) {
            return height - y(d.value);
        }))
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.html(_this.setKey(d))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        })).on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.groupbarClick(d);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
        }));
        // -------------------------------------------------------
        //bar label
        // if (this.labelflag) {
        slice.selectAll("text")
            .data((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.values; }))
            .enter().append("text")
            .attr("opacity", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            /** @type {?} */
            var visibility = false;
            if (_this.barInput.length > 0) {
                _this.barInput.forEach((/**
                 * @param {?} barname
                 * @return {?}
                 */
                function (barname) {
                    if ((barname.column == d.label) && (barname.label == true)) {
                        visibility = true;
                        return;
                    }
                }));
                if (visibility) {
                    return 1;
                }
                else {
                    return 0;
                }
            } // outer if 
            else if ((_this.sc4 == true) && (_this.label == true)) {
                return 1;
            }
            else {
                return 0;
            }
        }))
            .attr("width", x1.bandwidth)
            .attr("x", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return x1(d.label) + x1.bandwidth() / 2;
        }))
            .attr("y", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return y(d.value); }))
            .attr("height", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return height - y(0); }))
            .style("font-weight", "bold")
            .style("font-size", "1vw")
            .attr("text-anchor", "middle")
            .attr("fill", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (_this.labelcolor.length > 0) {
                return _this.labelcolor;
            }
            else {
                return "black";
            }
        })) //bar label
            .text((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (_this.showzeroflag) {
                return d.value;
            }
            else if (!_this.showzeroflag) {
                if (d.value > 0) {
                    return d.value;
                }
            }
            // return d.value;
        }))
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.html(_this.setKey(d))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        })).on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.groupbarClick(d);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
        }));
        // }
        slice.selectAll("rect")
            .attr("y", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return y(d.value);
        }))
            .attr("height", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return height - y(d.value); }));
        // ------------------------------------------------------------------
        //sigle / multi line code starts here
        //code here fr multi line
        /** @type {?} */
        var i;
        // let lineName;
        /** @type {?} */
        var slice1 = this.svg.selectAll(".slice")
            .data(this.transformeddata)
            .enter().append("g")
            .attr("class", "g");
        this.higherdot1colorindex++;
        this.lineInput.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (element.color) ;
            else {
                element["color"] = colors[_this.higherdot1colorindex];
                _this.higherdot1colorindex++;
            }
        }));
        //line validation for scenario 1 and 2
        if (this.lineInput.length > 0) {
            var _loop_1 = function () {
                /** @type {?} */
                var lineName = this_1.lineInput[i];
                /** @type {?} */
                var valueline = line()
                    .x((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return x0(d[Object.keys(d)[0]]);
                }))
                    .y((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) { return y(d[lineName.column]); }));
                /** @type {?} */
                var shift = margin.left + x1.bandwidth() / 2;
                slice1.append("path")
                    .data([this_1.transformeddata])
                    .attr("fill", "none")
                    .style("stroke", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    if (lineName.color) {
                        return lineName.color;
                    }
                }))
                    .attr("stroke-width", 1.5)
                    .attr("transform", "translate( " + x1.bandwidth() / 2 + ", 0 )")
                    .attr("d", valueline);
                // points1
                /** @type {?} */
                var dotslice = slice1.selectAll("dot")
                    .data(this_1.transformeddata)
                    .enter()
                    .append("circle")
                    .attr("class", "point1")
                    .attr("cursor", "pointer")
                    .style("fill", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    if (lineName.color) {
                        return lineName.color;
                    }
                }))
                    .attr("cx", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return x0(d[Object.keys(d)[0]]);
                }))
                    .attr("cy", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return y(d[lineName.column]);
                }))
                    .attr("r", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) { return 5; }))
                    .attr("transform", "translate( " + x1.bandwidth() / 2 + ", 0 )")
                    .on("mouseover", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.style("visibility", "visible");
                }))
                    .on("mousemove", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.html(_this.formTooltipLineData(d, lineName, false))
                        .style("top", (event$1.pageY - 10) + "px")
                        .style("left", (event$1.pageX + 10) + "px");
                }))
                    .on("mouseout", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.style("visibility", "hidden");
                }))
                    .on("click", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    _this.onComboLineClick(d, lineName, false);
                    _this.fordrillableClick(_this, d, event);
                    return tooltip.style("visibility", "hidden");
                }));
                // }
                // 
            };
            var this_1 = this;
            for (i = 0; i < this.lineInput.length; i++) {
                _loop_1();
            } // line code ends
        } //lineinput if condition ends here
        else if ((this.sc4 == true) && (this.data[0].length > 2)) {
            //  lineName = this.lineInput[i];
            /** @type {?} */
            var valueline = line()
                .x((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return x0(d[Object.keys(d)[0]]);
                //  return x1(d[Object.keys(d)[0]]);
            }))
                .y((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return y(d[Object.keys(d)[2]]
                // d[lineName]
                );
            }));
            /** @type {?} */
            var shift = margin.left + x1.bandwidth() / 2;
            slice1.append("path")
                .data([this.transformeddata])
                .attr("fill", "none")
                .style("stroke", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (_this.lineColor !== "black") {
                    return _this.lineColor;
                }
                else {
                    return colors[2];
                }
            }))
                .attr("stroke-width", 1.5)
                .attr("transform", "translate( " + x1.bandwidth() / 2 + ", 0 )")
                .attr("d", valueline);
            // points1
            slice1.selectAll("dot")
                .data(this.transformeddata).enter().append("circle")
                .attr("class", "point1")
                .attr("cursor", "pointer")
                .style("stroke", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (_this.lineColor !== "black") {
                    return _this.lineColor;
                }
                else {
                    return colors[2];
                }
            }))
                .style("fill", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (_this.lineColor !== "black") {
                    return _this.lineColor;
                }
                else {
                    return colors[2];
                }
            }))
                .attr("cx", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return x0(d[Object.keys(d)[0]]);
            }))
                .attr("cy", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return y(d[Object.keys(d)[2]]
                // d[lineName]
                );
            }))
                .attr("r", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return 5; }))
                .attr("transform", "translate( " + x1.bandwidth() / 2 + ", 0 )")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.html(_this.formTooltipLineData(d, null, true))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.onComboLineClick(d, null, true);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
        }
        //line label validation for scenario 1 and 2
        if (this.lineInput.length > 0) {
            var _loop_2 = function () {
                /** @type {?} */
                var lineName1 = this_2.lineInput[i];
                if (lineName1.label) {
                    if (lineName1.label == true) {
                        slice1.selectAll("labels")
                            .data(this_2.transformeddata)
                            .enter().append("text")
                            .style("font-weight", "bold")
                            .attr("text-anchor", "middle")
                            .attr("fill", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        function (d) {
                            if (lineName1.labelcolor) {
                                return lineName1.labelcolor;
                            }
                            else {
                                return "black";
                            }
                        }))
                            .attr("x", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        function (d) {
                            return x0(d[Object.keys(d)[0]]);
                        }))
                            .attr("y", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        function (d) {
                            return y(d[lineName1.column]);
                        }))
                            .text((/**
                         * @param {?} d
                         * @return {?}
                         */
                        function (d) {
                            return d[lineName1.column];
                            // d[lineName];
                        }))
                            .attr("transform", "translate( " +
                            // margin.left
                            x1.bandwidth() / 2
                            // shift
                            + ", 19 )")
                            .attr("cursor", "pointer")
                            .on("mouseover", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        function (d) {
                            return tooltip.style("visibility", "visible");
                        }))
                            .on("mousemove", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        function (d) {
                            return tooltip.html(_this.formTooltipLineData(d, lineName1, false))
                                .style("top", (event$1.pageY - 10) + "px")
                                .style("left", (event$1.pageX + 10) + "px");
                        }))
                            .on("mouseout", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        function (d) {
                            return tooltip.style("visibility", "hidden");
                        }))
                            .on("click", (/**
                         * @param {?} d
                         * @return {?}
                         */
                        function (d) {
                            _this.onComboLineClick(d, lineName1, false);
                            _this.fordrillableClick(_this, d, event);
                            return tooltip.style("visibility", "hidden");
                        }));
                    }
                }
            };
            var this_2 = this;
            for (i = 0; i < this.lineInput.length; i++) {
                _loop_2();
            }
        }
        else if ((this.sc4 == true) && (this.data[0].length > 2) && (this.label == true)) {
            //trial line label for 4th scenario
            slice1.selectAll("labels")
                .data(this.transformeddata)
                .enter().append("text")
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (_this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return x0(d[Object.keys(d)[0]]);
            }))
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return y(d[Object.keys(d)[2]]
                // d[lineName]
                );
                //  + 50;
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return d[Object.keys(d)[2]];
                // d[lineName];
            }))
                .attr("transform", "translate( " +
                // margin.left
                x1.bandwidth() / 2
                // shift
                + ", 19 )")
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.html(_this.formTooltipLineData(d, null, true))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.onComboLineClick(d, null, true);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
        }
        this.formLegendData(this.outputData);
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    CombochartComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    };
    /**
     * @param {?} d
     * @return {?}
     */
    CombochartComponent.prototype.setKey = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var object = {};
        object[d.label] = d.value;
        object[this.xaxisData] = d.xaxis;
        return (this.toolTipForBar(object));
    };
    /**
     * @return {?}
     */
    CombochartComponent.prototype.finMaxLineValue = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var lineValues = [];
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            var _loop_3 = function (key, value) {
                _this.lineInput.forEach((/**
                 * @param {?} line
                 * @return {?}
                 */
                function (line$$1) {
                    if (line$$1 == key) {
                        lineValues.push(value);
                    }
                }));
            };
            try {
                for (var _a = __values(Object.entries(element)), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                    _loop_3(key, value);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_2) throw e_2.error; }
            }
            var e_2, _d;
        }));
        /** @type {?} */
        var max$$1 = 0;
        /** @type {?} */
        var j;
        for (j = 0; j < lineValues.length; j++) {
            if (lineValues[j] > max$$1) {
                max$$1 = lineValues[j];
            }
        }
        this.lineRange = max$$1;
    };
    /**
     * @param {?} d
     * @return {?}
     */
    CombochartComponent.prototype.groupbarClick = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var object = {};
        object[d.label] = d.value;
        object[this.xaxisData] = d.xaxis;
        this.chartClick(object);
    };
    /**
     * @param {?} g
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    CombochartComponent.prototype.plotLineForMultiSeries = /**
     * @param {?} g
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    };
    //RESIZE STEP 4 STARTS
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    CombochartComponent.prototype.validateresize = 
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.wt) ;
            else {
                _this.resize();
            }
        }), 0);
    };
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    CombochartComponent.prototype.resize = 
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    function () {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotD3Chart();
    };
    /**
     * @return {?}
     */
    CombochartComponent.prototype.tranasforsimplejson = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.transformeddata = [];
        this.keyArray = this.data[0];
        this.data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var DummyObject_1 = {};
                element.forEach((/**
                 * @param {?} individualvalue
                 * @param {?} keyindex
                 * @return {?}
                 */
                function (individualvalue, keyindex) {
                    DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                })); //inner for loop ends
                _this.transformeddata.push(DummyObject_1);
            } //if ends
        })); //outer for loop ends
    };
    /**
     * @param {?} data
     * @param {?} line
     * @param {?} flag
     * @return {?}
     */
    CombochartComponent.prototype.formTooltipLineData = /**
     * @param {?} data
     * @param {?} line
     * @param {?} flag
     * @return {?}
     */
    function (data, line$$1, flag) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                //flag is considered true for forth scenario
                if (flag == true) {
                    if (key == this.data[0][2]) {
                        object[key] = value;
                    }
                } // if foe true flag ends here
                else {
                    if (key == line$$1.column) {
                        object[key] = value;
                    }
                } //else for false flag ends here
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return this.toolTipForBar(object);
        var e_3, _d;
    };
    /**
     * @param {?} data
     * @param {?} line
     * @param {?} flag
     * @return {?}
     */
    CombochartComponent.prototype.onComboLineClick = /**
     * @param {?} data
     * @param {?} line
     * @param {?} flag
     * @return {?}
     */
    function (data, line$$1, flag) {
        // flag is considered true for 4th scenario
        /** @type {?} */
        var object = {};
        /** @type {?} */
        var i = 0;
        try {
            for (var _a = __values(Object.entries(data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (i == 0 || i == 1) {
                    if (key != "color") {
                        object[key] = value;
                    }
                }
                if (flag == true) {
                    if (key == this.data[0][2]) {
                        object[key] = value;
                    }
                }
                else {
                    if (key == line$$1.column) {
                        object[key] = value;
                    }
                }
                i++;
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_4) throw e_4.error; }
        }
        //this calls base class function
        this.comboLineClick(object);
        var e_4, _d;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CombochartComponent.prototype.formLegendData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.keyArray = [];
        this.legendArray = [];
        data.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        function (element, i) {
            if (i == 0) {
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} index
                 * @return {?}
                 */
                function (innerelement, index) {
                    if (index > 0) {
                        _this.legendArray[innerelement] = { 'data': [] };
                        _this.keyArray.push(innerelement);
                    }
                }));
            }
        }));
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var obj_1 = {};
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} innerindex
                 * @return {?}
                 */
                function (innerelement, innerindex) {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        var key = _this.keyArray[innerindex - 1];
                        obj_1[key] = element[innerindex];
                        /** @type {?} */
                        var legenddata = _this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'label': element[0], 'value': element[innerindex] });
                        }
                    }
                }));
            }
        }));
        this.legends = [];
        this.keyArray.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            /** @type {?} */
            var legenddata = _this.legendArray[element];
            /** @type {?} */
            var object = { 'label': element, 'color': _this.predefinedcolors[index], 'data': legenddata.data };
            _this.legends.push(object);
        }));
        //this logic will wrk fr sc1 and sc2
        if (this.lineInput.length > 0) {
            /** @type {?} */
            var inc_1 = 1;
            this.lineInput.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                /** @type {?} */
                var object = {};
                object["label"] = element.column;
                if (element.color) {
                    object["color"] = element.color;
                }
                else {
                    object["color"] = _this.predefinedcolors[_this.legendcolorindex + inc_1];
                    inc_1++;
                }
                object["data"] = [];
                _this.legends.push(object);
            }));
            this.legends;
            this.transformeddata;
            this.legends.forEach((/**
             * @param {?} legendelement
             * @return {?}
             */
            function (legendelement) {
                _this.lineInput.forEach((/**
                 * @param {?} lineelement
                 * @return {?}
                 */
                function (lineelement) {
                    if (lineelement.column == legendelement.label) {
                        _this.transformeddata.forEach((/**
                         * @param {?} singlerow
                         * @return {?}
                         */
                        function (singlerow) {
                            /** @type {?} */
                            var obj = {};
                            // d[Object.keys(d)[0]]
                            obj["label"] = singlerow[Object.keys(singlerow)[0]];
                            obj["value"] = singlerow[legendelement.label];
                            legendelement.data.push(obj);
                        }));
                    }
                }));
            }));
        }
        //this logic works for sc4
        // chk if line column exist in data1
        if ((this.sc4 == true) && (this.data[0].length > 2)) {
            /** @type {?} */
            var object = [];
            object["label"] = this.data[0][2];
            object["color"] = this.predefinedcolors[2];
            object["data"] = [];
            this.legends.push(object);
            //logic to push data
            this.data.forEach((/**
             * @param {?} element
             * @param {?} index
             * @return {?}
             */
            function (element, index) {
                if (index > 0) {
                    /** @type {?} */
                    var object_1 = [];
                    object_1["label"] = element[0];
                    object_1["value"] = element[2];
                    _this.legends[1].data.push(object_1);
                }
            }));
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CombochartComponent.prototype.legendClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var obj = {};
        obj["label"] = event.label;
        /** @type {?} */
        var data = [];
        event.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var object = {};
            object[element.label] = element.value;
            data.push(object);
        }));
        obj["data"] = data;
        this.onLegendClick.emit(obj);
    };
    CombochartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-combochart',
                    template: " \n<div #chartId *ngIf=\"drillableFlag\" (window:resize)=\"validateresize()\">\n    <table *ngIf=\"data.length > 0\" style=\"width: 100%;\">\n      <tr *ngIf = \"title.length > 0\">\n          <td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n      </tr>\n      <tr>\n          <td>\n              <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n              </svg>\n          </td>\n      </tr>\n      <tr *ngIf=\"legend\">\n          <td style=\"display: block; padding: 5px;\">\n              <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"legendClick($event)\" [data]=\"legends\" style=\"height:100%;\">\n              </amexio-d3-legend> \n          </td>\n      </tr>\n    </table>\n    <div *ngIf=\"data.length < 1\" class=\"lmask\" style=\"padding-top:50%\">\n    </div>\n    </div>",
                    styles: [""]
                },] },
    ];
    CombochartComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef },
        { type: DeviceQueryService }
    ]; };
    CombochartComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        lineColor: [{ type: Input, args: ['line-color',] }],
        label: [{ type: Input }],
        horizontal: [{ type: Input }],
        barwidth: [{ type: Input }],
        lineInput: [{ type: Input, args: ['line-data-index',] }],
        barInput: [{ type: Input, args: ['bar-data-index',] }],
        tickscount: [{ type: Input, args: ['yaxis-interval',] }],
        showzeroflag: [{ type: Input, args: ['show-zero-values',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }]
    };
    return CombochartComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HistogramComponent = /** @class */ (function (_super) {
    __extends(HistogramComponent, _super);
    function HistogramComponent(myservice, cdf, device) {
        var _this = _super.call(this, 'histogram') || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.device = device;
        _this.svgheight = 400;
        _this.color = "blue";
        _this.datahisto = [];
        _this.values = [];
        _this.array = [];
        _this.xaxisArray = [];
        _this.yaxisArray = [];
        _this.yaxisData = [];
        _this.histogramarray = [];
        _this.histogramdata = [];
        _this.lengtharray = [];
        _this.arrayofLength = [];
        _this.chartData = [];
        _this.finaldataarray = [];
        _this.tooltipArray = [];
        _this.index = 0;
        return _this;
    }
    /**
     * @return {?}
     */
    HistogramComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.wt = this.svgwidth;
        /** @type {?} */
        var res;
        if (this.level <= 1) {
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    res = response;
                    _this.httpresponse = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                }), (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.datahisto = [];
                        _this.datahisto = _this.getResponseData(res);
                        _this.transformData();
                        _this.plotXaxis();
                        _this.plotYaxis();
                        _this.tooltipData();
                        _this.dataforChart();
                        _this.transformData1(_this.finaldataarray);
                        _this.plotChart();
                    }), 0);
                }));
            }
            else if (this.datahisto) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.datahisto = _this.getResponseData(_this.datahisto);
                    _this.transformData();
                    _this.plotXaxis();
                    _this.plotYaxis();
                    _this.tooltipData();
                    _this.dataforChart();
                    _this.transformData1(_this.finaldataarray);
                    _this.plotChart();
                }), 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    HistogramComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.httpresponse = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
            }), (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    //this.data = this.getResponseData(resp);
                    _this.drawChart();
                }), 0);
            }));
        }
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.datahisto = _this.getResponseData(_this.httpresponse);
            _this.transformData();
            _this.plotXaxis();
            _this.plotYaxis();
            _this.tooltipData();
            _this.dataforChart();
            _this.transformData1(_this.finaldataarray);
            _this.plotChart();
        }), 0);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    HistogramComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @param {?} data1
     * @return {?}
     */
    HistogramComponent.prototype.transformData1 = /**
     * @param {?} data1
     * @return {?}
     */
    function (data1) {
        var _this = this;
        this.keyArray = [];
        this.legendArray = [];
        data1.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        function (element, i) {
            if (i == 0) {
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} index
                 * @return {?}
                 */
                function (innerelement, index) {
                    if (index > 0) {
                        _this.legendArray[innerelement] = { 'data': [] };
                        _this.keyArray.push(innerelement);
                    }
                    else if (index == 0) {
                        _this.xaxis = innerelement;
                    }
                }));
            }
        }));
        /** @type {?} */
        var tempinnerarray;
        tempinnerarray = [];
        data1.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var obj_1 = {};
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} innerindex
                 * @return {?}
                 */
                function (innerelement, innerindex) {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        var key = _this.keyArray[innerindex - 1];
                        obj_1[key] = element[innerindex];
                        /** @type {?} */
                        var legenddata = _this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'value': element[innerindex], 'label': element[0] });
                        }
                    }
                }));
                tempinnerarray.push(obj_1);
            }
        }));
        this.data = [];
        tempinnerarray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            _this.data.push(element);
        }));
        this.legends = [];
        /** @type {?} */
        var element = this.datahisto[0];
        /** @type {?} */
        var object = { 'label': element[1] + " " + "of" + " " + element[0], 'color': this.color };
        this.legends.push(object);
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.plotChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var data;
        data = this.data;
        /** @type {?} */
        var series;
        series = [];
        series = stack().keys(this.keyArray)
            .offset(stackOffsetDiverging)(this.data);
        /** @type {?} */
        var i = 0;
        /** @type {?} */
        var tempdata;
        tempdata = [];
        tempdata = series;
        tempdata.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            element.forEach((/**
             * @param {?} innerelement
             * @return {?}
             */
            function (innerelement) {
                /** @type {?} */
                var singletooltip = [];
                singletooltip.push(innerelement.data.tooltipdata[i]);
                innerelement.push(singletooltip);
            }));
            i++;
        }));
        /** @type {?} */
        var chartdata = [];
        for (i = 0; i < tempdata.length - 1; i++) {
            chartdata.push(tempdata[i]);
        }
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE
        }
        /** @type {?} */
        var margin = { top: 20, right: 20, bottom: 50, left: 60 };
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height = this.svgheight - margin.top - margin.bottom;
        //const height = +svg.attr("height") - margin.top - margin.bottom;
        /** @type {?} */
        var x;
        /** @type {?} */
        var y;
        this.svg = select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        var barWidth = (width / this.chartData.length);
        x = scalePoint()
            .domain(this.xaxisArray, (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d; }))
            .rangeRound([0, width]);
        y = scaleLinear().rangeRound([height, 0]);
        y.domain([0, max(this.arrayofLength)]);
        /** @type {?} */
        var z = scaleOrdinal(schemeCategory10);
        this.arrayofLength = [];
        // add x axis to svg
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x));
            }
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(axisBottom(x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        /** @type {?} */
        var horizontalpadding = 0.05;
        //add y axis to svg
        this.svg.append("g")
            .call(axisLeft(y).ticks(this.tickscount));
        this.plotLine(this.svg, x, y, height, width);
        /** @type {?} */
        var histogramBar = this.svg.append("g")
            .selectAll("g")
            .data(chartdata)
            .enter().append("g")
            .attr("fill", this.color)
            .selectAll("rect")
            .data((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return d;
        }));
        /** @type {?} */
        var histogramBar1 = this.svg.append("g")
            .selectAll("g")
            .data(chartdata)
            .enter().append("g")
            .selectAll("labels")
            .data((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return d;
        }));
        histogramBar.enter().append("rect")
            .attr("width", barWidth - 1)
            .attr("y", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        function (d, index) {
            return y(d[1]);
        }))
            .attr("cursor", "pointer")
            .attr("height", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        function (d, index) {
            return Math.abs(y(d[0]) - y(d[1] - horizontalpadding));
        }))
            .attr("transform", (/**
         * @param {?} d
         * @param {?} i
         * @return {?}
         */
        function (d, i) {
            /** @type {?} */
            var translate = [barWidth * i, 0];
            return "translate(" + translate + ")";
        }))
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "visible");
        })).on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            /** @type {?} */
            var data = d[2];
            return tooltip.html(_this.setKey(data[0]))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        })).on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            /** @type {?} */
            var clickdata = d[2];
            _this.histogramClick(clickdata[0]);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
        }));
        if (this.labelflag) {
            histogramBar1.enter()
                .append("text")
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (_this.labelcolor && _this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .attr("y", (/**
             * @param {?} d
             * @param {?} i
             * @return {?}
             */
            function (d, i) {
                return y(d[1]);
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                /** @type {?} */
                var data;
                /** @type {?} */
                var data2;
                data = d[2];
                data2 = data[0];
                if (data2) {
                    return data2.value;
                }
                else {
                    return null;
                }
            }))
                .attr("transform", (/**
             * @param {?} d
             * @param {?} i
             * @return {?}
             */
            function (d, i) {
                /** @type {?} */
                var translate = [((barWidth * i) + barWidth / 2), (Math.abs(y(d[0]) - y(d[1] - horizontalpadding)))];
                return "translate(" + translate + ")";
            }))
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "visible");
            })).on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                /** @type {?} */
                var data = d[2];
                return tooltip.html(_this.setKey(data[0]))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            })).on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                /** @type {?} */
                var clickdata = d[2];
                _this.histogramClick(clickdata[0]);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
            }))
                .attr("cursor", "pointer");
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    HistogramComponent.prototype.histogramClick = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var object = {};
        /** @type {?} */
        var data = this.datahisto[0];
        /** @type {?} */
        var label1 = data[1];
        /** @type {?} */
        var label2 = data[0];
        if (obj.label.length) {
            object[label2 + ":"] = obj.label;
            object[label1 + ":"] = obj.value;
        }
        this.chartClick(object);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    HistogramComponent.prototype.legendClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onLegendClick.emit(this.datahisto);
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.transformData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.array = [];
        this.values = [];
        this.datahisto.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            _this.values.push(element[1]);
        }));
        for (var i = 1; i < this.values.length; i++) {
            this.array.push(this.values[i]);
        }
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.plotXaxis = /**
     * @return {?}
     */
    function () {
        this.xaxisArray = [];
        this.xaxisArray.push(0);
        /** @type {?} */
        var newvalue = 0;
        /** @type {?} */
        var value = Math.ceil(max(this.array));
        if (value % 10 == 0) {
            value = value;
        }
        else {
            value = (10 - value % 10) + value;
        }
        /** @type {?} */
        var quotient = value / 5;
        while (newvalue < value) {
            newvalue = newvalue + quotient;
            this.xaxisArray.push(newvalue);
        }
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.plotYaxis = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var tempvalue = 0;
        /** @type {?} */
        var lengthofArray = 0;
        /** @type {?} */
        var lengthcount = 0;
        /** @type {?} */
        var templength = 0;
        /** @type {?} */
        var newvalue = 0;
        this.yaxisArray = [];
        this.histogramarray = [];
        this.lengtharray = [];
        this.histogramdata = [];
        this.arrayofLength = [];
        this.chartData = [];
        this.xaxisArray.forEach((/**
         * @param {?} element1
         * @return {?}
         */
        function (element1) {
            _this.yaxisArray = [];
            _this.array.forEach((/**
             * @param {?} element2
             * @return {?}
             */
            function (element2) {
                if (tempvalue < element2 && element2 <= element1) {
                    _this.yaxisArray.push(element2);
                }
                lengthofArray = _this.yaxisArray.length;
            }));
            if (templength > lengthofArray) {
                lengthcount = templength;
            }
            else {
                lengthcount = lengthofArray;
            }
            templength = lengthcount;
            tempvalue = element1;
            _this.lengtharray.push(lengthofArray);
        }));
        /** @type {?} */
        var value = Math.ceil(templength);
        /** @type {?} */
        var quotient = value / 5;
        while (newvalue <= value) {
            newvalue = newvalue + quotient;
            this.yaxisData.push(newvalue);
        }
        for (var i = 1; i < this.histogramarray.length; i++) {
            this.histogramdata.push(this.histogramarray[i]);
        }
        for (var i = 1; i < this.lengtharray.length; i++) {
            this.arrayofLength.push(this.lengtharray[i]);
        }
        for (var i = 0; i < this.arrayofLength.length; i++) {
            /** @type {?} */
            var data = {};
            data["value"] = this.arrayofLength[i];
            this.chartData.push(data);
        }
        this.array = [];
    };
    //RESIZE STEP 4 STARTS
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    HistogramComponent.prototype.validateresize = 
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.wt) ;
            else {
                _this.resize();
            }
        }), 0);
    };
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    HistogramComponent.prototype.resize = 
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    function () {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.transformData();
        this.plotXaxis();
        this.plotYaxis();
        this.tooltipData();
        this.dataforChart();
        this.transformData1(this.finaldataarray);
        this.plotChart();
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.dataforChart = /**
     * @return {?}
     */
    function () {
        this.finaldataarray = [];
        /** @type {?} */
        var initialArray = [];
        /** @type {?} */
        var temparray = [];
        initialArray.push('level');
        /** @type {?} */
        var maxElement = Math.max.apply(null, this.arrayofLength);
        /** @type {?} */
        var maxlength = maxElement;
        /** @type {?} */
        var n = 1;
        while (n <= maxElement) {
            initialArray.push('' + n);
            n++;
        }
        initialArray.push('tooltipdata');
        /** @type {?} */
        var length = this.arrayofLength.length;
        /** @type {?} */
        var number = 1;
        /** @type {?} */
        var j = 0;
        this.finaldataarray.push(initialArray);
        for (var i = 0; i < this.arrayofLength.length; i++) {
            /** @type {?} */
            var value = this.arrayofLength[i];
            /** @type {?} */
            var tempvalue = value;
            temparray = [];
            temparray.push('' + i);
            maxElement = maxlength;
            if (value > 0) {
                while (value != 0) {
                    temparray.push(number);
                    value--;
                }
                maxElement = maxElement - tempvalue;
                while (maxElement != 0) {
                    temparray.push(0);
                    maxElement--;
                }
            }
            else {
                while (maxElement != 0) {
                    temparray.push(0);
                    maxElement--;
                }
            }
            temparray.push(this.tooltipArray[j]);
            this.finaldataarray.push(temparray);
            j++;
        }
    };
    /**
     * @return {?}
     */
    HistogramComponent.prototype.tooltipData = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var arrayofTooltip = [];
        /** @type {?} */
        var obj = { "label": "", "value": "" };
        this.datahisto.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            obj = { "label": "", "value": "" };
            obj["label"] = element[0];
            obj["value"] = element[1];
            arrayofTooltip.push(obj);
        }));
        /** @type {?} */
        var value1 = this.xaxisArray[0];
        /** @type {?} */
        var tooltipdata = [];
        var _loop_1 = function (j) {
            tooltipdata = [];
            /** @type {?} */
            var value2 = this_1.xaxisArray[j];
            arrayofTooltip.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (value1 <= element.value && element.value <= value2) {
                    /** @type {?} */
                    var tooltipobj = { "label": "", "value": "" };
                    tooltipobj["label"] = element["label"];
                    tooltipobj["value"] = element["value"];
                    tooltipdata.push(tooltipobj);
                }
            }));
            this_1.tooltipArray.push(tooltipdata);
            value1 = value2;
        };
        var this_1 = this;
        for (var j = 1; j < this.xaxisArray.length; j++) {
            _loop_1(j);
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    HistogramComponent.prototype.setKey = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var object = {};
        /** @type {?} */
        var data = this.datahisto[0];
        /** @type {?} */
        var label1 = data[1];
        /** @type {?} */
        var label2 = data[0];
        object[label2 + ":"] = obj.label;
        object[label1 + ":"] = obj.value;
        return (this.toolTipForBar(object));
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    HistogramComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    };
    HistogramComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-histogram',
                    template: "<div #chartId *ngIf=\"drillableFlag\" (window:resize)=\"validateresize()\">\n    <table *ngIf=\"datahisto.length > 0\" style=\"width: 100%;\">\n        <tr *ngIf=\"title.length > 0\">\n            <td colspan=\"2\" style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n        </tr>\n        <tr>\n            <td>\n                <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n                </svg>\n            </td>\n        </tr>\n        <tr *ngIf=\"legend\">\n            <td style=\"display: block; padding: 5px;\">\n                <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"legendClick($event)\" [data]=\"legends\" style=\"height:100%;\"></amexio-d3-legend>\n            </td>\n        </tr>\n    </table>\n    <div *ngIf=\"datahisto.length < 1\" class=\"lmask\" style=\"padding-top:50%\">\n        </div>\n</div>",
                    styles: [".bar{background-color:#3943cf;padding:.02px}"]
                },] },
    ];
    HistogramComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef },
        { type: DeviceQueryService }
    ]; };
    HistogramComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        color: [{ type: Input, args: ['color',] }],
        datahisto: [{ type: Input, args: ['data',] }],
        tickscount: [{ type: Input, args: ['yaxis-interval',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }]
    };
    return HistogramComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ScatterchartComponent = /** @class */ (function (_super) {
    __extends(ScatterchartComponent, _super);
    function ScatterchartComponent(myservice, cdf, device) {
        var _this = _super.call(this, 'scatter') || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.device = device;
        _this.svgheight = 300;
        _this.color = "blue";
        _this.zoomflag = false;
        _this.zoominitiated = false;
        _this.keyArray = [];
        _this.transformeddata = [];
        _this.legendarray = [];
        _this.resizebtnflag = false;
        return _this;
    }
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.wt = this.svgwidth;
        this.dataFormatted = [];
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    resp_1 = response;
                    _this.httpresponse = resp_1;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                }), (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.data = _this.getResponseData(resp_1);
                        _this.dataFormatted = _this.data;
                        _this.transformData(_this.dataFormatted);
                        _this.colorGeneration();
                        _this.legendCreation();
                        _this.plotScatterChart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.dataFormatted = _this.data;
                    _this.data = _this.getResponseData(_this.data);
                    _this.transformData(_this.data);
                    _this.colorGeneration();
                    _this.legendCreation();
                    _this.plotScatterChart();
                }), 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ScatterchartComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.httpresponse = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
            }), (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    //this.data = this.getResponseData(resp);
                    _this.drawChart();
                }), 0);
            }));
        }
    };
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.data = _this.getResponseData(_this.httpresponse);
            _this.dataFormatted = _this.data;
            _this.transformData(_this.data);
            _this.colorGeneration();
            _this.legendCreation();
            _this.plotScatterChart();
        }), 0);
    };
    // Method to transform data in key value pair 
    // Method to transform data in key value pair 
    /**
     * @param {?} data
     * @return {?}
     */
    ScatterchartComponent.prototype.transformData = 
    // Method to transform data in key value pair 
    /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.keyArray = data[0];
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var DummyObject_1 = {};
                element.forEach((/**
                 * @param {?} individualvalue
                 * @param {?} keyindex
                 * @return {?}
                 */
                function (individualvalue, keyindex) {
                    DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                }));
                _this.transformeddata.push(DummyObject_1);
            }
        }));
        this.data = this.transformeddata;
    };
    // Method get response data using data reader
    // Method get response data using data reader
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    ScatterchartComponent.prototype.getResponseData = 
    // Method get response data using data reader
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    // Method to plot d3 chart
    // Method to plot d3 chart
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.plotScatterChart = 
    // Method to plot d3 chart
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var margin = { top: 20, right: 20, bottom: 30, left: 60 };
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height = this.svgheight - margin.top - margin.bottom;
        /** @type {?} */
        var x;
        /** @type {?} */
        var y;
        x = scaleLinear()
            .rangeRound([0, width]);
        y = scaleLinear()
            .rangeRound([height, 0]);
        /** @type {?} */
        var xAxis = axisBottom(x);
        /** @type {?} */
        var yAxis = axisLeft(y).ticks(this.tickscount);
        this.svg = select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        x.domain([0, max(this.data, (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d[Object.keys(d)[0]]; }))]);
        y.domain([0, max(this.data, (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d[Object.keys(d)[1]]; }))]);
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xAxis).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xAxis)
                    .append("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .style("text-anchor", "start");
            }
        }
        else {
            this.svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        // this.svg.append("g")
        //   .attr("class", "x axis")
        //   .attr("transform", "translate(0," + height + ")")
        //   .call(xAxis)
        //   .append("text")
        //   .attr("class", "label")
        //   .attr("x", width)
        //   .attr("y", -6)
        //   .style("text-anchor", "end");
        this.svg.append("g")
            .attr("class", "y axis")
            .call(yAxis)
            .append("text")
            .attr("class", "label")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end");
        if (this.dataFormatted[0].length == 2) {
            this.plotLine(this.svg, x, y, height, width);
            this.node = this.svg.selectAll(".dot")
                .data(this.data)
                .enter().append("circle")
                .attr("class", "dot")
                .attr("fill", this.color)
                .attr("r", 4.5)
                .attr("cursor", "pointer")
                .attr("cx", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return x(d[Object.keys(d)[0]]);
            }))
                .attr("cy", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return y(d[Object.keys(d)[1]]); }))
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.html(_this.formTooltipData(d))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.scatterChartClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
            // ------------------------------------------------------------------------------
            if (this.labelflag) {
                this.nodelabel = this.svg.selectAll("labels")
                    .data(this.data)
                    .enter().append("text")
                    .style("font-weight", "bold")
                    .attr("text-anchor", "middle")
                    .attr("vertical-align", "middle")
                    .attr("margin-top", margin.top)
                    .attr("fill", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    if (_this.labelcolor.length > 0) {
                        return _this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                }))
                    .attr("x", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (d, i) {
                    return x(d[Object.keys(d)[0]]) + 11;
                }))
                    .attr("y", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (d, i) {
                    return y(d[Object.keys(d)[1]]);
                }))
                    .text((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return d[Object.keys(d)[1]];
                }))
                    .attr("cursor", "pointer")
                    .on("mouseover", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.style("visibility", "visible");
                }))
                    .on("mousemove", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.html(_this.formTooltipData(d))
                        .style("top", (event$1.pageY - 10) + "px")
                        .style("left", (event$1.pageX + 10) + "px");
                }))
                    .on("mouseout", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.style("visibility", "hidden");
                }))
                    .on("click", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    _this.scatterChartClick(d);
                    _this.fordrillableClick(_this, d, event);
                    return tooltip.style("visibility", "hidden");
                }));
            }
        }
        else {
            this.plotLine(this.svg, x, y, height, width);
            this.node = this.svg.selectAll(".dot")
                .data(this.transformeddata)
                .enter().append("circle")
                .attr("class", "dot")
                .attr("r", 4.5)
                .attr("cursor", "pointer")
                .attr("cx", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return x(d[Object.keys(d)[0]]);
            }))
                .attr("cy", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return y(d[Object.keys(d)[1]]); }))
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d[Object.keys(d)[4]]; }))
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.html(_this.formTooltipData(d))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.scatterChartClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
            if (this.labelflag) {
                this.nodelabel = this.svg.selectAll("labels")
                    .data(this.data)
                    .enter().append("text")
                    .style("font-weight", "bold")
                    .attr("text-anchor", "middle")
                    .attr("vertical-align", "middle")
                    .attr("margin-top", margin.top)
                    .attr("fill", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    if (_this.labelcolor.length > 0) {
                        return _this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                }))
                    .attr("x", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (d, i) {
                    return x(d[Object.keys(d)[0]]) + 11;
                }))
                    .attr("y", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (d, i) {
                    return y(d[Object.keys(d)[1]]);
                }))
                    .text((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return d[Object.keys(d)[1]];
                }))
                    .attr("cursor", "pointer")
                    .on("mouseover", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.style("visibility", "visible");
                }))
                    .on("mousemove", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.html(_this.formTooltipData(d))
                        .style("top", (event$1.pageY - 10) + "px")
                        .style("left", (event$1.pageX + 10) + "px");
                }))
                    .on("mouseout", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return tooltip.style("visibility", "hidden");
                }))
                    .on("click", (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    _this.scatterChartClick(d);
                    _this.fordrillableClick(_this, d, event);
                    return tooltip.style("visibility", "hidden");
                }));
            }
        }
        //create zoom handler 
        if (this.zoomflag) {
            this.zoominitiated = true;
            /** @type {?} */
            var zoom_handler = zoom()
                .on("zoom", this.zoom_actions.bind(this));
            zoom_handler(this.svg);
        }
    };
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.togglebtnflag = /**
     * @return {?}
     */
    function () {
        this.resizebtnflag = true;
    };
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.zoom_actions = /**
     * @return {?}
     */
    function () {
        this.node.attr("transform", event$1.transform);
        if (this.labelflag) {
            this.nodelabel.attr("transform", event$1.transform);
        }
        this.resizebtnflag = true;
        this.zoominitiated = false;
    };
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.resizesvg = /**
     * @return {?}
     */
    function () {
        // this.svg = null;
        this.svg.selectAll("*").remove();
        this.plotScatterChart();
        this.resizebtnflag = false;
    };
    // Method to form tooltip data
    // Method to form tooltip data
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    ScatterchartComponent.prototype.formTooltipData = 
    // Method to form tooltip data
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return this.toolTipForBar(object);
        var e_2, _d;
    };
    // Method on chart click
    // Method on chart click
    /**
     * @param {?} event
     * @return {?}
     */
    ScatterchartComponent.prototype.scatterChartClick = 
    // Method on chart click
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (key !== 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.chartClick(object);
        var e_3, _d;
    };
    // method to create Legend
    // method to create Legend
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.legendCreation = 
    // method to create Legend
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.dataFormatted[0].length == 2) {
            this.legends = [];
            /** @type {?} */
            var element = this.dataFormatted[0];
            /** @type {?} */
            var object = { 'label': element[0] + " " + "vs" + " " + element[1], 'color': this.color };
            this.legends.push(object);
        }
        else {
            this.legends = [];
            this.legendarray.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                /** @type {?} */
                var legendobject = {};
                legendobject['label'] = element.label;
                legendobject['color'] = element.color;
                _this.legends.push(legendobject);
            }));
        }
    };
    // Method on Legend Click
    // Method on Legend Click
    /**
     * @param {?} legendevent
     * @return {?}
     */
    ScatterchartComponent.prototype.onScatterLegendClick = 
    // Method on Legend Click
    /**
     * @param {?} legendevent
     * @return {?}
     */
    function (legendevent) {
        var _this = this;
        if (this.dataFormatted[0].length == 2) {
            this.onLegendClick.emit(this.data);
        }
        else {
            this.legendarray.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (legendevent.label == element.label) {
                    /** @type {?} */
                    var arr = element.value;
                    /** @type {?} */
                    var temparr_1 = [];
                    arr.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    function (element) {
                        /** @type {?} */
                        var obj = {};
                        try {
                            for (var _a = __values(Object.entries(element)), _b = _a.next(); !_b.done; _b = _a.next()) {
                                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                                if (key !== 'color') {
                                    obj[key] = value;
                                }
                            } //for end
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                        temparr_1.push(obj);
                        var e_4, _d;
                    })); //for each ends
                    _this.legendClick(temparr_1);
                }
            }));
        }
    };
    //RESIZE STEP 4 STARTS
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.validateresize = 
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.wt) ;
            else {
                _this.resize();
            }
        }), 0);
    };
    //RESIZE STEP 4 ENDS
    // Method for responsiveness
    //RESIZE STEP 4 ENDS
    // Method for responsiveness
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.resize = 
    //RESIZE STEP 4 ENDS
    // Method for responsiveness
    /**
     * @return {?}
     */
    function () {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotScatterChart();
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    ScatterchartComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(axisBottom(x).
                tickSize(-this.width).tickFormat(''));
        }
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    };
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.colorGeneration = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendarray = [];
        /** @type {?} */
        var i = 0;
        /** @type {?} */
        var names = this.dataFormatted
            .map((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e[2]; }))
            .filter((/**
         * @param {?} e
         * @param {?} i
         * @param {?} a
         * @return {?}
         */
        function (e, i, a) { return a.indexOf(e) === i; }));
        var _loop_1 = function (j) {
            /** @type {?} */
            var value = [];
            /** @type {?} */
            var obj = { "label": "", "color": "", "value": [] };
            this_1.transformeddata.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (element[Object.keys(element)[2]] == names[j]) {
                    element['color'] = _this.predefinedcolors[i];
                    value.push(element);
                }
            }));
            obj["value"] = value;
            obj["label"] = names[j];
            obj["color"] = this_1.predefinedcolors[i];
            this_1.legendarray.push(obj);
            i++;
        };
        var this_1 = this;
        for (var j = 1; j < names.length; j++) {
            _loop_1(j);
        }
    };
    /**
     * @return {?}
     */
    ScatterchartComponent.prototype.formLegendData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendData = [];
        this.legendarray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var legendobject = {};
            legendobject['label'] = element.label;
            legendobject['color'] = element.color;
            _this.legendData.push(legendobject);
        }));
    };
    ScatterchartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-scatter',
                    template: "<div #chartId  *ngIf=\"drillableFlag\" (window:resize)=\"validateresize()\">\n        <table *ngIf=\"data.length > 0\"  style=\"width: 100%;\">\n            <tr >\n                <td colspan=\"2\" style=\"font-size: 18px; font-weight: bold; \"> {{title}}\n                 <span *ngIf=\"resizebtnflag\">\n               <button  type=\"reset\" class=\"fa fa-search-minus\" style=\"cursor: pointer; float:right\" (click)=\"resizesvg()\">\n               </button>\n               </span>     \n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n                    </svg>\n                </td>\n            </tr>\n            <tr *ngIf=\"legend\">\n                <td style=\"display: block; padding: 5px;\">\n                    <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onScatterLegendClick($event)\" [data]=\"legends\" style=\"height:100%;\"></amexio-d3-legend>\n                </td>\n            </tr>\n        </table>\n        <div *ngIf=\"data.length < 1\" class=\"lmask\" style=\"padding-top:50%\">\n            </div>\n    </div>",
                    styles: [""]
                },] },
    ];
    ScatterchartComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef },
        { type: DeviceQueryService }
    ]; };
    ScatterchartComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        color: [{ type: Input, args: ['color',] }],
        zoomflag: [{ type: Input, args: ['zoom-enable',] }],
        tickscount: [{ type: Input, args: ['yaxis-interval',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }]
    };
    return ScatterchartComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MultiareaComponent = /** @class */ (function (_super) {
    __extends(MultiareaComponent, _super);
    function MultiareaComponent(myservice, cdf, device) {
        var _this = _super.call(this, "areachart") || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.device = device;
        _this.svgheight = 350;
        _this.colorarray = [];
        _this.onLegendClick = new EventEmitter();
        _this.onTooltipClick = new EventEmitter();
        _this.togglelabel = false;
        _this.margin = {};
        _this.keyArray = [];
        _this.transformeddata = [];
        _this.data1 = [];
        _this.legendArray = [];
        return _this;
    }
    /**
     * @return {?}
     */
    MultiareaComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.wt = this.svgwidth;
        this.togglelabel = false;
        if (this.level <= 1) {
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    _this.httpresponse = response;
                    _this.data = _this.getResponseData(response);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                }), (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.transformData(_this.data);
                        _this.initAreaChart();
                        _this.plotD3Chart();
                    }), 0);
                }));
            }
            else if (this.data1) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.transformData(_this.data);
                    _this.initAreaChart();
                    _this.plotD3Chart();
                }), 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MultiareaComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.httpresponse = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
            }), (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    //this.data = this.getResponseData(resp);
                    _this.drawChart();
                }), 0);
            }));
        }
    };
    /**
     * @return {?}
     */
    MultiareaComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.data = _this.getResponseData(_this.httpresponse);
            _this.transformData(_this.data);
            _this.initAreaChart();
            _this.plotD3Chart();
        }), 0);
    };
    /**
     * @return {?}
     */
    MultiareaComponent.prototype.initAreaChart = /**
     * @return {?}
     */
    function () {
        this.tooltip = this.toolTip(d3);
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        this.margin = { top: 30, right: 44, bottom: 50, left: 30 },
            this.width = this.svgwidth - this.margin.left - this.margin.right,
            this.height = this.svgheight - this.margin.top - this.margin.bottom;
        //find max and initialize max
        this.maximumValue = this.findMaxData(this.data);
        this.x = scalePoint()
            .range([0, this.width]);
        // .padding(0.1);
        this.y = scaleLinear()
            .rangeRound([this.height, 0]);
        this.areaArray = [];
        //set x y domain
        this.areaArray = this.data.map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d[Object.keys(d)[0]]; }));
        this.x.domain(this.areaArray);
        this.y.domain([0, this.maximumValue]);
        //initialize svg
        this.svg =
            select("#" + this.componentId)
                .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
                .attr("width", this.width + this.margin.left + this.margin.right)
                .attr("height", this.height + this.margin.top + this.margin.bottom);
        this.predefinedColors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
    };
    /**
     * @return {?}
     */
    MultiareaComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        this.formLegendData();
        /** @type {?} */
        var counter;
        /** @type {?} */
        var g = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
        // add the X 
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                g.append("g")
                    .attr("transform", "translate(0," + this.height + ")")
                    .call(axisBottom(this.x)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                g.append("g")
                    .attr("transform", "translate(0," + this.height + ")")
                    .call(axisBottom(this.x));
            }
        }
        else {
            g.append("g")
                .attr("transform", "translate(0," + this.height + ")")
                .call(axisBottom(this.x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        // add the Y Axis
        g.append("g")
            .call(axisLeft(this.y).ticks(this.tickscount));
        this.plotLine(g, this.x, this.y, this.height, this.width);
        for (counter = 1; counter < this.keyArray.length; counter++) {
            /** @type {?} */
            var innerGroup = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
            this.plotAreaChart(innerGroup, counter, this);
        }
        //call method to plot points
        /** @type {?} */
        var increment;
        for (increment = 1; increment < this.keyArray.length; increment++) {
            //plot line
            /** @type {?} */
            var innerGroup = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
            this.PlotLineDot(innerGroup, increment, this);
        } //increment for ends
    };
    //RESIZE STEP 4 STARTS
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    MultiareaComponent.prototype.validateresize = 
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.wt) ;
            else {
                _this.resize();
            }
        }), 0);
    };
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 4 ENDS
    /**
     * @param {?} g
     * @param {?} i
     * @param {?} thisa
     * @return {?}
     */
    MultiareaComponent.prototype.PlotLineDot = 
    //RESIZE STEP 4 ENDS
    /**
     * @param {?} g
     * @param {?} i
     * @param {?} thisa
     * @return {?}
     */
    function (g, i, thisa) {
        var _this = this;
        /** @type {?} */
        var flag = this.togglelabel;
        /** @type {?} */
        var line$$1 = line()
            .x((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return thisa.x(d[Object.keys(d)[0]]); }))
            .y((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return thisa.y(d[Object.keys(d)[i]]); }));
        g.append("path")
            .data([thisa.data])
            .attr("fill", "none")
            .attr("stroke", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (_this.colorarray.length > 0) {
                if (_this.colorarray[i - 1]) {
                    return _this.colorarray[i - 1];
                }
                else {
                    return thisa.predefinedcolors[i];
                }
            }
            else {
                return thisa.predefinedcolors[i];
            }
        }))
            .attr("stroke-width", 1.5)
            .attr("d", line$$1)
            .attr("opacity", 0.2)
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")");
        "translate(" + 0 + "," + 0 + ")");
        //----------
        g.selectAll('dot')
            .data(thisa.data)
            .enter()
            .append('circle')
            .attr('opacity', 0)
            .attr("fill", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (_this.colorarray.length > 0) {
                if (_this.colorarray[i - 1]) {
                    return _this.colorarray[i - 1];
                }
                else {
                    return thisa.predefinedcolors[i];
                }
            }
            else {
                return thisa.predefinedcolors[i];
            }
        }))
            .attr("cx", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return thisa.x(d[Object.keys(d)[0]]); }))
            .attr("cy", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return thisa.y(d[Object.keys(d)[i]]); }))
            .attr('r', 4)
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.formTooltipData(d, i);
            return _this.tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return _this.tooltip.html(_this.formTooltipData(d, i))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return _this.tooltip.style("visibility", "hidden");
        }))
            .style("opacity", 1)
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.onAreaTooltipClick(d, i);
            _this.fordrillableClick(_this, d, event);
            return _this.tooltip.style("visibility", "hidden");
            //this.chartClick(d);
        }))
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")");
        "translate(" + 0 + "," + 0 + ")");
        // -----------------------------------------------------------------
        if (this.labelflag) {
            g.selectAll('labels')
                .data(thisa.data)
                .enter()
                .append('text')
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (_this.labelcolor && _this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                // let length = String(d[Object.keys(d)[i]]).length
                return thisa.x(d[Object.keys(d)[0]]) + 20;
            }))
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                /** @type {?} */
                var key = [Object.keys(d)[i]];
                if (flag) {
                    return thisa.y(d[key]) - 5; // fr up
                }
                else {
                    return thisa.y(d[key]) + 15;
                }
                // return thisa.y(d[Object.keys(d)[i]]);
                //  return y(d[Object.keys(d)[1]])+yTextPadding;
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return d[Object.keys(d)[i]];
            }))
                .attr("transform", "translate(" + 0 + "," + 0 + ")")
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.formTooltipData(d, i);
                return _this.tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return _this.tooltip.html(_this.formTooltipData(d, i))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return _this.tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.onAreaTooltipClick(d, i);
                _this.fordrillableClick(_this, d, event);
                return _this.tooltip.style("visibility", "hidden");
                //this.chartClick(d);
            }));
        }
        if (this.togglelabel) {
            this.togglelabel = false;
        }
        else {
            this.togglelabel = true;
        }
    };
    /**
     * @param {?} g
     * @param {?} i
     * @param {?} thisa
     * @return {?}
     */
    MultiareaComponent.prototype.plotAreaChart = /**
     * @param {?} g
     * @param {?} i
     * @param {?} thisa
     * @return {?}
     */
    function (g, i, thisa) {
        var _this = this;
        // calculate area and valueline
        // define the line
        /** @type {?} */
        var valueline = line()
            .x((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            /** @type {?} */
            var key = [Object.keys(d)[0]];
            return thisa.x(d[key]);
        }))
            .y((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            /** @type {?} */
            var key = [Object.keys(d)[i]];
            return thisa.y(d[key]);
        }));
        // add the valueline path.
        g.append("path")
            .data([this.data])
            .style("stroke", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (_this.colorarray.length > 0) {
                //  return this.colorarray[i-1];
                if (_this.colorarray[i - 1]) {
                    return _this.colorarray[i - 1];
                }
                else {
                    return _this.predefinedcolors[i];
                }
            }
            else {
                return _this.predefinedColors[i];
            }
        }))
            .attr("fill", "none")
            .style("stroke-width", "2px")
            .attr("d", valueline)
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")");
        "translate(" + 0 + "," + 0 + ")");
        // define the area
        /** @type {?} */
        var area$$1 = area()
            .x((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            /** @type {?} */
            var key = [Object.keys(d)[0]];
            return thisa.x(d[key]);
        }))
            .y0(this.height)
            .y1((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            /** @type {?} */
            var key = [Object.keys(d)[i]];
            return thisa.y(d[key]);
        }));
        g.append("path")
            .data([this.data])
            .attr("d", area$$1)
            .attr("transform", 
        // "translate(" + this.margin.left + "," + 0 + ")")
        "translate(" + 0 + "," + 0 + ")")
            .style("stroke", "none")
            .attr("fill", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (_this.colorarray.length > 0) {
                if (_this.colorarray[i - 1]) {
                    return _this.colorarray[i - 1];
                }
                else {
                    return _this.predefinedcolors[i];
                }
            }
            else {
                return _this.predefinedColors[i];
            }
        }))
            .style("opacity", 0.5);
    };
    /**
     * @param {?} tooltipData
     * @param {?} count
     * @return {?}
     */
    MultiareaComponent.prototype.onAreaTooltipClick = /**
     * @param {?} tooltipData
     * @param {?} count
     * @return {?}
     */
    function (tooltipData, count) {
        /** @type {?} */
        var obj = {};
        obj[this.keyArray[0]] = tooltipData[Object.keys(tooltipData)[0]];
        obj[this.keyArray[count]] = tooltipData[Object.keys(tooltipData)[count]];
        this.chartClick(obj);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MultiareaComponent.prototype.findMaxData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var tempArray = [];
        /** @type {?} */
        var largeValues = [];
        /** @type {?} */
        var maxValue;
        //logic to search 3 largest values 
        data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var value;
            try {
                for (var _a = __values(Object.entries(element)), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var _c = __read(_b.value, 2), key = _c[0], value_1 = _c[1];
                    //exempts first column of data as it is treated as x-axis
                    if (key != _this.keyArray[0]) {
                        tempArray.push(value_1);
                    }
                } //for loop end
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
            }
            value = _this.findLargestValue(tempArray);
            largeValues.push(value);
            var e_1, _d;
        }));
        maxValue = this.findLargestValue(largeValues);
        return maxValue;
    };
    /**
     * @param {?} array
     * @return {?}
     */
    MultiareaComponent.prototype.findLargestValue = /**
     * @param {?} array
     * @return {?}
     */
    function (array) {
        /** @type {?} */
        var i;
        /** @type {?} */
        var max$$1 = 0;
        for (i = 0; i < array.length; i++) {
            if (array[i] > max$$1) {
                max$$1 = array[i];
            } //if ends 
        } //max ends
        return max$$1;
    };
    //covert data
    //covert data
    /**
     * @param {?} data
     * @return {?}
     */
    MultiareaComponent.prototype.transformData = 
    //covert data
    /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.transformeddata = [];
        this.keyArray = data[0];
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var DummyObject_1 = {};
                element.forEach((/**
                 * @param {?} individualvalue
                 * @param {?} keyindex
                 * @return {?}
                 */
                function (individualvalue, keyindex) {
                    DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                })); //inner for loop ends
                _this.transformeddata.push(DummyObject_1);
            } //if ends
        })); //outer for loop ends
        //outer for loop ends
        /** @type {?} */
        var parsedtransformeddata = JSON.parse(JSON.stringify(this.transformeddata));
        this.data = parsedtransformeddata;
    };
    /**
     * @return {?}
     */
    MultiareaComponent.prototype.formLegendData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendArray = [];
        /** @type {?} */
        var counter = 0;
        this.keyArray.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var legendobject = {};
                legendobject['label'] = element;
                if ((_this.colorarray.length > 0) && (_this.colorarray[counter])) {
                    legendobject['color'] = _this.colorarray[counter];
                }
                else {
                    legendobject['color'] = _this.predefinedColors[counter + 1];
                }
                _this.legendArray.push(legendobject);
                counter++;
            }
        }));
    };
    /**
     * @param {?} legendData
     * @return {?}
     */
    MultiareaComponent.prototype.onAreaLegendClick = /**
     * @param {?} legendData
     * @return {?}
     */
    function (legendData) {
        /** @type {?} */
        var obj = {};
        obj["label"] = legendData.label;
        /** @type {?} */
        var data = [];
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            try {
                for (var _a = __values(Object.entries(element)), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                    if (key == legendData.label) {
                        /** @type {?} */
                        var object = {};
                        object[key] = value;
                        data.push(object);
                    } //inner if ends
                } //inner forloop ends
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_2) throw e_2.error; }
            }
            var e_2, _d;
        })); //outer foreach ends
        obj["data"] = data;
        this.onLegendClick.emit(obj);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    MultiareaComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_3, _a;
    };
    /**
     * @return {?}
     */
    MultiareaComponent.prototype.resize = /**
     * @return {?}
     */
    function () {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            // this.resizewt = this.chartId.nativeElement.offsetWidth;
            // console.log("", new Date().getTime(), " ", this.resizewt);
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.initAreaChart();
        this.plotD3Chart();
    };
    /**
     * @param {?} tooltipData
     * @param {?} count
     * @return {?}
     */
    MultiareaComponent.prototype.formTooltipData = /**
     * @param {?} tooltipData
     * @param {?} count
     * @return {?}
     */
    function (tooltipData, count) {
        /** @type {?} */
        var obj = {};
        obj[this.keyArray[0]] = tooltipData[Object.keys(tooltipData)[0]];
        obj[this.keyArray[count]] = tooltipData[Object.keys(tooltipData)[count]];
        return this.toolTipForBar(obj);
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    MultiareaComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    };
    /**
     * @return {?}
     */
    MultiareaComponent.prototype.validateData = /**
     * @return {?}
     */
    function () {
        if (this.data) ;
        else {
            return "lmask";
        }
    };
    MultiareaComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-multiarea',
                    template: "\n<div #chartId *ngIf=\"drillableFlag\" #divid (window:resize)=\"validateresize()\">\n<table [ngClass]=\"validateData()\" style=\"width: 100%;\">\n  <tr *ngIf = \"title.length > 0\">\n      <td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n  </tr>\n  <tr>\n      <td>\n          <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n          </svg>\n      </td>\n  </tr>\n  <tr *ngIf=\"legend\" >\n      <td style=\"display: block; padding: 5px;\">\n          <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onAreaLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\">\n          </amexio-d3-legend>\n      </td>\n  </tr>\n</table>\n<!-- <div *ngIf=\"data.length < 1\" class=\"lmask\" style=\"padding-top:50%\">\n    </div> -->\n</div>",
                    styles: [""]
                },] },
    ];
    MultiareaComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef },
        { type: DeviceQueryService }
    ]; };
    MultiareaComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        colorarray: [{ type: Input, args: ['color',] }],
        tickscount: [{ type: Input, args: ['yaxis-interval',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        onLegendClick: [{ type: Output }],
        onTooltipClick: [{ type: Output }]
    };
    return MultiareaComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CandlestickComponent = /** @class */ (function (_super) {
    __extends(CandlestickComponent, _super);
    function CandlestickComponent(myservice, cdf, device) {
        var _this = _super.call(this, "candlestickwaterfallchart") || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.device = device;
        _this.svgheight = 300;
        _this.showzeroflag = true;
        _this.onLegendClick = new EventEmitter();
        _this.predefinedColor = [];
        _this.keyArray = [];
        _this.margin = {};
        _this.legendArray = [];
        return _this;
    }
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.wt = this.svgwidth;
        this.predefinedColor = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
        if (this.level <= 1) {
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    //this.data = response;
                    _this.httpresponse = response;
                    _this.data = _this.getResponseData(response);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                }), (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.transformData(_this.data);
                        _this.initializeData();
                        _this.plotXYAxis();
                        _this.plotD3Chart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.transformData(_this.data);
                    _this.initializeData();
                    _this.plotXYAxis();
                    _this.plotD3Chart();
                }), 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CandlestickComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.httpresponse = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
            }), (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    //this.data = this.getResponseData(resp);
                    _this.drawChart();
                }), 0);
            }));
        }
    };
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.data = _this.getResponseData(_this.httpresponse);
            _this.transformData(_this.data);
            _this.initializeData();
            _this.plotXYAxis();
            _this.plotD3Chart();
        }), 0);
    };
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.initializeData = /**
     * @return {?}
     */
    function () {
        this.tooltip = this.toolTip(d3);
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        this.margin = { top: 20, right: 30, bottom: 50, left: 60 },
            this.width = this.svgwidth - this.margin.left - this.margin.right,
            this.height = this.svgheight - this.margin.top - this.margin.bottom;
    };
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.plotXYAxis = /**
     * @return {?}
     */
    function () {
        // set the ranges
        this.x = scaleBand().range([0, this.width]);
        this.y = scaleLinear()
            .rangeRound([this.height, 0]);
        // scale the range of the data
        /** @type {?} */
        var candlestickArray = this.data.map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return d[Object.keys(d)[0]];
        }));
        this.x.domain(candlestickArray);
        /** @type {?} */
        var max$$1 = max(this.data, (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.end; }));
        this.y.domain([0, max$$1]);
        // this.svg = d3.select("#" + this.componentId)
        //RESIZE STEP 2 START
        this.svg = select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
            .attr("width", this.width + this.margin.left + this.margin.right)
            .attr("height", this.height + this.margin.top + this.margin.bottom)
            .append("g")
            .attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
        // add the X Axis
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + this.height + ")")
                    .call(axisBottom(this.x)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + this.height + ")")
                    .call(axisBottom(this.x));
            }
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + this.height + ")")
                .call(axisBottom(this.x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        // this.svg.append("g")
        //   .attr("transform", "translate(0," + this.height + ")")
        //   .call(d3.axisBottom(this.x));
        // add the Y Axis
        this.svg.append("g")
            .call(axisLeft(this.y).ticks(this.tickscount));
        this.plotLine(this.svg, this.x, this.y, this.height, this.width);
    };
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var bar = this.svg.selectAll(".bar")
            .data(this.data)
            .enter().append("g")
            .attr("class", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return "bar " + d.class; }))
            .attr("transform", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return "translate(" + _this.x(d[Object.keys(d)[0]]) + ",0)";
        }));
        bar.append("rect")
            .attr("y", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return _this.y(Math.max(d.start, d.end)); }))
            .attr("height", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return Math.abs(_this.y(d.start) - _this.y(d.end)); }))
            .attr("width", this.x.bandwidth())
            .attr("fill", (/**
         * @param {?} d
         * @param {?} i
         * @return {?}
         */
        function (d, i) {
            return _this.predefinedColor[i];
        }))
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.formTooltipData(d);
            return _this.tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return _this.tooltip.html(_this.formTooltipData(d))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return _this.tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.onCandlestickClick(d);
            _this.fordrillableClick(_this, d, event);
            return _this.tooltip.style("visibility", "hidden");
        }));
        if (this.labelflag) {
            bar.append("text")
                .style("font-weight", "bold")
                .style("font-size", "1vw")
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (_this.labelcolor && _this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return (_this.x.bandwidth()) / 2;
            }))
                .attr("y", (/**
             * @param {?} d
             * @param {?} index
             * @return {?}
             */
            function (d, index) {
                return _this.y(Math.max(d.start, d.end)) + 20;
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                // return d[Object.keys(d)[1]]
                if (_this.showzeroflag) {
                    return d[Object.keys(d)[1]];
                }
                else if (!_this.showzeroflag) {
                    if (d[Object.keys(d)[1]] > 0) {
                        return d[Object.keys(d)[1]];
                    }
                }
            }))
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.formTooltipData(d);
                return _this.tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return _this.tooltip.html(_this.formTooltipData(d))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return _this.tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.onCandlestickClick(d);
                _this.fordrillableClick(_this, d, event);
                return _this.tooltip.style("visibility", "hidden");
            }));
        }
    };
    /**
     * @param {?} svg
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    CandlestickComponent.prototype.plotLine = /**
     * @param {?} svg
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (svg, x, y, height, width) {
        if (this.hScale) {
            svg.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CandlestickComponent.prototype.transformData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.transformeddata = [];
        this.keyArray = [];
        this.keyArray = data[0];
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var DummyObject_1 = {};
                element.forEach((/**
                 * @param {?} individualvalue
                 * @param {?} keyindex
                 * @return {?}
                 */
                function (individualvalue, keyindex) {
                    DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                })); //inner for loop ends
                _this.transformeddata.push(DummyObject_1);
            } //if ends
        })); //outer for loop ends 
        this.data = this.transformeddata;
        this.addDataKeys();
        this.formLegendData();
    };
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.addDataKeys = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var cumulative = 0;
        for (var i = 0; i < this.data.length; i++) {
            this.data[i]["start"] = cumulative;
            cumulative += this.data[i][this.keyArray[1]];
            this.data[i]["end"] = cumulative;
            this.data[i]["class"] = (this.data[i][this.keyArray[1]] >= 0) ? 'positive' : 'negative';
        }
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    CandlestickComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    CandlestickComponent.prototype.formTooltipData = /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var object = {};
        object[this.keyArray[0]] = tooltipData[Object.keys(tooltipData)[0]];
        object[this.keyArray[1]] = tooltipData[Object.keys(tooltipData)[1]];
        return this.toolTipForBar(object);
    };
    /**
     * @param {?} chartData
     * @return {?}
     */
    CandlestickComponent.prototype.onCandlestickClick = /**
     * @param {?} chartData
     * @return {?}
     */
    function (chartData) {
        /** @type {?} */
        var object = {};
        object[this.keyArray[0]] = chartData[Object.keys(chartData)[0]];
        object[this.keyArray[1]] = chartData[Object.keys(chartData)[1]];
        this.chartClick(object);
    };
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.formLegendData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendArray = [];
        this.data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            try {
                for (var _a = __values(Object.entries(element)), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                    if (key == _this.keyArray[0]) {
                        /** @type {?} */
                        var object = {};
                        object["label"] = value;
                        object["color"] = _this.predefinedColor[index];
                        _this.legendArray.push(object);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_2) throw e_2.error; }
            }
            var e_2, _d;
        }));
    };
    /**
     * @param {?} chartData
     * @return {?}
     */
    CandlestickComponent.prototype.onCandlestickLegendClick = /**
     * @param {?} chartData
     * @return {?}
     */
    function (chartData) {
        /** @type {?} */
        var object = {};
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            try {
                for (var _a = __values(Object.entries(element)), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                    if (value == chartData.label) {
                        object[chartData.label] = element[Object.keys(element)[1]];
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_3) throw e_3.error; }
            }
            var e_3, _d;
        }));
        this.onLegendClick.emit(object);
    };
    //RESIZE STEP 4 STARTS
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.validateresize = 
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.wt) ;
            else {
                _this.resize();
            }
        }), 0);
    };
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    CandlestickComponent.prototype.resize = 
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    function () {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            // this.resizewt = this.chartId.nativeElement.offsetWidth;
            // console.log("", new Date().getTime(), " ", this.resizewt);
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.initializeData();
        this.plotXYAxis();
        this.plotD3Chart();
    };
    CandlestickComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-waterfall',
                    template: "\n<div #chartId *ngIf=\"drillableFlag\"  (window:resize)=\"validateresize()\" >\n<table *ngIf=\"data.length > 0\" style=\"width: 100%;\" >\n  <tr *ngIf = \"title.length > 0\">\n      <td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n  </tr>\n  <tr>\n      <td>\n          <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n          </svg>\n      </td>\n  </tr>\n  <tr *ngIf=\"legend\">\n      <td style=\"display: block; padding: 5px;\">\n          <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onCandlestickLegendClick($event)\" [data]=\"legendArray\" style=\"height:100%;\">\n          </amexio-d3-legend>\n      </td>\n  </tr>\n</table>\n<div *ngIf=\"data.length < 1\" class=\"lmask\" style=\"padding-top:50%\">\n    </div>\n</div>",
                    styles: [""]
                },] },
    ];
    CandlestickComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef },
        { type: DeviceQueryService }
    ]; };
    CandlestickComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        data: [{ type: Input }],
        tickscount: [{ type: Input, args: ['yaxis-interval',] }],
        showzeroflag: [{ type: Input, args: ['show-zero-values',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        onLegendClick: [{ type: Output }]
    };
    return CandlestickComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BubbleComponent = /** @class */ (function (_super) {
    __extends(BubbleComponent, _super);
    function BubbleComponent(myservice, cdf, device) {
        var _this = _super.call(this, 'bubble') || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.device = device;
        _this.svgheight = 300;
        _this.color = "blue";
        _this.zoomflag = false;
        _this.zoominitiated = false;
        _this.keyArray = [];
        _this.transformeddata = [];
        _this.colors = [];
        _this.xaxisArray = [];
        _this.xarray = [];
        _this.legends = [];
        _this.legendarray = [];
        _this.resizebtnflag = false;
        _this.legendData = [];
        _this.minxvalue = 0;
        _this.maxxvalue = 0;
        _this.bubblechartdata = [];
        _this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
        return _this;
    }
    /**
     * @return {?}
     */
    BubbleComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.wt = this.svgwidth;
        this.data1 = [];
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    resp_1 = response;
                    _this.httpresponse = resp_1;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                }), (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.data = _this.getResponseData(resp_1);
                        _this.data1 = _this.data;
                        _this.xaxisData();
                        _this.transformData(_this.data1);
                        _this.transformdata();
                        _this.colorGeneration();
                        _this.formLegendData();
                        _this.plotBubbleChart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data1 = _this.data;
                    _this.data = _this.getResponseData(_this.data);
                    _this.xaxisData();
                    _this.transformData(_this.data);
                    _this.transformdata();
                    _this.colorGeneration();
                    _this.formLegendData();
                    _this.plotBubbleChart();
                }), 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    BubbleComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.httpresponse = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
            }), (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    //this.data = this.getResponseData(resp);
                    _this.drawChart();
                }), 0);
            }));
        }
    };
    /**
     * @return {?}
     */
    BubbleComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.data = _this.getResponseData(_this.httpresponse);
            _this.data1 = _this.data;
            _this.xaxisData();
            _this.transformData(_this.data1);
            _this.transformdata();
            _this.colorGeneration();
            _this.formLegendData();
            _this.plotBubbleChart();
        }), 0);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    BubbleComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    BubbleComponent.prototype.transformData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.colordata = [];
        this.keyArray = data[0];
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var DummyObject_1 = {};
                element.forEach((/**
                 * @param {?} individualvalue
                 * @param {?} keyindex
                 * @return {?}
                 */
                function (individualvalue, keyindex) {
                    DummyObject_1[_this.keyArray[keyindex]] = individualvalue;
                }));
                _this.transformeddata.push(DummyObject_1);
            }
        }));
        this.data = this.transformeddata;
        this.colordata = this.transformeddata;
    };
    /**
     * @return {?}
     */
    BubbleComponent.prototype.plotBubbleChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var colors = this.predefinedcolors;
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE
        }
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var margin = { top: 20, right: 60, bottom: 50, left: 60 };
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height = this.svgheight - margin.top - margin.bottom;
        /** @type {?} */
        var x;
        /** @type {?} */
        var y;
        x = scaleLinear()
            .rangeRound([0, width]);
        y = scaleLinear()
            .rangeRound([height, 0]);
        /** @type {?} */
        var xAxis = axisBottom(x).ticks(this.xtickscount);
        /** @type {?} */
        var yAxis = axisLeft(y).ticks(this.tickscount);
        this.svg = select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        y.domain([0, max(this.data, (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d[Object.keys(d)[2]]; }))]);
        x.domain([this.minxvalue, this.maxxvalue]);
        /** @type {?} */
        var rScale = scaleSqrt().rangeRound([6, 30]);
        rScale.domain([min(this.data, (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d[Object.keys(d)[4]]; })), max(this.data, (/**
             * @param {?} d
             * @param {?} i
             * @return {?}
             */
            function (d, i) { return d[Object.keys(d)[4]]; }))]);
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xAxis)
                    .append("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xAxis)
                    .append("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .style("text-anchor", "start");
            }
        }
        else {
            this.svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        this.svg.append("g")
            .attr("class", "y axis")
            .call(yAxis)
            .append("text")
            .attr("class", "label")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end");
        this.plotLine(this.svg, x, y, height, width);
        this.node = this.svg.selectAll(".dot")
            .data(this.bubblechartdata)
            .enter().append("circle")
            .attr("class", "dot")
            .attr("r", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return rScale(d[Object.keys(d)[4]]); }))
            .attr("cursor", "pointer")
            .attr("cx", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return x(d[Object.keys(d)[1]]);
        }))
            .attr("cy", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return y(d[Object.keys(d)[2]]); }))
            .attr("fill", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d[Object.keys(d)[5]]; }))
            .attr('opacity', 0.7)
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.html(_this.formTooltipData(d))
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            // if(!this.zoominitiated) {
            _this.bubbleChartClick(d);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
            // }
        }));
        //label
        if (this.labelflag) {
            this.nodelabel = this.svg.selectAll("labels")
                .data(this.bubblechartdata)
                .enter().append("text")
                .style("font-weight", "bold")
                .style("font-size", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return rScale(d[Object.keys(d)[4]]) - 4;
            }))
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (_this.labelcolor && _this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return x(d[Object.keys(d)[1]]);
            }))
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return y(d[Object.keys(d)[2]]); }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return d[Object.keys(d)[0]];
            }))
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.html(_this.formTooltipData(d))
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                // if(!this.zoominitiated) {
                _this.bubbleChartClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
                // }
            }));
        }
        //create zoom handler 
        if (this.zoomflag) {
            this.zoominitiated = true;
            /** @type {?} */
            var zoom_handler = zoom()
                .on("zoom", this.zoom_actions.bind(this));
            zoom_handler(this.svg);
        }
    };
    /**
     * @return {?}
     */
    BubbleComponent.prototype.togglebtnflag = /**
     * @return {?}
     */
    function () {
        this.resizebtnflag = true;
    };
    /**
     * @return {?}
     */
    BubbleComponent.prototype.zoom_actions = /**
     * @return {?}
     */
    function () {
        this.node.attr("transform", event$1.transform);
        if (this.labelflag) {
            this.nodelabel.attr("transform", event$1.transform);
        }
        this.resizebtnflag = true;
        this.zoominitiated = false;
    };
    /**
     * @return {?}
     */
    BubbleComponent.prototype.resizesvg = /**
     * @return {?}
     */
    function () {
        // this.svg = null;
        this.svg.selectAll("*").remove();
        this.plotBubbleChart();
        this.resizebtnflag = false;
    };
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    BubbleComponent.prototype.formTooltipData = /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (key != 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return this.toolTipForBar(object);
        var e_2, _d;
    };
    // Method on chart click
    // Method on chart click
    /**
     * @param {?} event
     * @return {?}
     */
    BubbleComponent.prototype.bubbleChartClick = 
    // Method on chart click
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var object = {};
        try {
            for (var _a = __values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (key !== 'color') {
                    object[key] = value;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.chartClick(object);
        var e_3, _d;
    };
    //RESIZE STEP 4 STARTS
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    BubbleComponent.prototype.validateresize = 
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.wt) ;
            else {
                _this.resize();
            }
        }), 0);
    };
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    BubbleComponent.prototype.resize = 
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    function () {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotBubbleChart();
    };
    /**
     * @return {?}
     */
    BubbleComponent.prototype.xaxisData = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var array = [];
        this.minxvalue = 0;
        this.maxxvalue = 0;
        this.xaxisArray = [];
        this.xarray = [];
        this.data1.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            array.push(element[1]);
        }));
        for (var i = 1; i < array.length; i++) {
            this.xaxisArray.push(array[i]);
        }
        /** @type {?} */
        var minvalue = Math.floor(min(this.xaxisArray));
        /** @type {?} */
        var maxvalue = Math.ceil(max(this.xaxisArray));
        this.minxvalue = 5 * (Math.floor(Math.abs(minvalue / 5)));
        this.maxxvalue = 5 * (Math.ceil(Math.abs(maxvalue / 5)));
    };
    /**
     * @return {?}
     */
    BubbleComponent.prototype.colorGeneration = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendarray = [];
        /** @type {?} */
        var i = 0;
        /** @type {?} */
        var names = this.data1
            .map((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e[3]; }))
            .filter((/**
         * @param {?} e
         * @param {?} i
         * @param {?} a
         * @return {?}
         */
        function (e, i, a) { return a.indexOf(e) === i; }));
        var _loop_1 = function (j) {
            /** @type {?} */
            var value = [];
            /** @type {?} */
            var obj = { "label": "", "color": "", "value": [] };
            this_1.colordata.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (element[Object.keys(element)[3]] == names[j]) {
                    element['color'] = _this.predefinedcolors[i];
                    value.push(element);
                }
            }));
            obj["value"] = value;
            obj["label"] = names[j];
            obj["color"] = this_1.predefinedcolors[i];
            this_1.legendarray.push(obj);
            i++;
        };
        var this_1 = this;
        for (var j = 1; j < names.length; j++) {
            _loop_1(j);
        }
    };
    /**
     * @return {?}
     */
    BubbleComponent.prototype.formLegendData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.legendData = [];
        this.legendarray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var legendobject = {};
            legendobject['label'] = element.label;
            legendobject['color'] = element.color;
            _this.legendData.push(legendobject);
        }));
    };
    /**
     * @param {?} legendevent
     * @return {?}
     */
    BubbleComponent.prototype.onBubbleLegendClick = /**
     * @param {?} legendevent
     * @return {?}
     */
    function (legendevent) {
        var _this = this;
        this.legendarray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var obj = {};
            /** @type {?} */
            var temparr = [];
            if (legendevent.label == element.label) {
                /** @type {?} */
                var arr = element.value;
                arr.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    try {
                        for (var _a = __values(Object.entries(element)), _b = _a.next(); !_b.done; _b = _a.next()) {
                            var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                            if (key !== 'color') {
                                obj[key] = value;
                            }
                        } // for ends
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                    temparr.push(obj);
                    var e_4, _d;
                })); // for each ends
                _this.legendClick(temparr);
            }
        }));
    };
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    BubbleComponent.prototype.plotLine = /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    function (g, x, y, height, width) {
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(axisBottom(x).
                tickSize(-this.width).tickFormat('').ticks(this.xtickscount));
        }
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    };
    /**
     * @return {?}
     */
    BubbleComponent.prototype.transformdata = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.bubblechartdata = [];
        /** @type {?} */
        var buubledata = [];
        this.colordata.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        function (element, i) {
            buubledata.push(element[Object.keys(element)[4]]);
        }));
        /** @type {?} */
        var data = buubledata.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) { return b - a; }));
        var _loop_2 = function (j) {
            this_2.colordata.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (data[j] == element[Object.keys(element)[4]])
                    _this.bubblechartdata.push(element);
            }));
        };
        var this_2 = this;
        for (var j = 0; j <= data.length; j++) {
            _loop_2(j);
        }
    };
    BubbleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-bubble',
                    template: "<div #chartId *ngIf=\"drillableFlag\" (window:resize)=\"validateresize()\">\n    <table *ngIf=\"data.length > 0\" style=\"width: 100%;\">\n        <tr>\n            <td colspan=\"2\" style=\"font-size: 18px; font-weight: bold; \"> {{title}}\n                <span *ngIf=\"resizebtnflag\">\n                    <button type=\"reset\" class=\"fa fa-search-minus\" style=\"cursor: pointer; float:right\" (click)=\"resizesvg()\">\n                    </button>\n                </span>\n            </td>\n            <td></td>\n        </tr>\n        <tr>\n            <td>\n                <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n                </svg>\n            </td>\n        </tr>\n        <tr *ngIf=\"legend\">\n            <td style=\"display: block; padding: 5px;\">\n                <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"onBubbleLegendClick($event)\" [data]=\"legendData\"\n                    style=\"height:100%;\"></amexio-d3-legend>\n            </td>\n        </tr>\n    </table>\n    <div *ngIf=\"data.length < 1\" class=\"lmask\" style=\"padding-top:50%\">\n    </div>\n</div>",
                    styles: [""]
                },] },
    ];
    BubbleComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef },
        { type: DeviceQueryService }
    ]; };
    BubbleComponent.propDecorators = {
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        color: [{ type: Input, args: ['color',] }],
        zoomflag: [{ type: Input, args: ['zoom-enable',] }],
        tickscount: [{ type: Input, args: ['yaxis-interval',] }],
        xtickscount: [{ type: Input, args: ['xaxis-interval',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }]
    };
    return BubbleComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AmexioD3TimelineChartComponent = /** @class */ (function (_super) {
    __extends(AmexioD3TimelineChartComponent, _super);
    function AmexioD3TimelineChartComponent(myservice, cdf, device) {
        var _this = _super.call(this, 'timeline') || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.device = device;
        _this.svgheight = 200;
        _this.level = 0;
        _this.drillabledatakey = [];
        _this.labelcolor = "black";
        _this.labelflag = false;
        _this.lanes = [];
        _this.timelinechartData = [];
        _this.drillableFlag = true;
        _this.resizeflag = false;
        _this.monthlist = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
        return _this;
    }
    /**
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    resp_1 = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                }), (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.data = _this.getResponseData(resp_1);
                        _this.transformTODate(_this.data);
                        _this.transformData(_this.urldata);
                        _this.plotChart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.transformData(_this.data);
                    _this.plotChart();
                }), 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                resp = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
            }), (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(resp);
                    _this.drawChart();
                }), 0);
            }));
        }
    };
    /**
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.transformTODate(_this.data);
            _this.transformData(_this.urldata);
            _this.plotChart();
        }), 0);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = __values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.plotChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var laneLength = this.lanes.length;
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        var m = [20, 25, 15, 120];
        /** @type {?} */
        var //top right bottom left
        width = this.svgwidth - m[1] - m[3];
        /** @type {?} */
        var height = this.svgheight - m[0] - m[2];
        /** @type {?} */
        var miniHeight = laneLength * 12 + 50;
        /** @type {?} */
        var mainHeight = height - miniHeight - 50;
        /** @type {?} */
        var mindate;
        /** @type {?} */
        var maxdate;
        /** @type {?} */
        var barheight = 20;
        if (this.httpurl && this.httpmethod) {
            mindate = this.urldata[0][1].getFullYear(),
                maxdate = this.urldata[this.urldata.length - 1][2].getFullYear();
        }
        else {
            mindate = this.data[0][1].getFullYear(),
                maxdate = this.data[this.data.length - 1][2].getFullYear();
        }
        /** @type {?} */
        var x = scaleTime()
            .domain([this.mindate, this.maxdate])
            .range([0, width]);
        /** @type {?} */
        var x1 = scaleLinear()
            .domain([mindate, maxdate])
            .range([m[3], width + m[3]]);
        /** @type {?} */
        var y1 = scaleLinear()
            .domain([0, laneLength])
            .range([0, miniHeight]);
        this.svg = select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
            .attr("width", width + m[1] + m[3])
            .attr("height", height + m[0] + m[2]);
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x1).ticks(this.xtickscount)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(axisBottom(x1).ticks(this.xtickscount));
            }
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(axisBottom(x1).ticks(this.xtickscount)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        /** @type {?} */
        var mini = this.svg.append("g")
            .attr("transform", "translate(" + m[3] + "," + (mainHeight + m[0]) + ")")
            .attr("width", width)
            .attr("height", mainHeight)
            .attr("class", "mini");
        //mini lanes and texts
        mini.append("g").selectAll(".laneLines")
            .data(this.timelinechartData)
            .enter().append("line")
            .attr("y1", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return y1(d.lane); }))
            .attr("x2", width)
            .attr("y2", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return y1(d.lane); }))
            .attr("stroke", "lightgray");
        mini.append("g").selectAll(".laneText")
            .data(this.lanes)
            .enter().append("text")
            .text((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d; }))
            .attr("x", -m[1])
            .attr("y", (/**
         * @param {?} d
         * @param {?} i
         * @return {?}
         */
        function (d, i) { return y1(i + .5); }))
            .attr("dy", ".5ex")
            .attr("text-anchor", "end")
            .attr("class", "laneText");
        //mini item rects
        mini.append("g").selectAll("miniItems")
            .data(this.timelinechartData)
            .enter().append("rect")
            .attr("class", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return "miniItem" + d.lane; }))
            .attr("fill", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        function (d, index) { return _this.predefinedcolors[index]; }))
            .attr("x", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return x(d.start); }))
            .attr("y", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return (y1(d.lane + .5) - 5); }))
            .attr("width", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return Math.abs(x(d.end) - x(d.start));
        }))
            .attr("height", barheight)
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.html(_this.formTooltipData(d)
            //  this.toolTipForBar(d)
            // this.toolTipContent(d)
            )
                .style("top", (event$1.pageY - 10) + "px")
                .style("left", (event$1.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.timelineChartClick(d);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
        }));
        /** @type {?} */
        var barwidth;
        //mini labels
        /** @type {?} */
        var monthlist1 = this.monthlist;
        if (this.labelflag) {
            mini.append("g").selectAll(".miniLabels")
                .data(this.timelinechartData)
                .enter().append("text")
                .style("font-weight", "bold")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (_this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .style("font-size", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                barwidth = Math.min(Math.abs(x(d.end) - x(d.start)));
                return barwidth / 20 + "px";
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (d.id) {
                    /** @type {?} */
                    var startfullyear = d.start.getFullYear();
                    /** @type {?} */
                    var startMonth = monthlist1[d.start.getMonth()];
                    /** @type {?} */
                    var endfullyear = d.end.getFullYear();
                    /** @type {?} */
                    var endMonth = monthlist1[d.end.getMonth()];
                    /** @type {?} */
                    var date = startMonth + " " + startfullyear + "-" + endMonth + " " + endfullyear;
                    return date;
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return x(d.start);
            }))
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return y1(d.lane + .5); }))
                .attr("dy", "1.2ex")
                .attr("dx", "9ex")
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.html(_this.formTooltipData(d)
                //  this.toolTipForBar(d)
                // this.toolTipContent(d)
                )
                    .style("top", (event$1.pageY - 10) + "px")
                    .style("left", (event$1.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.timelineChartClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
        }
    };
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.formTooltipData = /**
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var object = {};
        /** @type {?} */
        var mlist = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
        /** @type {?} */
        var label1 = "Duration";
        /** @type {?} */
        var label2 = "Name";
        /** @type {?} */
        var startfullyear = tooltipData.start.getFullYear();
        /** @type {?} */
        var startMonth = mlist[tooltipData.start.getMonth()];
        /** @type {?} */
        var endfullyear = tooltipData.end.getFullYear();
        /** @type {?} */
        var endMonth = mlist[tooltipData.end.getMonth()];
        /** @type {?} */
        var date = startMonth + " " + startfullyear + "-" + endMonth + " " + endfullyear;
        object[label2 + ":"] = tooltipData.id;
        object[label1 + ":"] = date;
        return this.toolTipForBar(object);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.transformTODate = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.urldata = [];
        data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var dataobj = [];
            /** @type {?} */
            var startdate = new Date(element[1]);
            /** @type {?} */
            var enddate = new Date(element[2]);
            dataobj.push(element[0]);
            dataobj.push(startdate);
            dataobj.push(enddate);
            _this.urldata.push(dataobj);
        }));
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.transformData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.lanes = [];
        this.timelinechartData = [];
        this.legends = [];
        /** @type {?} */
        var datalength = data.length - 1;
        /** @type {?} */
        var length = data.length;
        this.mindate = data[0][1];
        this.maxdate = data[datalength][2];
        /** @type {?} */
        var mlist = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
        data.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        function (element, i) {
            /** @type {?} */
            var dataObj = { "lane": "", "id": "", "start": "", "end": "" };
            _this.lanes.push(element[0]);
            dataObj["lane"] = i;
            dataObj["id"] = element[0];
            dataObj["start"] = element[1];
            dataObj["end"] = element[2];
            _this.timelinechartData.push(dataObj);
        }));
        this.timelinechartData.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        function (element, i) {
            /** @type {?} */
            var startfullyear = element.start.getFullYear();
            /** @type {?} */
            var startMonth = mlist[element.start.getMonth()];
            /** @type {?} */
            var endfullyear = element.end.getFullYear();
            /** @type {?} */
            var endMonth = mlist[element.end.getMonth()];
            /** @type {?} */
            var date = startMonth + " " + startfullyear + "-" + endMonth + " " + endfullyear;
            /** @type {?} */
            var object = { 'label': _this.lanes[i], 'color': _this.predefinedcolors[i], 'Duration': date };
            _this.legends.push(object);
        }));
        /** @type {?} */
        var Obj = { "lane": "", "id": "", "start": "", "end": "" };
        Obj["lane"] = length;
        this.timelinechartData.push(Obj);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.timelineChartClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var object = {};
        /** @type {?} */
        var mlist = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
        /** @type {?} */
        var startfullyear = event.start.getFullYear();
        /** @type {?} */
        var startMonth = mlist[event.start.getMonth()];
        /** @type {?} */
        var endfullyear = event.end.getFullYear();
        /** @type {?} */
        var endMonth = mlist[event.end.getMonth()];
        /** @type {?} */
        var date = startMonth + " " + startfullyear + "-" + endMonth + " " + endfullyear;
        object["Name"] = event.id;
        object["Duration"] = date;
        this.chartClick(object);
    };
    //RESIZE STEP 4 STARTS
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.validateresize = 
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.wt) ;
            else {
                _this.resize();
            }
        }), 0);
    };
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.resize = 
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    function () {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            // this.resizewt = this.chartId.nativeElement.offsetWidth;
            // console.log("", new Date().getTime(), " ", this.resizewt);
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotChart();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AmexioD3TimelineChartComponent.prototype.timelinelegendClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var obj = {};
        try {
            for (var _a = __values(Object.entries(event)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                if (key !== 'color') {
                    obj[key] = value;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        this.onLegendClick.emit(obj);
        var e_2, _d;
    };
    AmexioD3TimelineChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-timeline',
                    template: "\n<div  #chartId *ngIf=\"drillableFlag\"  (window:resize)=\"validateresize()\" >\n    <table style=\"width: 100%;\" position=\" relative\">\n        <tr *ngIf = \"title.length > 0\">\n            <td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n        </tr>\n        <tr>\n            <td>\n                <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\" \n              >\n                </svg>\n            </td>\n        </tr>\n        <tr *ngIf=\"legend\">\n            <td style=\"display: block; padding: 5px;\">\n                <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"timelinelegendClick($event)\" [data]=\"legends\" style=\"height:100%;\">\n                </amexio-d3-legend>\n            </td>\n        </tr>\n    </table>\n    </div>"
                },] },
    ];
    AmexioD3TimelineChartComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef },
        { type: DeviceQueryService }
    ]; };
    AmexioD3TimelineChartComponent.propDecorators = {
        data: [{ type: Input, args: ['data',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        labelflag: [{ type: Input, args: ['label',] }],
        xtickscount: [{ type: Input, args: ['xaxis-interval',] }]
    };
    return AmexioD3TimelineChartComponent;
}(AmexioD3BaseChartComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ViewDrillableComponent = /** @class */ (function () {
    function ViewDrillableComponent() {
    }
    /**
     * @return {?}
     */
    ViewDrillableComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    ViewDrillableComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        return this.getComponentData();
    };
    /**
     * @return {?}
     */
    ViewDrillableComponent.prototype.getComponentData = /**
     * @return {?}
     */
    function () {
        this.chartInputArray = [];
        this.barchartinput = this.queryBarchartinput.toArray();
        this.groupbarchartinput = this.QueryGroupbarchartinput.toArray();
        this.linechartinput = this.QueryLinechartinput.toArray();
        this.donutchartinput = this.QueryDonutchartinput.toArray();
        this.piechartinput = this.QueryPiechartinput.toArray();
        this.barstackchartinput = this.QueryBarStackchartinput.toArray();
        this.combochartinput = this.QueryCombochartinput.toArray();
        this.histogramchartinput = this.QueryHistogramchartinput.toArray();
        this.scatterchartinput = this.QuerySatterchartinput.toArray();
        this.multiareachartinput = this.QueryMultiareachartinput.toArray();
        this.candlestickchartinput = this.QueryCandlestickchartinput.toArray();
        this.bubblechartinput = this.QueryBubblechartinput.toArray();
        this.timelinechartinput = this.QueryTimechartinput.toArray();
        this.chartInputArray = this.chartInputArray.concat(this.barchartinput, this.groupbarchartinput, this.linechartinput, this.donutchartinput, this.piechartinput, this.barstackchartinput, this.combochartinput, this.histogramchartinput, this.scatterchartinput, this.multiareachartinput, this.candlestickchartinput, this.bubblechartinput, this.timelinechartinput);
        return this.chartInputArray;
    };
    ViewDrillableComponent.propDecorators = {
        queryBarchartinput: [{ type: ContentChildren, args: [AmexioD3BarChartComponent, { descendants: true },] }],
        QueryGroupbarchartinput: [{ type: ContentChildren, args: [GroupbarComponent, { descendants: true },] }],
        QueryLinechartinput: [{ type: ContentChildren, args: [AmexioD3LineComponent, { descendants: true },] }],
        QueryPiechartinput: [{ type: ContentChildren, args: [AmexioD3PieChartComponent, { descendants: true },] }],
        QueryDonutchartinput: [{ type: ContentChildren, args: [AmexioD3DounutChartComponent, { descendants: true },] }],
        QueryBarStackchartinput: [{ type: ContentChildren, args: [BarstackComponent, { descendants: true },] }],
        QueryCombochartinput: [{ type: ContentChildren, args: [CombochartComponent, { descendants: true },] }],
        QueryHistogramchartinput: [{ type: ContentChildren, args: [HistogramComponent, { descendants: true },] }],
        QuerySatterchartinput: [{ type: ContentChildren, args: [ScatterchartComponent, { descendants: true },] }],
        QueryMultiareachartinput: [{ type: ContentChildren, args: [MultiareaComponent, { descendants: true },] }],
        QueryCandlestickchartinput: [{ type: ContentChildren, args: [CandlestickComponent, { descendants: true },] }],
        QueryBubblechartinput: [{ type: ContentChildren, args: [BubbleComponent, { descendants: true },] }],
        QueryTimechartinput: [{ type: ContentChildren, args: [AmexioD3TimelineChartComponent, { descendants: true },] }]
    };
    return ViewDrillableComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DrillableComponent = /** @class */ (function (_super) {
    __extends(DrillableComponent, _super);
    function DrillableComponent() {
        var _this = _super.call(this) || this;
        _this.mouseLocation = { left: 0, top: 0 };
        _this.componentcounter = 1;
        _this.disableFlag = false;
        return _this;
    }
    /**
     * @return {?}
     */
    DrillableComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    DrillableComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.ComponentDataArray = this.getComponentData();
        this.getData(this.ComponentDataArray);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    DrillableComponent.prototype.getData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (element.level !== 1) {
                element.drillableFlag = false;
                element.drillableEvent.subscribe((/**
                 * @param {?} eventdata
                 * @return {?}
                 */
                function (eventdata) {
                    _this.hideUI(eventdata);
                    _this.sameLevelChart(eventdata);
                    _this.ShowUI(eventdata);
                }));
            }
            else {
                _this.disableFlag = false;
                element.drillableEvent.subscribe((/**
                 * @param {?} eventdata
                 * @return {?}
                 */
                function (eventdata) {
                    _this.hideUI(eventdata);
                    _this.sameLevelChart(eventdata);
                    _this.ShowUI(eventdata);
                }));
            }
        }));
    };
    /**
     * @param {?} eventRef
     * @return {?}
     */
    DrillableComponent.prototype.hideUI = /**
     * @param {?} eventRef
     * @return {?}
     */
    function (eventRef) {
        this.ComponentDataArray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (element.level == eventRef.ref.level) {
                eventRef.ref.drillableFlag = false;
            }
        }));
    };
    /**
     * @param {?} eventRef
     * @return {?}
     */
    DrillableComponent.prototype.ShowUI = /**
     * @param {?} eventRef
     * @return {?}
     */
    function (eventRef) {
        var _this = this;
        this.eventData = [];
        this.eventData = eventRef;
        this.ComponentDataArray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (eventRef.ref.target == element.level) {
                if (_this.arrayofsameLevel.length == 1) {
                    _this.disableFlag = true;
                    element.drillableFlag = true;
                    element.fetchData(eventRef.node);
                    _this.componentcounter = element.level;
                }
                else {
                    _this.contextmenuFlag = true;
                    _this.mouseLocation.left = eventRef.event.clientX;
                    _this.mouseLocation.top = eventRef.event.clientY;
                    _this.contextStyle = _this.getContextMenuStyle();
                }
            }
        }));
        if (this.componentcounter == eventRef.ref.level) {
            eventRef.ref.drillableFlag = true;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DrillableComponent.prototype.previouschartClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var chartLevel = this.componentcounter - 1;
        this.ComponentDataArray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (chartLevel == element.level) {
                element.drillableFlag = true;
                element.drawChart();
            }
            else if (_this.componentcounter == element.level) {
                element.drillableFlag = false;
            }
        }));
        if (this.componentcounter == 2) {
            this.disableFlag = false;
        }
        this.componentcounter = chartLevel;
    };
    /**
     * @param {?} eventRef
     * @return {?}
     */
    DrillableComponent.prototype.sameLevelChart = /**
     * @param {?} eventRef
     * @return {?}
     */
    function (eventRef) {
        var _this = this;
        this.arrayofsameLevel = [];
        this.ComponentDataArray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (eventRef.ref.target == element.level) {
                _this.arrayofsameLevel = _this.arrayofsameLevel.concat(element);
            }
        }));
    };
    //Method Creates style if two same targets found.
    //Method Creates style if two same targets found.
    /**
     * @return {?}
     */
    DrillableComponent.prototype.getContextMenuStyle = 
    //Method Creates style if two same targets found.
    /**
     * @return {?}
     */
    function () {
        return {
            'cursor': 'default',
            'position': 'fixed',
            'display': this.contextmenuFlag ? 'block' : 'none',
            'left': this.mouseLocation.left + 'px',
            'top': this.mouseLocation.top + 'px',
            'box-shadow': '1px 1px 2px #000000',
            'width': '15%',
        };
    };
    /**
     * @param {?} elementRef
     * @return {?}
     */
    DrillableComponent.prototype.getListPosition = /**
     * @param {?} elementRef
     * @return {?}
     */
    function (elementRef) {
        /** @type {?} */
        var height = 240;
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DrillableComponent.prototype.onContextNodeClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.componentcounter = 0;
        this.contextmenuFlag = false;
        this.eventData.ref.drillableFlag = false;
        this.disableFlag = true;
        event.drillableFlag = true;
        event.fetchData(this.eventData.node);
        this.componentcounter = event.level;
        if (this.componentcounter == this.eventData.ref.level) {
            this.eventData.ref.drillableFlag = true;
        }
    };
    /**
     * @return {?}
     */
    DrillableComponent.prototype.onCloseClick = /**
     * @return {?}
     */
    function () {
        this.contextmenuFlag = false;
    };
    DrillableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-drillable',
                    template: "\n<div > \n    <ng-container *ngIf=\"disableFlag\">\n            <button type=\"button\" class=\"button\"\n             (click)=\"previouschartClick($event)\">\n             <i class=\"fa fa-arrow-left\"></i> \n             \n            </button>\n</ng-container>\n\n<ng-content></ng-content>\n\n</div>\n\n<span [ngStyle]=\"contextStyle\" >\n  <ul *ngIf=\"contextmenuFlag\" class=\"close-thik\" class=\"context-menu-list\"  >\n    <span (click)=\"onCloseClick()\" class=\"close\"><i class=\"fa fa-close\"></i></span>\n  <li (click)=\"onContextNodeClick(itemConfig)\" class=\"context-menu-list-items\" \n  *ngFor=\"let itemConfig of arrayofsameLevel\">\n  <em [ngStyle]=\"{'padding-left': itemConfig.icon ? '5px':'19px'}\"></em>\n  <span style=\"white-space: nowrap;display: inline ; padding-left:5px\">{{itemConfig.title}}\n  </span>\n  </li>\n  </ul>\n  </span>\n  ",
                    styles: [".button{position:relative;border:1px solid #555;font-weight:400;color:#000;padding:.5rem 1rem;text-align:center;transition-duration:.4s;text-decoration:none;overflow:hidden;cursor:pointer;border-radius:3px}.button:after{content:\"\";background:#000;display:block;position:absolute;padding-top:300%;padding-left:350%;margin-left:-20px!important;margin-top:-120%;opacity:0;transition:.8s}.button:active:after{padding:0;margin:0;opacity:1;transition:none}.context-menu-list{display:block;position:absolute;flex-direction:column;min-width:180px;cursor:pointer;max-height:150px;z-index:1;padding:10px 0;overflow-y:auto;background-color:#fff!important;box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.context-menu-list .context-menu-list-items{text-decoration:none;font-size:14px!important;padding:5px;display:block}.close{float:right;padding-right:8px;cursor:pointer}"]
                },] },
    ];
    DrillableComponent.ctorParameters = function () { return []; };
    return DrillableComponent;
}(ViewDrillableComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var D3_COMPONENTS = [
    AmexioD3Legend,
    AmexioD3DounutChartComponent,
    AmexioD3BarChartComponent,
    AmexioD3PieChartComponent,
    AmexioD3LineComponent,
    BarstackComponent,
    GroupbarComponent,
    CombochartComponent,
    DrillableComponent,
    HistogramComponent,
    MultiareaComponent,
    ScatterchartComponent,
    CandlestickComponent,
    BubbleComponent,
    AmexioD3TimelineChartComponent
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AmexioChartD3Module = /** @class */ (function () {
    function AmexioChartD3Module() {
    }
    AmexioChartD3Module.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        FormsModule,
                        CommonModule
                    ],
                    declarations: D3_COMPONENTS,
                    providers: [DeviceQueryService],
                    exports: D3_COMPONENTS
                },] },
    ];
    return AmexioChartD3Module;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AmexioChartD3Module, DeviceQueryService, AmexioD3DounutChartComponent, AmexioD3PieChartComponent, AmexioD3BarChartComponent, AmexioD3LineComponent, BarstackComponent, GroupbarComponent, D3_COMPONENTS as ɵa, AmexioD3BaseChartComponent as ɵc, ViewDrillableComponent as ɵh, BubbleComponent as ɵm, CandlestickComponent as ɵl, CombochartComponent as ɵf, DrillableComponent as ɵg, HistogramComponent as ɵi, AmexioD3Legend as ɵb, AmexioD3BaseLineComponent as ɵe, MultiareaComponent as ɵk, ScatterchartComponent as ɵj, CommanDataService as ɵd, AmexioD3TimelineChartComponent as ɵn };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,