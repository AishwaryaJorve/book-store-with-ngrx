/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, ElementRef, Input, ChangeDetectorRef } from "@angular/core";
import * as d3 from 'd3';
import { AmexioD3BaseLineComponent } from "./baseline.component";
import { CommanDataService } from '../services/comman.data.service';
import { DeviceQueryService } from "../services/device.query.service";
var AmexioD3LineComponent = /** @class */ (function (_super) {
    tslib_1.__extends(AmexioD3LineComponent, _super);
    function AmexioD3LineComponent(deviceQueryService, cdf, myservice) {
        var _this = _super.call(this, deviceQueryService) || this;
        _this.deviceQueryService = deviceQueryService;
        _this.cdf = cdf;
        _this.myservice = myservice;
        _this.labelcolor = '';
        return _this;
    }
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            /** @type {?} */
            var resp_1;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    resp_1 = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                }), (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.data = _this.getResponseData(resp_1);
                        _this.plotD3Chart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(_this.data);
                    _this.plotD3Chart();
                }), 0);
            }
        }
    };
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.data) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.data = _this.getResponseData(_this.data);
                _this.plotD3Chart();
            }), 0);
        }
    };
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.validateData = /**
     * @return {?}
     */
    function () {
        if (this.data) {
        }
        else {
            return "lmask";
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AmexioD3LineComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                resp = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
            }), (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.data = _this.getResponseData(resp);
                    _this.drawChart();
                }), 0);
            }));
        }
    };
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.plotD3Chart();
        }), 0);
    };
    //RESIZE STEP 5 STARTS
    //RESIZE STEP 5 STARTS
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.resize = 
    //RESIZE STEP 5 STARTS
    /**
     * @return {?}
     */
    function () {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            // this.resizewt = this.chartId.nativeElement.offsetWidth;
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotD3Chart();
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    AmexioD3LineComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = tslib_1.__values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_1, _a;
    };
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.plotD3Chart = /**
     * @return {?}
     */
    function () {
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var linechart = this.initChart();
        this.rawdata = linechart.rawdata;
        // this.svgwidth = linechart.width;
        this.plotScale(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width);
        this.plotLine(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width, [], tooltip, (1));
        if (this.multiseriesdata) {
            for (var index = 0; index < this.multiseriesdata.length; index++) {
                this.plotLine(linechart.g, linechart.x, linechart.y, linechart.height, linechart.width, this.multiseriesdata[index], tooltip, (index + 1));
            }
        }
    };
    //RESIZE STEP 4 STARTS
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    AmexioD3LineComponent.prototype.validateresize = 
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.wt) {
            }
            else {
                _this.resize();
            }
        }), 0);
    };
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 4 ENDS
    /**
     * @private
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @param {?} data
     * @param {?} tooltip
     * @param {?} i
     * @return {?}
     */
    AmexioD3LineComponent.prototype.plotLine = 
    //RESIZE STEP 4 ENDS
    /**
     * @private
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @param {?} data
     * @param {?} tooltip
     * @param {?} i
     * @return {?}
     */
    function (g, x, y, height, width, data, tooltip, i) {
        var _this = this;
        /** @type {?} */
        var line = d3.line()
            .x((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return x(d.label); }))
            .y((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return y(d.value); }));
        /** @type {?} */
        var tempcolor = "black";
        g.append("path")
            .datum(data)
            .attr("fill", "none")
            .attr("stroke", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (_this.linecolor.length > 0) {
                if (_this.linecolor[i - 1]) {
                    return _this.linecolor[i - 1];
                }
                else {
                    return _this.predefinedcolors[i - 1];
                }
            }
            else if (_this.linecolor.length < 1) {
                return _this.predefinedcolors[i - 1];
                //  return tempcolor;
            }
        }))
            .attr("stroke-width", 1.5)
            .attr("d", line);
        g.selectAll('dot')
            .data(data)
            .enter()
            .append('circle')
            .attr("cx", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return x(d.label); }))
            .attr("cy", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return y(d.value); }))
            .attr('r', 2)
            .attr("fill", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (_this.linecolor.length > 0) {
                if (_this.linecolor[i - 1]) {
                    return _this.linecolor[i - 1];
                }
                else {
                    return _this.predefinedcolors[i - 1];
                }
            }
            else if (_this.linecolor.length < 1) {
                //  return tempcolor;
                return _this.predefinedcolors[i - 1];
            }
        }))
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.html(_this.callTooltip(d))
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.lineChartClick(d);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
        }));
        //lets plot labels here
        if (this.labelflag) {
            g.selectAll('label')
                .data(data)
                .enter()
                .append('text')
                .style("font-weight", "bold")
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                // if (this.labelcolor && this.labelcolor.length > 0) {
                //   return this.labelcolor;
                // } else {
                //   return "black";
                // }
                if (_this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else if (_this.linecolor.length > 0) {
                    if (_this.linecolor[i - 1]) {
                        return _this.linecolor[i - 1];
                    }
                    else {
                        return _this.predefinedcolors[i - 1];
                    }
                }
                else if (_this.linecolor.length < 1) {
                    //  return tempcolor;
                    return _this.predefinedcolors[i - 1];
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @param {?} i
             * @return {?}
             */
            function (d, i) {
                return x(d.label);
            }))
                .attr("y", (/**
             * @param {?} d
             * @param {?} i
             * @return {?}
             */
            function (d, i) {
                return y(d.value) - 10;
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return d.value;
            }))
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.html(_this.callTooltip(d))
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.lineChartClick(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
        }
    };
    /**
     * @param {?} d
     * @return {?}
     */
    AmexioD3LineComponent.prototype.lineChartClick = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var obj = {};
        obj[d.legend] = d.value;
        obj[this.xaxisname] = d.label;
        this.chartClick(obj);
    };
    /**
     * @param {?} tooltipdata
     * @return {?}
     */
    AmexioD3LineComponent.prototype.callTooltip = /**
     * @param {?} tooltipdata
     * @return {?}
     */
    function (tooltipdata) {
        /** @type {?} */
        var obj = {};
        obj[tooltipdata.legend] = tooltipdata.value;
        obj[this.xaxisname] = tooltipdata.label;
        return this.toolTipForBar(obj);
    };
    AmexioD3LineComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-line',
                    template: "<div  #chartId *ngIf=\"drillableFlag\" #divid (window:resize)=\"validateresize()\"> \n    <table [ngClass]=\"validateData()\"  style=\"width: 100%;\" > \n            <ng-container *ngIf = \"title.length > 0\">\n            <tr><td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td></tr>\n            </ng-container>\n            <tr>\n                <td>\n                    <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n                    </svg>            \n                </td>\n            </tr>\n            <tr  *ngIf=\"legend\">\n                <td style=\"display: block; padding: 5px;\">\n                        <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"legendClick($event)\" \n                                            [data]=\"linelegends\" style=\"height:100%;\">\n                        </amexio-d3-legend>\n                </td>\n            \n            </tr>\n    </table>\n    <!-- <div *ngIf=\"data.length < 1\" class=\"lmask\" style=\"padding-top:50%\">\n        </div> -->\n    </div>\n    \n    <!-- {{legends | json}} -->"
                },] },
    ];
    AmexioD3LineComponent.ctorParameters = function () { return [
        { type: DeviceQueryService },
        { type: ChangeDetectorRef },
        { type: CommanDataService }
    ]; };
    AmexioD3LineComponent.propDecorators = {
        labelcolor: [{ type: Input, args: ['label-color',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        drillid: [{ type: ViewChild, args: ['drillid',] }]
    };
    return AmexioD3LineComponent;
}(AmexioD3BaseLineComponent));
export { AmexioD3LineComponent };
if (false) {
    /** @type {?} */
    AmexioD3LineComponent.prototype.labelcolor;
    /** @type {?} */
    AmexioD3LineComponent.prototype.chartId;
    /** @type {?} */
    AmexioD3LineComponent.prototype.divid;
    /** @type {?} */
    AmexioD3LineComponent.prototype.drillid;
    /** @type {?} */
    AmexioD3LineComponent.prototype.wt;
    /** @type {?} */
    AmexioD3LineComponent.prototype.rawdata;
    /** @type {?} */
    AmexioD3LineComponent.prototype.deviceQueryService;
    /**
     * @type {?}
     * @private
     */
    AmexioD3LineComponent.prototype.cdf;
    /** @type {?} */
    AmexioD3LineComponent.prototype.myservice;
}
//# sourceMappingURL=data:application/json;base64,