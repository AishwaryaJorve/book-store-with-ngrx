/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, ViewChild, ChangeDetectorRef } from '@angular/core';
import { AmexioD3BaseChartComponent } from '../base/base.component';
import { CommanDataService } from '../services/comman.data.service';
import { DeviceQueryService } from '../services/device.query.service';
import * as d3 from 'd3';
export class ScatterchartComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     * @param {?} device
     */
    constructor(myservice, cdf, device) {
        super('scatter');
        this.myservice = myservice;
        this.cdf = cdf;
        this.device = device;
        this.svgheight = 300;
        this.color = "blue";
        this.zoomflag = false;
        this.zoominitiated = false;
        this.keyArray = [];
        this.transformeddata = [];
        this.legendarray = [];
        this.resizebtnflag = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.wt = this.svgwidth;
        this.dataFormatted = [];
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    resp = response;
                    this.httpresponse = resp;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                }), (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.data = this.getResponseData(resp);
                        this.dataFormatted = this.data;
                        this.transformData(this.dataFormatted);
                        this.colorGeneration();
                        this.legendCreation();
                        this.plotScatterChart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.dataFormatted = this.data;
                    this.data = this.getResponseData(this.data);
                    this.transformData(this.data);
                    this.colorGeneration();
                    this.legendCreation();
                    this.plotScatterChart();
                }), 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                resp = response;
                this.httpresponse = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
            }), (/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    //this.data = this.getResponseData(resp);
                    this.drawChart();
                }), 0);
            }));
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.data = this.getResponseData(this.httpresponse);
            this.dataFormatted = this.data;
            this.transformData(this.data);
            this.colorGeneration();
            this.legendCreation();
            this.plotScatterChart();
        }), 0);
    }
    // Method to transform data in key value pair 
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.keyArray = data[0];
        data.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (index > 0) {
                /** @type {?} */
                let DummyObject = {};
                element.forEach((/**
                 * @param {?} individualvalue
                 * @param {?} keyindex
                 * @return {?}
                 */
                (individualvalue, keyindex) => {
                    DummyObject[this.keyArray[keyindex]] = individualvalue;
                }));
                this.transformeddata.push(DummyObject);
            }
        }));
        this.data = this.transformeddata;
    }
    // Method get response data using data reader
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    // Method to plot d3 chart
    /**
     * @return {?}
     */
    plotScatterChart() {
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        const margin = { top: 20, right: 20, bottom: 30, left: 60 };
        /** @type {?} */
        const width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        const height = this.svgheight - margin.top - margin.bottom;
        /** @type {?} */
        let x;
        /** @type {?} */
        let y;
        x = d3.scaleLinear()
            .rangeRound([0, width]);
        y = d3.scaleLinear()
            .rangeRound([height, 0]);
        /** @type {?} */
        let xAxis = d3.axisBottom(x);
        /** @type {?} */
        let yAxis = d3.axisLeft(y).ticks(this.tickscount);
        this.svg = d3.select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        x.domain([0, d3.max(this.data, (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return d[Object.keys(d)[0]]; }))]);
        y.domain([0, d3.max(this.data, (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return d[Object.keys(d)[1]]; }))]);
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xAxis).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xAxis)
                    .append("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .style("text-anchor", "start");
            }
        }
        else {
            this.svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        // this.svg.append("g")
        //   .attr("class", "x axis")
        //   .attr("transform", "translate(0," + height + ")")
        //   .call(xAxis)
        //   .append("text")
        //   .attr("class", "label")
        //   .attr("x", width)
        //   .attr("y", -6)
        //   .style("text-anchor", "end");
        this.svg.append("g")
            .attr("class", "y axis")
            .call(yAxis)
            .append("text")
            .attr("class", "label")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end");
        if (this.dataFormatted[0].length == 2) {
            this.plotLine(this.svg, x, y, height, width);
            this.node = this.svg.selectAll(".dot")
                .data(this.data)
                .enter().append("circle")
                .attr("class", "dot")
                .attr("fill", this.color)
                .attr("r", 4.5)
                .attr("cursor", "pointer")
                .attr("cx", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return x(d[Object.keys(d)[0]]);
            }))
                .attr("cy", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return y(d[Object.keys(d)[1]]); }))
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.html(this.formTooltipData(d))
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.scatterChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
            // ------------------------------------------------------------------------------
            if (this.labelflag) {
                this.nodelabel = this.svg.selectAll("labels")
                    .data(this.data)
                    .enter().append("text")
                    .style("font-weight", "bold")
                    .attr("text-anchor", "middle")
                    .attr("vertical-align", "middle")
                    .attr("margin-top", margin.top)
                    .attr("fill", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    if (this.labelcolor.length > 0) {
                        return this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                }))
                    .attr("x", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (d, i) => {
                    return x(d[Object.keys(d)[0]]) + 11;
                }))
                    .attr("y", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (d, i) => {
                    return y(d[Object.keys(d)[1]]);
                }))
                    .text((/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return d[Object.keys(d)[1]];
                }))
                    .attr("cursor", "pointer")
                    .on("mouseover", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.style("visibility", "visible");
                }))
                    .on("mousemove", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.html(this.formTooltipData(d))
                        .style("top", (d3.event.pageY - 10) + "px")
                        .style("left", (d3.event.pageX + 10) + "px");
                }))
                    .on("mouseout", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.style("visibility", "hidden");
                }))
                    .on("click", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    this.scatterChartClick(d);
                    this.fordrillableClick(this, d, event);
                    return tooltip.style("visibility", "hidden");
                }));
            }
        }
        else {
            this.plotLine(this.svg, x, y, height, width);
            this.node = this.svg.selectAll(".dot")
                .data(this.transformeddata)
                .enter().append("circle")
                .attr("class", "dot")
                .attr("r", 4.5)
                .attr("cursor", "pointer")
                .attr("cx", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return x(d[Object.keys(d)[0]]);
            }))
                .attr("cy", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return y(d[Object.keys(d)[1]]); }))
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return d[Object.keys(d)[4]]; }))
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.html(this.formTooltipData(d))
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.scatterChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
            if (this.labelflag) {
                this.nodelabel = this.svg.selectAll("labels")
                    .data(this.data)
                    .enter().append("text")
                    .style("font-weight", "bold")
                    .attr("text-anchor", "middle")
                    .attr("vertical-align", "middle")
                    .attr("margin-top", margin.top)
                    .attr("fill", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    if (this.labelcolor.length > 0) {
                        return this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                }))
                    .attr("x", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (d, i) => {
                    return x(d[Object.keys(d)[0]]) + 11;
                }))
                    .attr("y", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (d, i) => {
                    return y(d[Object.keys(d)[1]]);
                }))
                    .text((/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return d[Object.keys(d)[1]];
                }))
                    .attr("cursor", "pointer")
                    .on("mouseover", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.style("visibility", "visible");
                }))
                    .on("mousemove", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.html(this.formTooltipData(d))
                        .style("top", (d3.event.pageY - 10) + "px")
                        .style("left", (d3.event.pageX + 10) + "px");
                }))
                    .on("mouseout", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.style("visibility", "hidden");
                }))
                    .on("click", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    this.scatterChartClick(d);
                    this.fordrillableClick(this, d, event);
                    return tooltip.style("visibility", "hidden");
                }));
            }
        }
        //create zoom handler 
        if (this.zoomflag) {
            this.zoominitiated = true;
            /** @type {?} */
            let zoom_handler = d3.zoom()
                .on("zoom", this.zoom_actions.bind(this));
            zoom_handler(this.svg);
        }
    }
    /**
     * @return {?}
     */
    togglebtnflag() {
        this.resizebtnflag = true;
    }
    /**
     * @return {?}
     */
    zoom_actions() {
        this.node.attr("transform", d3.event.transform);
        if (this.labelflag) {
            this.nodelabel.attr("transform", d3.event.transform);
        }
        this.resizebtnflag = true;
        this.zoominitiated = false;
    }
    /**
     * @return {?}
     */
    resizesvg() {
        // this.svg = null;
        this.svg.selectAll("*").remove();
        this.plotScatterChart();
        this.resizebtnflag = false;
    }
    // Method to form tooltip data
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    formTooltipData(tooltipData) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(tooltipData)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        return this.toolTipForBar(object);
    }
    // Method on chart click
    /**
     * @param {?} event
     * @return {?}
     */
    scatterChartClick(event) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(event)) {
            if (key !== 'color') {
                object[key] = value;
            }
        }
        this.chartClick(object);
    }
    // method to create Legend
    /**
     * @return {?}
     */
    legendCreation() {
        if (this.dataFormatted[0].length == 2) {
            this.legends = [];
            /** @type {?} */
            let element = this.dataFormatted[0];
            /** @type {?} */
            let object = { 'label': element[0] + " " + "vs" + " " + element[1], 'color': this.color };
            this.legends.push(object);
        }
        else {
            this.legends = [];
            this.legendarray.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                /** @type {?} */
                let legendobject = {};
                legendobject['label'] = element.label;
                legendobject['color'] = element.color;
                this.legends.push(legendobject);
            }));
        }
    }
    // Method on Legend Click
    /**
     * @param {?} legendevent
     * @return {?}
     */
    onScatterLegendClick(legendevent) {
        if (this.dataFormatted[0].length == 2) {
            this.onLegendClick.emit(this.data);
        }
        else {
            this.legendarray.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (legendevent.label == element.label) {
                    /** @type {?} */
                    let arr = element.value;
                    /** @type {?} */
                    let temparr = [];
                    arr.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    element => {
                        /** @type {?} */
                        let obj = {};
                        for (let [key, value] of Object.entries(element)) {
                            if (key !== 'color') {
                                obj[key] = value;
                            }
                        } //for end
                        temparr.push(obj);
                    })); //for each ends
                    this.legendClick(temparr);
                }
            }));
        }
    }
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    validateresize() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.wt) {
            }
            else {
                this.resize();
            }
        }), 0);
    }
    //RESIZE STEP 4 ENDS
    // Method for responsiveness
    /**
     * @return {?}
     */
    resize() {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotScatterChart();
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, x, y, height, width) {
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(d3.axisBottom(x).
                tickSize(-this.width).tickFormat(''));
        }
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y)
                .tickSize(-width).tickFormat('').ticks(this.tickscount));
        }
    }
    /**
     * @return {?}
     */
    colorGeneration() {
        this.legendarray = [];
        /** @type {?} */
        let i = 0;
        /** @type {?} */
        let names = this.dataFormatted
            .map((/**
         * @param {?} e
         * @return {?}
         */
        e => e[2]))
            .filter((/**
         * @param {?} e
         * @param {?} i
         * @param {?} a
         * @return {?}
         */
        (e, i, a) => a.indexOf(e) === i));
        for (let j = 1; j < names.length; j++) {
            /** @type {?} */
            let value = [];
            /** @type {?} */
            let obj = { "label": "", "color": "", "value": [] };
            this.transformeddata.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (element[Object.keys(element)[2]] == names[j]) {
                    element['color'] = this.predefinedcolors[i];
                    value.push(element);
                }
            }));
            obj["value"] = value;
            obj["label"] = names[j];
            obj["color"] = this.predefinedcolors[i];
            this.legendarray.push(obj);
            i++;
        }
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendData = [];
        this.legendarray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let legendobject = {};
            legendobject['label'] = element.label;
            legendobject['color'] = element.color;
            this.legendData.push(legendobject);
        }));
    }
}
ScatterchartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-scatter',
                template: `<div #chartId  *ngIf="drillableFlag" (window:resize)="validateresize()">
        <table *ngIf="data.length > 0"  style="width: 100%;">
            <tr >
                <td colspan="2" style="font-size: 18px; font-weight: bold; "> {{title}}
                 <span *ngIf="resizebtnflag">
               <button  type="reset" class="fa fa-search-minus" style="cursor: pointer; float:right" (click)="resizesvg()">
               </button>
               </span>     
                </td>
            </tr>
            <tr>
                <td>
                    <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
                    </svg>
                </td>
            </tr>
            <tr *ngIf="legend">
                <td style="display: block; padding: 5px;">
                    <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="onScatterLegendClick($event)" [data]="legends" style="height:100%;"></amexio-d3-legend>
                </td>
            </tr>
        </table>
        <div *ngIf="data.length < 1" class="lmask" style="padding-top:50%">
            </div>
    </div>`,
                styles: [``]
            },] },
];
ScatterchartComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef },
    { type: DeviceQueryService }
];
ScatterchartComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    color: [{ type: Input, args: ['color',] }],
    zoomflag: [{ type: Input, args: ['zoom-enable',] }],
    tickscount: [{ type: Input, args: ['yaxis-interval',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }]
};
if (false) {
    /** @type {?} */
    ScatterchartComponent.prototype.svgwidth;
    /** @type {?} */
    ScatterchartComponent.prototype.svgheight;
    /** @type {?} */
    ScatterchartComponent.prototype.color;
    /** @type {?} */
    ScatterchartComponent.prototype.zoomflag;
    /** @type {?} */
    ScatterchartComponent.prototype.tickscount;
    /** @type {?} */
    ScatterchartComponent.prototype.chartId;
    /** @type {?} */
    ScatterchartComponent.prototype.divid;
    /** @type {?} */
    ScatterchartComponent.prototype.wt;
    /** @type {?} */
    ScatterchartComponent.prototype.zoominitiated;
    /** @type {?} */
    ScatterchartComponent.prototype.svg;
    /** @type {?} */
    ScatterchartComponent.prototype.keyArray;
    /** @type {?} */
    ScatterchartComponent.prototype.transformeddata;
    /** @type {?} */
    ScatterchartComponent.prototype.data;
    /** @type {?} */
    ScatterchartComponent.prototype.dataFormatted;
    /** @type {?} */
    ScatterchartComponent.prototype.colordata;
    /** @type {?} */
    ScatterchartComponent.prototype.legends;
    /** @type {?} */
    ScatterchartComponent.prototype.legendarray;
    /** @type {?} */
    ScatterchartComponent.prototype.legendData;
    /** @type {?} */
    ScatterchartComponent.prototype.httpresponse;
    /** @type {?} */
    ScatterchartComponent.prototype.node;
    /** @type {?} */
    ScatterchartComponent.prototype.nodelabel;
    /** @type {?} */
    ScatterchartComponent.prototype.resizebtnflag;
    /**
     * @type {?}
     * @private
     */
    ScatterchartComponent.prototype.myservice;
    /**
     * @type {?}
     * @private
     */
    ScatterchartComponent.prototype.cdf;
    /**
     * @type {?}
     * @private
     */
    ScatterchartComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,