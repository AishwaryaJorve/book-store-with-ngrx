/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input, Output, EventEmitter } from "@angular/core";
var AmexioD3BaseChartComponent = /** @class */ (function () {
    function AmexioD3BaseChartComponent(charttype) {
        this.onLegendClick = new EventEmitter();
        this.onChartClick = new EventEmitter();
        this.onLineClick = new EventEmitter();
        this.drillableEvent = new EventEmitter();
        this.data = [];
        this.legend = true;
        this.height = "300";
        this.width = "300";
        this.title = "";
        this.labelcolor = "black";
        this.labelflag = false;
        this.level = 0;
        this.drillabledatakey = [];
        this.hScale = true;
        this.vScale = false;
        this.resizeflag = false;
        //-------------------
        this.drillableFlag = true;
        this.possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcddefghijklmonpqrstuvwxyz";
        this.colorIndex = 0;
        this.colors = [];
        this.charttype = charttype;
        this.predefinedcolors = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
        this.componentId = this.charttype + "-" + this.generateId();
    }
    /**
     * @protected
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.initializeData = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            element.color = _this.getColor(element);
        }));
    };
    /**
     * @protected
     * @param {?} data
     * @param {?} drillablekeys
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.getMultipleDrillbleKeyData = /**
     * @protected
     * @param {?} data
     * @param {?} drillablekeys
     * @return {?}
     */
    function (data, drillablekeys) {
        /** @type {?} */
        var nodeObject = {};
        if (data) {
            for (var index = 0; index < drillablekeys.length; index++) {
                /** @type {?} */
                var element = drillablekeys[index];
                try {
                    for (var _a = tslib_1.__values(Object.entries(data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                        if (key == element) {
                            nodeObject[key] = value;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                ;
            }
            return nodeObject;
        }
        var e_1, _d;
    };
    /**
     * @private
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.generateId = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var id = "";
        for (var i = 0; i < 5; i++) {
            id = id + this.possible
                .charAt(Math.floor(Math.random() * this.possible.length));
        }
        id = id + "-" + new Date().getTime();
        return id;
    };
    /**
     * @private
     * @param {?} object
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.getColor = /**
     * @private
     * @param {?} object
     * @return {?}
     */
    function (object) {
        if (object.color) {
            return object.color;
        }
        else if (this.colors.length > this.colorIndex) {
            /** @type {?} */
            var color = this.colors[this.colorIndex];
            this.colorIndex++;
            return color;
        }
        else if ((this.colors.length > 0) && (this.colors.length <= this.colorIndex)) {
            this.colorIndex = 0;
            /** @type {?} */
            var color = this.colors[this.colorIndex];
            return color;
        }
        else {
            /** @type {?} */
            var color = this.predefinedcolors[this.colorIndex];
            this.colorIndex++;
            return color;
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.legendClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.onLegendClick.emit(node);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.chartClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.onChartClick.emit(node);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.comboLineClick = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.onLineClick.emit(node);
    };
    /**
     * @param {?} ref
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.fordrillableClick = /**
     * @param {?} ref
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    function (ref, node, event) {
        this.drillableEvent.emit({ ref: ref, node: node, event: event });
    };
    /**
     * @protected
     * @param {?} d3
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.toolTip = /**
     * @protected
     * @param {?} d3
     * @return {?}
     */
    function (d3) {
        return d3.select("body")
            .append("div")
            .attr('id', 'tooltipid')
            .attr('class', 'amexiod3tooltip')
            .style("position", "absolute")
            .style("z-index", "10")
            .style("fill", "black")
            .style("visibility", "hidden");
    };
    /**
     * @protected
     * @param {?} tooltipdata
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.toolTipContent = /**
     * @protected
     * @param {?} tooltipdata
     * @return {?}
     */
    function (tooltipdata) {
        /** @type {?} */
        var tooltiphtml = "<table>";
        for (var key in tooltipdata) {
            if (tooltipdata.hasOwnProperty(key)) {
                /** @type {?} */
                var value = tooltipdata[key];
                tooltiphtml = tooltiphtml + "<tr>";
                //------------------
                //   tooltiphtml = tooltiphtml + "<td>";
                //   tooltiphtml = tooltiphtml + key+':';
                //   tooltiphtml = tooltiphtml + "</td>";
                //------------------
                tooltiphtml = tooltiphtml + "<td>";
                tooltiphtml = tooltiphtml + value;
                tooltiphtml = tooltiphtml + "</td>";
                tooltiphtml = tooltiphtml + "</tr>";
            }
        }
        tooltiphtml = tooltiphtml + "</table>";
        return tooltiphtml;
    };
    /**
     * @protected
     * @param {?} legend
     * @param {?} xaxis
     * @param {?} yaxis
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.toolTipWithLegendandAxis = /**
     * @protected
     * @param {?} legend
     * @param {?} xaxis
     * @param {?} yaxis
     * @return {?}
     */
    function (legend, xaxis, yaxis) {
        /** @type {?} */
        var tooltiphtml = "<div>";
        tooltiphtml = tooltiphtml + "<b>" + xaxis + "</b>, ";
        tooltiphtml = tooltiphtml + legend + "</b> ";
        tooltiphtml = tooltiphtml + "<b>" + yaxis + "</b> ";
        tooltiphtml = tooltiphtml + "</div>";
        return tooltiphtml;
    };
    /**
     * @protected
     * @param {?} tooltipData
     * @return {?}
     */
    AmexioD3BaseChartComponent.prototype.toolTipForBar = /**
     * @protected
     * @param {?} tooltipData
     * @return {?}
     */
    function (tooltipData) {
        /** @type {?} */
        var tooltiphtml = "<div>";
        try {
            for (var _a = tslib_1.__values(Object.entries(tooltipData)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                /** @type {?} */
                var sideStyle = "float:left";
                tooltiphtml = tooltiphtml + "<div>";
                tooltiphtml = tooltiphtml + "<span style =" + sideStyle + " ><b>" + key + " " + "</b>" + value + "</br></span>";
                tooltiphtml = tooltiphtml + "</div>";
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return tooltiphtml;
        var e_2, _d;
    };
    AmexioD3BaseChartComponent.propDecorators = {
        onLegendClick: [{ type: Output }],
        onChartClick: [{ type: Output }],
        onLineClick: [{ type: Output }],
        drillableEvent: [{ type: Output }],
        data: [{ type: Input, args: ['data',] }],
        httpurl: [{ type: Input, args: ['http-url',] }],
        httpmethod: [{ type: Input, args: ['http-method',] }],
        legend: [{ type: Input, args: ['legend',] }],
        colors: [{ type: Input, args: ['color',] }],
        height: [{ type: Input, args: ['height',] }],
        width: [{ type: Input, args: ['width',] }],
        title: [{ type: Input, args: ['title',] }],
        labelcolor: [{ type: Input, args: ['label-color',] }],
        labelflag: [{ type: Input, args: ['label',] }],
        datareader: [{ type: Input, args: ['data-reader',] }],
        level: [{ type: Input, args: ['level',] }],
        target: [{ type: Input, args: ['target',] }],
        drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
        hScale: [{ type: Input, args: ['horizontal-scale',] }],
        vScale: [{ type: Input, args: ['vertical-scale',] }]
    };
    return AmexioD3BaseChartComponent;
}());
export { AmexioD3BaseChartComponent };
if (false) {
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.onLegendClick;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.onChartClick;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.onLineClick;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.drillableEvent;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.data;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.httpurl;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.httpmethod;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.legend;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.colors;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.height;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.width;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.title;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.labelcolor;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.labelflag;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.datareader;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.level;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.target;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.drillabledatakey;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.hScale;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.vScale;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.resizeflag;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.drillableFlag;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.predefinedcolors;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.componentId;
    /**
     * @type {?}
     * @private
     */
    AmexioD3BaseChartComponent.prototype.possible;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.colorIndex;
    /** @type {?} */
    AmexioD3BaseChartComponent.prototype.charttype;
}
//# sourceMappingURL=data:application/json;base64,