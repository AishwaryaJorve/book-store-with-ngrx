/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, ChangeDetectorRef, } from "@angular/core";
import { AmexioD3BaseChartComponent } from "../base/base.component";
import * as d3 from 'd3';
import { CommanDataService } from '../services/comman.data.service';
import { DeviceQueryService } from '../services/device.query.service';
export class AmexioD3TimelineChartComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     * @param {?} device
     */
    constructor(myservice, cdf, device) {
        super('timeline');
        this.myservice = myservice;
        this.cdf = cdf;
        this.device = device;
        this.svgheight = 200;
        this.level = 0;
        this.drillabledatakey = [];
        this.labelcolor = "black";
        this.labelflag = false;
        this.lanes = [];
        this.timelinechartData = [];
        this.drillableFlag = true;
        this.resizeflag = false;
        this.monthlist = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    resp = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                }), (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.data = this.getResponseData(resp);
                        this.transformTODate(this.data);
                        this.transformData(this.urldata);
                        this.plotChart();
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(this.data);
                    this.transformData(this.data);
                    this.plotChart();
                }), 0);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                resp = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
            }), (/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(resp);
                    this.drawChart();
                }), 0);
            }));
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.transformTODate(this.data);
            this.transformData(this.urldata);
            this.plotChart();
        }), 0);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    plotChart() {
        /** @type {?} */
        let laneLength = this.lanes.length;
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        let m = [20, 25, 15, 120];
        /** @type {?} */
        let //top right bottom left
        width = this.svgwidth - m[1] - m[3];
        /** @type {?} */
        let height = this.svgheight - m[0] - m[2];
        /** @type {?} */
        let miniHeight = laneLength * 12 + 50;
        /** @type {?} */
        let mainHeight = height - miniHeight - 50;
        /** @type {?} */
        let mindate;
        /** @type {?} */
        let maxdate;
        /** @type {?} */
        let barheight = 20;
        if (this.httpurl && this.httpmethod) {
            mindate = this.urldata[0][1].getFullYear(),
                maxdate = this.urldata[this.urldata.length - 1][2].getFullYear();
        }
        else {
            mindate = this.data[0][1].getFullYear(),
                maxdate = this.data[this.data.length - 1][2].getFullYear();
        }
        /** @type {?} */
        let x = d3.scaleTime()
            .domain([this.mindate, this.maxdate])
            .range([0, width]);
        /** @type {?} */
        let x1 = d3.scaleLinear()
            .domain([mindate, maxdate])
            .range([m[3], width + m[3]]);
        /** @type {?} */
        let y1 = d3.scaleLinear()
            .domain([0, laneLength])
            .range([0, miniHeight]);
        this.svg = d3.select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight)
            .attr("width", width + m[1] + m[3])
            .attr("height", height + m[0] + m[2]);
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x1).ticks(this.xtickscount)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x1).ticks(this.xtickscount));
            }
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x1).ticks(this.xtickscount)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        /** @type {?} */
        let mini = this.svg.append("g")
            .attr("transform", "translate(" + m[3] + "," + (mainHeight + m[0]) + ")")
            .attr("width", width)
            .attr("height", mainHeight)
            .attr("class", "mini");
        //mini lanes and texts
        mini.append("g").selectAll(".laneLines")
            .data(this.timelinechartData)
            .enter().append("line")
            .attr("y1", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return y1(d.lane); }))
            .attr("x2", width)
            .attr("y2", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return y1(d.lane); }))
            .attr("stroke", "lightgray");
        mini.append("g").selectAll(".laneText")
            .data(this.lanes)
            .enter().append("text")
            .text((/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return d; }))
            .attr("x", -m[1])
            .attr("y", (/**
         * @param {?} d
         * @param {?} i
         * @return {?}
         */
        (d, i) => { return y1(i + .5); }))
            .attr("dy", ".5ex")
            .attr("text-anchor", "end")
            .attr("class", "laneText");
        //mini item rects
        mini.append("g").selectAll("miniItems")
            .data(this.timelinechartData)
            .enter().append("rect")
            .attr("class", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return "miniItem" + d.lane; }))
            .attr("fill", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        (d, index) => { return this.predefinedcolors[index]; }))
            .attr("x", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return x(d.start); }))
            .attr("y", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => { return (y1(d.lane + .5) - 5); }))
            .attr("width", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return Math.abs(x(d.end) - x(d.start));
        }))
            .attr("height", barheight)
            .attr("cursor", "pointer")
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.html(this.formTooltipData(d)
            //  this.toolTipForBar(d)
            // this.toolTipContent(d)
            )
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            this.timelineChartClick(d);
            this.fordrillableClick(this, d, event);
            return tooltip.style("visibility", "hidden");
        }));
        /** @type {?} */
        let barwidth;
        //mini labels
        /** @type {?} */
        let monthlist1 = this.monthlist;
        if (this.labelflag) {
            mini.append("g").selectAll(".miniLabels")
                .data(this.timelinechartData)
                .enter().append("text")
                .style("font-weight", "bold")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (this.labelcolor.length > 0) {
                    return this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .style("font-size", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                barwidth = Math.min(Math.abs(x(d.end) - x(d.start)));
                return barwidth / 20 + "px";
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (d.id) {
                    /** @type {?} */
                    let startfullyear = d.start.getFullYear();
                    /** @type {?} */
                    let startMonth = monthlist1[d.start.getMonth()];
                    /** @type {?} */
                    let endfullyear = d.end.getFullYear();
                    /** @type {?} */
                    let endMonth = monthlist1[d.end.getMonth()];
                    /** @type {?} */
                    let date = startMonth + " " + startfullyear + "-" + endMonth + " " + endfullyear;
                    return date;
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return x(d.start);
            }))
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return y1(d.lane + .5); }))
                .attr("dy", "1.2ex")
                .attr("dx", "9ex")
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.html(this.formTooltipData(d)
                //  this.toolTipForBar(d)
                // this.toolTipContent(d)
                )
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.timelineChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
            }));
        }
    }
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    formTooltipData(tooltipData) {
        /** @type {?} */
        let object = {};
        /** @type {?} */
        let mlist = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
        /** @type {?} */
        let label1 = "Duration";
        /** @type {?} */
        let label2 = "Name";
        /** @type {?} */
        let startfullyear = tooltipData.start.getFullYear();
        /** @type {?} */
        let startMonth = mlist[tooltipData.start.getMonth()];
        /** @type {?} */
        let endfullyear = tooltipData.end.getFullYear();
        /** @type {?} */
        let endMonth = mlist[tooltipData.end.getMonth()];
        /** @type {?} */
        let date = startMonth + " " + startfullyear + "-" + endMonth + " " + endfullyear;
        object[label2 + ":"] = tooltipData.id;
        object[label1 + ":"] = date;
        return this.toolTipForBar(object);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformTODate(data) {
        this.urldata = [];
        data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let dataobj = [];
            /** @type {?} */
            let startdate = new Date(element[1]);
            /** @type {?} */
            let enddate = new Date(element[2]);
            dataobj.push(element[0]);
            dataobj.push(startdate);
            dataobj.push(enddate);
            this.urldata.push(dataobj);
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        this.lanes = [];
        this.timelinechartData = [];
        this.legends = [];
        /** @type {?} */
        let datalength = data.length - 1;
        /** @type {?} */
        let length = data.length;
        this.mindate = data[0][1];
        this.maxdate = data[datalength][2];
        /** @type {?} */
        let mlist = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
        data.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        (element, i) => {
            /** @type {?} */
            let dataObj = { "lane": "", "id": "", "start": "", "end": "" };
            this.lanes.push(element[0]);
            dataObj["lane"] = i;
            dataObj["id"] = element[0];
            dataObj["start"] = element[1];
            dataObj["end"] = element[2];
            this.timelinechartData.push(dataObj);
        }));
        this.timelinechartData.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        (element, i) => {
            /** @type {?} */
            let startfullyear = element.start.getFullYear();
            /** @type {?} */
            let startMonth = mlist[element.start.getMonth()];
            /** @type {?} */
            let endfullyear = element.end.getFullYear();
            /** @type {?} */
            let endMonth = mlist[element.end.getMonth()];
            /** @type {?} */
            let date = startMonth + " " + startfullyear + "-" + endMonth + " " + endfullyear;
            /** @type {?} */
            let object = { 'label': this.lanes[i], 'color': this.predefinedcolors[i], 'Duration': date };
            this.legends.push(object);
        }));
        /** @type {?} */
        let Obj = { "lane": "", "id": "", "start": "", "end": "" };
        Obj["lane"] = length;
        this.timelinechartData.push(Obj);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    timelineChartClick(event) {
        /** @type {?} */
        let object = {};
        /** @type {?} */
        let mlist = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
        /** @type {?} */
        let startfullyear = event.start.getFullYear();
        /** @type {?} */
        let startMonth = mlist[event.start.getMonth()];
        /** @type {?} */
        let endfullyear = event.end.getFullYear();
        /** @type {?} */
        let endMonth = mlist[event.end.getMonth()];
        /** @type {?} */
        let date = startMonth + " " + startfullyear + "-" + endMonth + " " + endfullyear;
        object["Name"] = event.id;
        object["Duration"] = date;
        this.chartClick(object);
    }
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    validateresize() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.wt) {
            }
            else {
                this.resize();
            }
        }), 0);
    }
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    resize() {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            // this.resizewt = this.chartId.nativeElement.offsetWidth;
            // console.log("", new Date().getTime(), " ", this.resizewt);
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotChart();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    timelinelegendClick(event) {
        /** @type {?} */
        let obj = {};
        for (let [key, value] of Object.entries(event)) {
            if (key !== 'color') {
                obj[key] = value;
            }
        }
        this.onLegendClick.emit(obj);
    }
}
AmexioD3TimelineChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-timeline',
                template: `
<div  #chartId *ngIf="drillableFlag"  (window:resize)="validateresize()" >
    <table style="width: 100%;" position=" relative">
        <tr *ngIf = "title.length > 0">
            <td style="font-size: 18px; font-weight: bold; "> {{title}} </td>
        </tr>
        <tr>
            <td>
                <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId" 
              >
                </svg>
            </td>
        </tr>
        <tr *ngIf="legend">
            <td style="display: block; padding: 5px;">
                <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="timelinelegendClick($event)" [data]="legends" style="height:100%;">
                </amexio-d3-legend>
            </td>
        </tr>
    </table>
    </div>`
            },] },
];
AmexioD3TimelineChartComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef },
    { type: DeviceQueryService }
];
AmexioD3TimelineChartComponent.propDecorators = {
    data: [{ type: Input, args: ['data',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    labelflag: [{ type: Input, args: ['label',] }],
    xtickscount: [{ type: Input, args: ['xaxis-interval',] }]
};
if (false) {
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.data;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.chartId;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.divid;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.svgwidth;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.svgheight;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.datareader;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.level;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.target;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.drillabledatakey;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.labelcolor;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.labelflag;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.xtickscount;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.lanes;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.timelinechartData;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.mindate;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.maxdate;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.legends;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.drillableFlag;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.resizeflag;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.svg;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.urldata;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.monthlist;
    /** @type {?} */
    AmexioD3TimelineChartComponent.prototype.wt;
    /**
     * @type {?}
     * @private
     */
    AmexioD3TimelineChartComponent.prototype.myservice;
    /**
     * @type {?}
     * @private
     */
    AmexioD3TimelineChartComponent.prototype.cdf;
    /**
     * @type {?}
     * @private
     */
    AmexioD3TimelineChartComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,