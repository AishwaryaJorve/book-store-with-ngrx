/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from "@angular/core";
import * as d3 from 'd3';
import { AmexioD3BaseChartComponent } from "../base/base.component";
export class AmexioD3BaseLineComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} deviceQueryService
     */
    constructor(deviceQueryService) {
        super('line');
        this.deviceQueryService = deviceQueryService;
        this._data = [];
        this.xarr = [];
        this.displayindex = 0;
        this.svgheight = 300;
        // @Input('xaxis-interval') xtickscount: number = 3;
        this.linecolor = [];
        this.slant = false;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set data(v) {
        this._data = v;
        if (this._data && (this._data.length > 0)) {
            this.createXYAxisData();
        }
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @protected
     * @return {?}
     */
    createXYAxisData() {
        this.labelcolor;
        this.xaxisdata = [];
        this.yaxisdata = [];
        this.multiseriesdata = [];
        this.legenddata = [];
        this.legends = [];
        this.xaxisname = this.data[0][0].label;
        /** @type {?} */
        const msdarray = [];
        /** @type {?} */
        let count = 0
        // ************************************************
        ;
        // ************************************************
        if (this.displayfield) {
            // find displayfield index
            this._data[0].forEach((/**
             * @param {?} element
             * @param {?} index
             * @return {?}
             */
            (element, index) => {
                if (element.label == this.displayfield) {
                    this.displayindex = index;
                }
            }));
        }
        // ***********************************************
        for (let index = 0; index < this._data[0].length; index++) {
            /** @type {?} */
            const legend = this._data[0][index];
            msdarray[index] = [];
            /** @type {?} */
            let obj = {};
            obj['label'] = legend.label;
            if ((this.linecolor.length > 0) && this.linecolor[index]) {
                obj['color'] = this.linecolor[index];
            }
            else {
                obj['color'] = this.predefinedcolors[index];
            }
            this.legenddata.push(obj);
            // this.legenddata.push({'label':legend.label,'color':this.predefinedcolors[index+1]});
            if (index > 0) {
                /** @type {?} */
                let obj = {};
                obj['label'] = legend.label;
                if ((this.linecolor.length > 0) && this.linecolor[count]) {
                    obj['color'] = this.linecolor[count];
                }
                else {
                    obj['color'] = this.predefinedcolors[count];
                }
                this.legends.push(obj);
                count++;
                // this.legends.push({'label':legend.label,'color':this.predefinedcolors[index]});
            }
        }
        /** @type {?} */
        let i = 0;
        // xaxisdata yaxisdata msdarray is formed here
        this._data.forEach((/**
         * @param {?} object
         * @return {?}
         */
        object => {
            if (i > 0) {
                /** @type {?} */
                let j = 0;
                /** @type {?} */
                let xobj = {};
                object.forEach((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => {
                    // if (j === 0) {
                    //     this.xaxisdata.push({ 'label': a, 'value': a });
                    // } else {
                    //     this.yaxisdata.push({ 'label': a, 'value': a });
                    // }
                    if ((j > 0) && (j !== this.displayindex)) {
                        this.yaxisdata.push({ 'label': a, 'value': a });
                    }
                    if (j == 0) {
                        xobj['value'] = a;
                    }
                    if (j == this.displayindex) {
                        xobj['label'] = a;
                    }
                    msdarray[j].push(a);
                    j++;
                }));
                this.xaxisdata.push(xobj);
            }
            i++;
        }));
        for (let index = 0; index < msdarray.length; index++) {
            /** @type {?} */
            const element = msdarray[index];
            if ((index > 0) && (index !== this.displayindex)) {
                /** @type {?} */
                let md = [];
                for (let j = 0; j < element.length; j++) {
                    /** @type {?} */
                    const v = element[j];
                    md.push({ 'legend': this.legenddata[index].label, 'label': this.xaxisdata[j].label, 'value': v });
                }
                this.multiseriesdata.push(md);
                this.legends[index - 1].data = md;
            }
        }
    }
    /**
     * @param {?} width
     * @return {?}
     */
    recalculatescale(width) {
        // consider fontsize to be 10
        this.xaxisdata;
        /** @type {?} */
        let summationwidth = 0;
        if (!this.displayfield) {
            this.xaxisdata.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (typeof (element.label) == 'string') {
                    summationwidth = summationwidth + (element.label.length * 10);
                }
                if (typeof (element.label) == 'number') {
                    /** @type {?} */
                    let n = this.findDigitCount(element.label);
                    summationwidth = summationwidth + (n * 10);
                }
            }));
        }
        if (this.displayfield) {
            this.xaxisdata.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                // if (typeof (element.label) == 'string') {
                summationwidth = summationwidth + (element.label.length * 10);
                // }
            }));
        }
        if (this.displayfield && this.slant) {
            summationwidth = this.xaxisdata.length * 10;
        }
        if (summationwidth > width) {
            //  function call
            this.calculatexaxisarray(summationwidth, width);
        }
    }
    /**
     * @param {?} summationwidth
     * @param {?} width
     * @return {?}
     */
    calculatexaxisarray(summationwidth, width) {
        /** @type {?} */
        let interval = Math.round(summationwidth / width);
        this.generateNewAxis(interval, width);
    }
    /**
     * @param {?} interval
     * @param {?} avlwidth
     * @return {?}
     */
    generateNewAxis(interval, avlwidth) {
        this.xaxisdata;
        /** @type {?} */
        let arr = [];
        /** @type {?} */
        let newarr = [];
        /** @type {?} */
        let min;
        /** @type {?} */
        let max;
        //    make Array out of this.xaxisdata
        this.xaxisdata.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            // if (typeof (element.label) == 'number') {
            arr.push(element.label);
            // }
        }));
        //null check on arr
        if (arr.length > 0) {
            // find min
            min = Math.min.apply(null, arr);
            //find max
            max = Math.max.apply(null, arr);
            /** @type {?} */
            let temp = Math.round(avlwidth / 10);
            /** @type {?} */
            let differential = (temp - (temp * 0.2)) / 4;
            //form new arr
            /** @type {?} */
            let j = Math.round(differential);
            //   hjlkllll
            /** @type {?} */
            let i;
            /** @type {?} */
            let isredundant = false;
            if (!this.displayfield) {
                newarr[0] = min;
                for (i = 1; j < this.xaxisdata.length; i++) {
                    j = Math.round((differential * i) + i);
                    isredundant = this.checkArrayRedundancy(newarr, Math.round(j));
                    if (isredundant) {
                        newarr[i] = Math.round(j + 1);
                    }
                    else {
                        newarr[i] = Math.round(j);
                    }
                }
                this.sortarr(newarr);
            }
            if (this.displayfield) {
                for (i = 0; j < this.xaxisdata.length; i++) {
                    j = Math.round((differential * i) + i);
                    if (this.xaxisdata[j]) {
                        newarr[i] = this.xaxisdata[j].label;
                    }
                    else {
                        if (this.xaxisdata[j + 1]) {
                            newarr[i] = this.xaxisdata[j + 1].label;
                        }
                    }
                }
                this.xarr = newarr;
            }
        }
    }
    /**
     * @param {?} newarr
     * @param {?} chknum
     * @return {?}
     */
    checkArrayRedundancy(newarr, chknum) {
        /** @type {?} */
        let inc = 0;
        newarr.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (chknum == element) {
                inc++;
            }
        }));
        if (inc > 1) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} newarr
     * @return {?}
     */
    sortarr(newarr) {
        /** @type {?} */
        let i;
        /** @type {?} */
        let j;
        /** @type {?} */
        let temp;
        for (i = 0; i < newarr.length; ++i) {
            for (j = i + 1; j < newarr.length; ++j) {
                if (newarr[i] > newarr[j]) {
                    temp = newarr[i];
                    newarr[i] = newarr[j];
                    newarr[j] = temp;
                }
            }
        }
        //    newarr;
        this.setXaxisData(newarr);
    }
    /**
     * @param {?} newarr
     * @return {?}
     */
    setXaxisData(newarr) {
        this.xarr = newarr;
        // this.xaxisdata.push({label: 125, value: 125});
        // chk if newarr elements are present in xaxisdata
        /** @type {?} */
        let ispresent = false;
        newarr.forEach((/**
         * @param {?} arrelement
         * @return {?}
         */
        arrelement => {
            this.xaxisdata.forEach((/**
             * @param {?} xaxiselement
             * @return {?}
             */
            xaxiselement => {
                if (arrelement == xaxiselement.label) {
                    ispresent = true;
                }
            }));
            if (!ispresent) {
                //create & push an obj in xaxisdata
                /** @type {?} */
                let obj = { label: arrelement, value: arrelement };
                this.xaxisdata.push(obj);
            }
            ispresent = false;
        }));
        //  
        // change arr to arr of objs
        /** @type {?} */
        let xdata = [];
        newarr.forEach((/**
         * @param {?} element
         * @return {?}
         */
        (element) => {
            /** @type {?} */
            let obj = { label: element, value: element };
            xdata.push(obj);
        }));
        this.xaxisdata;
        this.xaxisdata1 = xdata;
        //initialize xaxis data
    }
    /**
     * @param {?} n
     * @return {?}
     */
    findDigitCount(n) {
        /** @type {?} */
        let count = 0;
        if (n >= 1)
            ++count;
        while (n / 10 >= 1) {
            n /= 10;
            ++count;
        }
        return count;
    }
    /**
     * @param {?} width
     * @return {?}
     */
    setXinterval(width) {
        /** @type {?} */
        let interval = Math.round(this.xaxisdata.length / this.xinterval);
        /** @type {?} */
        let arr = [];
        /** @type {?} */
        let newarr = [];
        //    make Array out of this.xaxisdata
        this.xaxisdata.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (typeof (element.label) == 'number') {
                arr.push(element.label);
            }
        }));
        /** @type {?} */
        let min = Math.min.apply(null, arr);
        //find max
        /** @type {?} */
        let max = Math.max.apply(null, arr);
        /** @type {?} */
        let j = interval;
        /** @type {?} */
        let i;
        /** @type {?} */
        let ispresent = false;
        newarr[0] = min;
        // assa
        for (i = 1; j < max; i++) {
            j = interval * i;
            newarr[i] = j;
        }
        // newarr[i] = max;
        //inset numbers which are not present in xaxis domain but present in newarr
        newarr.forEach((/**
         * @param {?} arrelement
         * @return {?}
         */
        arrelement => {
            this.xaxisdata.forEach((/**
             * @param {?} xaxiselement
             * @return {?}
             */
            xaxiselement => {
                if (xaxiselement.label == arrelement) {
                    ispresent = true;
                }
            }));
            if (!ispresent) {
                /** @type {?} */
                let obj = { label: arrelement, value: arrelement };
                this.xaxisdata.push(obj);
            }
            ispresent = false;
        }));
        // this.sortarr(newarr);
        // newarr;
        // this.xaxisdata;
        this.xarr = newarr;
    }
    /**
     * @param {?} width
     * @return {?}
     */
    setDisplayfieldXinterval(width) {
        /** @type {?} */
        let interval = Math.round(this.xaxisdata.length / this.xinterval);
        /** @type {?} */
        let arr = [];
        /** @type {?} */
        let newarr = [];
        //    make Array out of this.xaxisdata
        this.xaxisdata.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            arr.push(element.label);
        }));
        /** @type {?} */
        let min = 0;
        /** @type {?} */
        let max = this.xaxisdata.length - 1;
        /** @type {?} */
        let j = interval;
        /** @type {?} */
        let i;
        newarr[0] = this.xaxisdata[min].label;
        for (i = 1; j < max; i++) {
            newarr[i] = this.xaxisdata[j].label;
            j = interval * i;
        }
        newarr.push(this.xaxisdata[max].label);
        this.xarr = newarr;
    }
    // formatxaxisarr() {
    //     let formattedarr = [];
    //     let temp = '';
    //     if(this.xarr) {
    //     if (typeof (this.xarr[0]) == 'string') {
    //         // treat string
    //         this.xarr.forEach(element => {
    //             if (typeof (element) == 'string') {
    //                 temp = '';
    //                 temp = element[0] + element[1] + '..'
    //                 formattedarr.push(temp)
    //             }
    //         });
    //          this.xarr = formattedarr;
    //     }
    //     if (typeof (this.xarr[0]) == 'number') {
    //         // treat numerials
    //         // wrap numbers
    //     }
    //              }
    // }
    /**
     * @protected
     * @return {?}
     */
    initChart() {
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        //RESIZE STEP 2 START
        this.svg = d3.select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight);
        this.svg.selectAll("*").remove();
        /** @type {?} */
        const margin = { top: 40, right: 20, bottom: 30, left: 40 };
        //RESIZE STEP 2 ENDS HERE
        /** @type {?} */
        const width = +this.svgwidth - margin.left - margin.right;
        // this.xaxisdata;
        if (this.xinterval) {
            if (!this.displayfield) {
                this.setXinterval(width);
            }
            if (this.displayfield) {
                this.setDisplayfieldXinterval(width);
            }
        }
        else {
            this.recalculatescale(width);
        }
        /** @type {?} */
        const height = +this.svgheight - margin.top - margin.bottom;
        /** @type {?} */
        const g = this.svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        /** @type {?} */
        const x = d3.scalePoint()
            .rangeRound([0, width])
            .padding(0.1);
        /** @type {?} */
        const y = d3.scaleLinear()
            .rangeRound([height, 0]);
        /** @type {?} */
        let xdomain;
        if (this.xaxisdata) {
            x.domain(this.xaxisdata.map((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                if (typeof (d.label) == 'string') {
                    return d.label;
                }
                else {
                    return parseInt(d.value);
                }
            })));
        }
        if (this.yaxisdata) {
            y.domain([0, d3.max(this.yaxisdata, (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => { return d.value; }))]);
        }
        //add axis
        /** @type {?} */
        let xaxisbottom = d3.axisBottom(x);
        if (this.xarr.length > 0) {
            // if(this.slant) {
            // this.formatxaxisarr();
            //  }
            xaxisbottom.tickValues(this.xarr);
        }
        if (this.deviceQueryService.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xaxisbottom
                // d3.axisBottom(x)
                // .tickValues(this.xarr)
                ).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                /** @type {?} */
                let bottomaxis = g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xaxisbottom);
                if (this.slant) {
                    // this.formatxaxisarr(); 
                    bottomaxis.selectAll("text")
                        .attr("cursor", "pointer")
                        .on("mouseover", (/**
                     * @param {?} d
                     * @return {?}
                     */
                    (d) => {
                        return tooltip.style("visibility", "visible");
                    }))
                        .on("mousemove", (/**
                     * @param {?} d
                     * @return {?}
                     */
                    (d) => {
                        return tooltip.html(this.callXaxisTooltip(d))
                            .style("top", (d3.event.pageY - 10) + "px")
                            .style("left", (d3.event.pageX + 10) + "px");
                    }))
                        .on("mouseout", (/**
                     * @param {?} d
                     * @return {?}
                     */
                    (d) => {
                        return tooltip.style("visibility", "hidden");
                    }))
                        .on("click", (/**
                     * @param {?} d
                     * @return {?}
                     */
                    (d) => {
                        return tooltip.style("visibility", "hidden");
                    }))
                        .attr("y", 0)
                        .attr("x", 9)
                        .attr("dy", ".35em")
                        .attr("transform", "rotate(90)")
                        .style("text-anchor", "start")
                        .style("font-size", 10);
                }
            }
        }
        else {
            g.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(xaxisbottom).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start")
                .style("font-size", 10);
            ;
        }
        g.append("g")
            .call(d3.axisLeft(y).ticks(this.tickscount));
        // tickSize(0,10));
        /** @type {?} */
        let rawdata = this._data;
        // call function to alter legends if displayfield condn satisfy
        this.alterLegend();
        return {
            g, x, y, height, width, rawdata
        };
        // 
    }
    /**
     * @protected
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotScale(g, x, y, height, width) {
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(d3.axisBottom(x).
                tickSize(-this.width).tickFormat(''));
        }
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y).ticks(this.tickscount)
                .tickSize(-width).tickFormat(''));
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    legendClick(node) {
        // const legendNode = JSON.parse(JSON.stringify(node));
        // delete legendNode.color;
        // legendNode.data.forEach(element => {
        //     delete element.legend;
        // });
        // const legendNode = JSON.parse(JSON.stringify(node));
        // delete legendNode.color;
        // legendNode.data.forEach(element => {
        //     delete element.legend;
        // });
        /** @type {?} */
        let obj = {};
        obj["label"] = node.label;
        /** @type {?} */
        let data = [];
        node.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let object = {};
            object[element.legend] = element.value;
            object[this.xaxisname] = element.label;
            //   object[element.label] = element.value;
            data.push(object);
        }));
        obj["data"] = data;
        this.onLegendClick.emit(obj);
        // this.onLegendClick.emit(legendNode);
    }
    /**
     * @return {?}
     */
    alterLegend() {
        this.linelegends = [];
        if (this.displayfield) {
            this.legends.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (element.label !== this.displayfield) {
                    this.linelegends.push(element);
                }
            }));
        }
        else {
            this.linelegends = this.legends;
        }
    }
    /**
     * @param {?} tooltipdata
     * @return {?}
     */
    callXaxisTooltip(tooltipdata) {
        /** @type {?} */
        var obj = {};
        obj['x-axis'] = tooltipdata;
        return this.toolTipForBar(obj);
    }
}
AmexioD3BaseLineComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    xinterval: [{ type: Input, args: ['data',] }, { type: Input, args: ['xaxis-interval',] }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    tickscount: [{ type: Input, args: ['yaxis-interval',] }],
    linecolor: [{ type: Input, args: ['color',] }],
    displayfield: [{ type: Input, args: ['display-field',] }],
    slant: [{ type: Input, args: ['rotate',] }]
};
if (false) {
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.svgwidth;
    /**
     * @type {?}
     * @private
     */
    AmexioD3BaseLineComponent.prototype._data;
    /**
     * @type {?}
     * @private
     */
    AmexioD3BaseLineComponent.prototype.xaxisdata;
    /**
     * @type {?}
     * @private
     */
    AmexioD3BaseLineComponent.prototype.xaxisdata1;
    /**
     * @type {?}
     * @private
     */
    AmexioD3BaseLineComponent.prototype.yaxisdata;
    /**
     * @type {?}
     * @private
     */
    AmexioD3BaseLineComponent.prototype.legenddata;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.legends;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.linelegends;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.xarr;
    /**
     * @type {?}
     * @protected
     */
    AmexioD3BaseLineComponent.prototype.xaxisname;
    /**
     * @type {?}
     * @protected
     */
    AmexioD3BaseLineComponent.prototype.multiseriesdata;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.svg;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.displayindex;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.svgheight;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.xinterval;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.httpurl;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.httpmethod;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.tickscount;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.linecolor;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.displayfield;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.slant;
    /** @type {?} */
    AmexioD3BaseLineComponent.prototype.deviceQueryService;
}
//# sourceMappingURL=data:application/json;base64,