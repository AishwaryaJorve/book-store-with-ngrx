/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, ChangeDetectorRef, } from "@angular/core";
import { AmexioD3BaseChartComponent } from "../base/base.component";
import { CommanDataService } from '../services/comman.data.service';
import { DeviceQueryService } from '../services/device.query.service';
import * as d3 from 'd3';
export class AmexioD3BarChartComponent extends AmexioD3BaseChartComponent {
    /**
     * @param {?} myservice
     * @param {?} cdf
     * @param {?} device
     */
    constructor(myservice, cdf, device) {
        super('bar');
        this.myservice = myservice;
        this.cdf = cdf;
        this.device = device;
        this.svgheight = 300;
        this.horizontal = false;
        this.labelcolor = "black";
        this.labelflag = false;
        this.level = 0;
        this.drillabledatakey = [];
        this.hScale = true;
        this.showzeroflag = true;
        this._data = [];
        this.resizeflag = false;
        this.drillableFlag = true;
        this.colorflag = false;
        this.keyArray = [];
        this.transformeddata = [];
        this.legendArray = [];
        this.firstloading = false;
        this.inc = 0;
        this.isChartInit = false;
    }
    // private _data: any = [];
    /**
     * @param {?} v
     * @return {?}
     */
    set data(v) {
        if (v && (v.length > 0)) {
            this._data = v;
            // if(this.isChartInit){
            //   this.resize();
            // }
            // if (this.data) {
            // setTimeout(() => {
            //   this.data = this.getResponseData(this.data);
            //   this.transformData(this.data)
            //   this.initializeData();
            //   this.plotD3Chart();
            // }, 0);
            // }
            // this.cdf.detectChanges();
            // this.formLegendData();
        }
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            /** @type {?} */
            let resp;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    resp = response;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                }), (/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.data = this.getResponseData(resp);
                        // this.drawChart();
                        this.transformData(this.data);
                        this.initializeData();
                        this.plotD3Chart();
                        this.isChartInit = true;
                    }), 0);
                }));
            }
            else if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(this.data);
                    this.transformData(this.data);
                    this.initializeData();
                    this.plotD3Chart();
                    this.isChartInit = true;
                }), 0);
            }
        }
    }
    // Fetch Data
    /**
     * @param {?} data
     * @return {?}
     */
    fetchData(data) {
        /** @type {?} */
        let requestJson;
        /** @type {?} */
        let key = this.drillabledatakey;
        /** @type {?} */
        let resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            let drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                resp = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
            }), (/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(resp);
                    this.drawChart();
                }), 0);
            }));
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.initializeData();
            this.plotD3Chart();
        }), 0);
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        // console.log("repeat");
        if (this.inc > 1) {
            if (this.data) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.data = this.getResponseData(this.data);
                    this.transformData(this.data);
                    this.initializeData();
                    this.plotD3Chart();
                }), 500);
            }
            this.formLegendData();
        }
        this.inc++;
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        /** @type {?} */
        let responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            const dr = this.datareader.split('.');
            for (const ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    plotD3Chart() {
        this.formLegendData();
        if (this.resizeflag == false) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        /** @type {?} */
        const tooltip = this.toolTip(d3);
        /** @type {?} */
        const margin = { top: 20, right: 60, bottom: 40, left: 60 };
        /** @type {?} */
        const width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        const height = this.svgheight - margin.top - margin.bottom;
        //RESIZE STEP 2 START
        // this.svg.selectAll("*").remove();
        this.svg = d3.select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight);
        this.svg.selectAll("*").remove();
        // this.svg.exit().remove();//remove unneeded circles
        //RESIZE STEP 2 ENDS HERE
        /** @type {?} */
        let x;
        /** @type {?} */
        let y;
        /** @type {?} */
        const g = this.svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        // vertical bar
        if (this.horizontal == false) {
            // this.svg.selectAll("*").remove();
            // -----------------------------
            if (this.data) {
                x = d3.scaleBand()
                    .rangeRound([0, width])
                    .padding(0.1);
                //setting content for x and y axis
                x.domain(this.data.map((/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return d[Object.keys(d)[0]];
                    //    return d.label
                })));
            }
            //-----------------------------
            if (this.data) {
                y = d3.scaleLinear()
                    .rangeRound([height, 0]);
                y.domain([0, d3.max(this.data, (/**
                     * @param {?} d
                     * @return {?}
                     */
                    (d) => {
                        return d[Object.keys(d)[1]];
                        //return d.value;
                    }))]);
            }
            // add x axis to svg
            if (this.device.IsDesktop() == true) {
                if (this.svgwidth <= 400) {
                    g.append("g")
                        .attr("transform", "translate(0," + height + ")")
                        .call(d3.axisBottom(x)).
                        selectAll("text")
                        .attr("y", 0)
                        .attr("x", 9)
                        .attr("dy", ".35em")
                        .attr("transform", "rotate(60)")
                        .style("text-anchor", "start");
                }
                else {
                    g.append("g")
                        .attr("transform", "translate(0," + height + ")")
                        .call(d3.axisBottom(x));
                }
            }
            else {
                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            //add y axis to svg
            g.append("g")
                .call(d3.axisLeft(y)
                .ticks(this.tickscount));
            this.plotLine(g, x, y, height, width);
            //add bar chart
            g.selectAll(".bar")
                .data(this.data)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return x(d[Object.keys(d)[0]]);
                // return x(d.label); 
            }))
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return y(d[Object.keys(d)[1]]);
                // return y(d.value); 
            }))
                .attr("cursor", "pointer")
                .attr("width", x.bandwidth())
                .attr("height", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return height - y(d[Object.keys(d)[1]]); }))
                .style("fill", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                // return "blue";
                return d.color;
            }))
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.html(this.formTooltipData(d)
                //  this.toolTipForBar(d)
                // this.toolTipContent(d)
                )
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.barChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
                //this.chartClick(d);
            }));
            if (this.labelflag) {
                /** @type {?} */
                var yTextPadding = 40;
                this.svg.selectAll(".label")
                    .data(this.data)
                    .enter()
                    .append("text")
                    .style("font-weight", "bold")
                    .style("font-size", "1vw")
                    .attr("text-anchor", "middle")
                    .attr("fill", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    if (this.labelcolor.length > 0) {
                        if ((this.labelcolor.length > 0) && d[Object.keys(d)[1]] > 0) {
                            return this.labelcolor;
                        }
                    }
                    else {
                        return "black";
                    }
                }))
                    .attr("x", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (d, i) => {
                    return x(d[Object.keys(d)[0]]) + margin.left + x.bandwidth() / 2;
                }))
                    .attr("y", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (d, i) => {
                    return y(d[Object.keys(d)[1]]) + yTextPadding;
                }))
                    .text((/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    // if (d[Object.keys(d)[1]] > 0) {
                    //   return d[Object.keys(d)[1]];
                    // }.
                    if (this.showzeroflag) {
                        return d[Object.keys(d)[1]];
                    }
                    else if (!this.showzeroflag) {
                        if (d[Object.keys(d)[1]] > 0) {
                            return d[Object.keys(d)[1]];
                        }
                    }
                }))
                    .attr("cursor", "pointer")
                    .on("mouseover", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.style("visibility", "visible");
                }))
                    .on("mousemove", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.html(this.formTooltipData(d)
                    //  this.toolTipForBar(d)
                    // this.toolTipContent(d)
                    )
                        .style("top", (d3.event.pageY - 10) + "px")
                        .style("left", (d3.event.pageX + 10) + "px");
                }))
                    .on("mouseout", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.style("visibility", "hidden");
                }))
                    .on("click", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    this.barChartClick(d);
                    this.fordrillableClick(this, d, event);
                    return tooltip.style("visibility", "hidden");
                    //this.chartClick(d);
                }));
            } //if ends fr 
        }
        else if (this.horizontal == true) {
            if (this.data) {
                x = d3.scaleLinear()
                    .rangeRound([0, width]);
                //setting content for x and y axis
                x.domain([0, d3.max(this.data, (/**
                     * @param {?} d
                     * @return {?}
                     */
                    (d) => {
                        return parseInt(d[Object.keys(d)[1]]
                        // d.value
                        );
                    }))]);
                // d[Object.keys(d)[1]]
                y = d3.scaleBand()
                    .rangeRound([height, 0]).padding(0.1);
                y.domain(this.data.map((/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return d[Object.keys(d)[0]];
                    //return d.label;
                })));
            }
            // add x axis to svg
            g.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x).ticks(this.xtickscount));
            //add y axis to svg
            g.append("g")
                .call(d3.axisLeft(y).ticks(this.tickscount));
            this.plotLine(g, x, y, height, width);
            //add bar chart
            g.selectAll(".bar")
                .data(this.data)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", 0)
                .attr("y", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return y(d[Object.keys(d)[0]]
                // d.label
                );
            }))
                .attr("cursor", "pointer")
                .attr("width", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return x(d[Object.keys(d)[1]]
                // d.value
                );
            }))
                .attr("height", y.bandwidth())
                .style("fill", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => { return d.color; }))
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.html(this.formTooltipData(d)
                // this.formLegendData(d)
                // this.toolTipContent(d)
                )
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.barChartClick(d);
                this.fordrillableClick(this, d, event);
                return tooltip.style("visibility", "hidden");
                //this.chartClick(d);
            }));
            if (this.labelflag) {
                /** @type {?} */
                let yTextPadding = 40;
                this.svg.selectAll(".label")
                    .data(this.data)
                    .enter()
                    .append("text")
                    .style("font-weight", "bold")
                    .attr("text-anchor", "middle")
                    .attr("vertical-align", "middle")
                    .attr("margin-top", margin.top)
                    .attr("fill", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    if (this.labelcolor.length > 0) {
                        return this.labelcolor;
                    }
                    else {
                        return "black";
                    }
                }))
                    .attr("x", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (d, i) => {
                    return x(d[Object.keys(d)[1]]) + yTextPadding;
                }))
                    .attr("y", (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                (d, i) => {
                    return y(d[Object.keys(d)[0]])
                        + margin.top + y.bandwidth() / 2;
                }))
                    .text((/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    // return d[Object.keys(d)[1]];
                    if (this.showzeroflag) {
                        return d[Object.keys(d)[1]];
                    }
                    else if (!this.showzeroflag) {
                        if (d[Object.keys(d)[1]] > 0) {
                            return d[Object.keys(d)[1]];
                        }
                    }
                }))
                    .attr("cursor", "pointer")
                    .on("mouseover", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.style("visibility", "visible");
                }))
                    .on("mousemove", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.html(this.formTooltipData(d)
                    // this.formLegendData(d)
                    // this.toolTipContent(d)
                    )
                        .style("top", (d3.event.pageY - 10) + "px")
                        .style("left", (d3.event.pageX + 10) + "px");
                }))
                    .on("mouseout", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    return tooltip.style("visibility", "hidden");
                }))
                    .on("click", (/**
                 * @param {?} d
                 * @return {?}
                 */
                (d) => {
                    this.barChartClick(d);
                    this.fordrillableClick(this, d, event);
                    return tooltip.style("visibility", "hidden");
                    //this.chartClick(d);
                }));
            }
        }
        //else ends(horizontal bar logic ends)
    }
    /**
     * @param {?} g
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    plotLine(g, x, y, height, width) {
        if (this.hScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y).ticks(this.tickscount)
                .tickSize(-width).tickFormat(''));
        }
        if (this.vScale) {
            g.append('g')
                .attr("color", "lightgrey")
                .attr('transform', 'translate(0,' + height + ')')
                .call(d3.axisBottom(x).
                tickSize(-this.width).tickFormat('').ticks(this.xtickscount));
        }
    }
    /**
     * @param {?} tooltipData
     * @return {?}
     */
    formTooltipData(tooltipData) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(tooltipData)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        return this.toolTipForBar(object);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    transformData(data) {
        if (data && (data.length > 0)) {
            this.transformeddata = [];
            this.keyArray = data[0];
            if (data && (data.length > 0)) {
                data.forEach((/**
                 * @param {?} element
                 * @param {?} index
                 * @return {?}
                 */
                (element, index) => {
                    if (index > 0) {
                        /** @type {?} */
                        let DummyObject = {};
                        element.forEach((/**
                         * @param {?} individualvalue
                         * @param {?} keyindex
                         * @return {?}
                         */
                        (individualvalue, keyindex) => {
                            DummyObject[this.keyArray[keyindex]] = individualvalue;
                        })); //inner for loop ends
                        this.transformeddata.push(DummyObject);
                    } //if ends
                })); //outer for loop ends
            }
            this.data = this.transformeddata;
        } //
    }
    /**
     * @return {?}
     */
    formLegendData() {
        this.legendArray = [];
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let legendobject = {};
            legendobject['label'] = element[Object.keys(element)[0]];
            legendobject['value'] = element[Object.keys(element)[1]];
            legendobject['color'] = element.color;
            this.legendArray.push(legendobject);
        }));
        this.legendArray;
    }
    /**
     * @param {?} legendevent
     * @return {?}
     */
    onBarLegendClick(legendevent) {
        /** @type {?} */
        let obj = {};
        //  obj['label'] = legendevent.label;
        //  obj['value'] = legendevent.value;
        obj[this.keyArray[0]] = legendevent.label;
        obj[this.keyArray[1]] = legendevent.value;
        //obj[legendevent.label] = legendevent.value;
        //delete event.color;
        this.legendClick(obj);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    barChartClick(event) {
        /** @type {?} */
        let object = {};
        for (let [key, value] of Object.entries(event)) {
            if (key != 'color') {
                object[key] = value;
            }
        }
        this.chartClick(object);
    }
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    validateresize() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.wt) {
            }
            else {
                this.resize();
            }
        }), 0);
    }
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 5 STARTS
    /**
     * @return {?}
     */
    resize() {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotD3Chart();
    }
    // //RESIZE STEP 5 STARTS
    //   initialresize() {
    //     if (this.wt) {
    //       //RESIZE STEP 3 START
    //       // if(this.firstloading)
    //       // this.svg.selectAll("*").remove();
    //       this.resizeflag = true;
    //       if (this.svgwidth) {
    //         this.svgwidth = this.svgwidth;
    //       } else if (this.chartId) {
    //         this.svgwidth = this.chartId.nativeElement.offsetWidth;
    //       }
    //       //RESIZE STEP 3 ENDS
    //       // this.svgwidth = this.divid.nativeElement.offsetWidth;
    //       this.cdf.detectChanges();
    //       this.plotD3Chart();
    //     }
    //     this.firstloading = false;
    //   }
    // //RESIZE STEP 5 ENDS
    /**
     * @return {?}
     */
    validateData() {
        if (this.data) {
        }
        else {
            return "lmask";
        }
    }
}
AmexioD3BarChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-d3-chart-bar',
                template: `<div #chartId *ngIf="drillableFlag " #divid (window:resize)="validateresize()">
    <table [ngClass]="validateData()" style="width: 100%;" position=" relative">
        <ng-container *ngIf="title.length > 0">
            <tr>
                <td style="font-size: 18px; font-weight: bold; "> {{title}} </td>
            </tr>
        </ng-container>
        <tr>
            <td>
                <svg [attr.height]="svgheight" [attr.width]="svgwidth" [attr.id]="componentId">
                </svg>
            </td>
        </tr>
        <tr *ngIf="legend">
            <td style="display: block; padding: 5px;">
                <amexio-d3-legend *ngIf="legend" [horizontal]="true" (onClick)="onBarLegendClick($event)" [data]="legendArray" style="height:100%;">
                </amexio-d3-legend>
            </td>
        </tr>
    </table>
    <!-- <table *ngIf="!(data && data.length >0)" class="lmask">
        
    </table > -->
    <!-- <div *ngIf="data.length < 1" class="lmask" style="padding-top:50%">
    </div> -->

</div>`
            },] },
];
AmexioD3BarChartComponent.ctorParameters = () => [
    { type: CommanDataService },
    { type: ChangeDetectorRef },
    { type: DeviceQueryService }
];
AmexioD3BarChartComponent.propDecorators = {
    svgwidth: [{ type: Input, args: ['width',] }],
    svgheight: [{ type: Input, args: ['height',] }],
    horizontal: [{ type: Input }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    labelflag: [{ type: Input, args: ['label',] }],
    chartId: [{ type: ViewChild, args: ['chartId',] }],
    divid: [{ type: ViewChild, args: ['divid',] }],
    drillid: [{ type: ViewChild, args: ['drillid',] }],
    DOM: [{ type: ViewChild, args: ['domref',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    level: [{ type: Input, args: ['level',] }],
    target: [{ type: Input, args: ['target',] }],
    drillabledatakey: [{ type: Input, args: ['drillable-data',] }],
    hScale: [{ type: Input, args: ['horizontal-scale',] }],
    tickscount: [{ type: Input, args: ['yaxis-interval',] }],
    xtickscount: [{ type: Input, args: ['xaxis-interval',] }],
    showzeroflag: [{ type: Input, args: ['show-zero-values',] }],
    _data: [{ type: Input, args: ['data',] }]
};
if (false) {
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.svgwidth;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.svgheight;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.horizontal;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.labelcolor;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.labelflag;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.chartId;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.divid;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.drillid;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.DOM;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.datareader;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.level;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.target;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.drillabledatakey;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.hScale;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.tickscount;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.xtickscount;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.showzeroflag;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype._data;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.wt;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.resizeflag;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.checkmob;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.resizeg;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.drillableFlag;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.xaxis;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.yaxis;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.svg;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.colorflag;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.keyArray;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.transformeddata;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.object;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.legendArray;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.firstloading;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.inc;
    /** @type {?} */
    AmexioD3BarChartComponent.prototype.isChartInit;
    /**
     * @type {?}
     * @private
     */
    AmexioD3BarChartComponent.prototype.myservice;
    /**
     * @type {?}
     * @private
     */
    AmexioD3BarChartComponent.prototype.cdf;
    /**
     * @type {?}
     * @private
     */
    AmexioD3BarChartComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,