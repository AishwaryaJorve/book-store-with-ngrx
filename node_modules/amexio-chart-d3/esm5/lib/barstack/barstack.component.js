/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Output, ViewChild, ElementRef, EventEmitter, ChangeDetectorRef } from '@angular/core';
import * as d3 from 'd3';
import { AmexioD3BaseChartComponent } from '../base/base.component';
import { CommanDataService } from '../services/comman.data.service';
import { DeviceQueryService } from '../services/device.query.service';
var BarstackComponent = /** @class */ (function (_super) {
    tslib_1.__extends(BarstackComponent, _super);
    function BarstackComponent(myservice, cdf, device) {
        var _this = _super.call(this, 'barstack') || this;
        _this.myservice = myservice;
        _this.cdf = cdf;
        _this.device = device;
        _this.maxYValue = 0;
        _this.data = [];
        _this.barwidth = 0;
        _this.title = "";
        _this.legend = true;
        _this.color = [];
        _this.svgheight = 300;
        _this.onLegendClick = new EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    BarstackComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.wt = this.svgwidth;
        if (this.level <= 1) {
            /** @type {?} */
            var res = void 0;
            if (this.httpmethod && this.httpurl) {
                this.myservice.fetchUrlData(this.httpurl, this.httpmethod).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    _this.httpresponse = response;
                    _this.data = _this.getResponseData(response);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                }), (/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.transformData(_this.data);
                        _this.plotChart();
                    }), 0);
                }));
            }
            else if (this.data1) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.transformData(_this.data1);
                    _this.plotChart();
                }), 0);
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    BarstackComponent.prototype.fetchData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var requestJson;
        /** @type {?} */
        var key = this.drillabledatakey;
        /** @type {?} */
        var resp;
        if (this.drillabledatakey.length) {
            /** @type {?} */
            var drillabledata = this.getMultipleDrillbleKeyData(data, key);
            requestJson = drillabledata;
        }
        else {
            requestJson = data;
        }
        if (this.httpmethod && this.httpurl) {
            this.myservice.postfetchData(this.httpurl, this.httpmethod, requestJson).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                resp = response;
                _this.httpresponse = response;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
            }), (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.drawChart();
                }), 0);
            }));
        }
    };
    /**
     * @return {?}
     */
    BarstackComponent.prototype.drawChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.data = _this.getResponseData(_this.httpresponse);
            _this.transformData(_this.data);
            _this.plotChart();
        }), 0);
    };
    /**
     * @param {?} data1
     * @return {?}
     */
    BarstackComponent.prototype.transformData = /**
     * @param {?} data1
     * @return {?}
     */
    function (data1) {
        var _this = this;
        this.keyArray = [];
        this.legendArray = [];
        data1.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        function (element, i) {
            if (i == 0) {
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} index
                 * @return {?}
                 */
                function (innerelement, index) {
                    if (index > 0) {
                        _this.legendArray[innerelement] = { 'data': [] };
                        _this.keyArray.push(innerelement);
                    }
                    else if (index == 0) {
                        _this.xaxis = innerelement;
                    }
                }));
            }
        }));
        /** @type {?} */
        var tempinnerarray;
        tempinnerarray = [];
        data1.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            if (index > 0) {
                /** @type {?} */
                var obj_1 = {};
                element.forEach((/**
                 * @param {?} innerelement
                 * @param {?} innerindex
                 * @return {?}
                 */
                function (innerelement, innerindex) {
                    if (innerindex >= 0) {
                        /** @type {?} */
                        var key = _this.keyArray[innerindex - 1];
                        obj_1[key] = element[innerindex];
                        /** @type {?} */
                        var legenddata = _this.legendArray[key];
                        if (legenddata) {
                            legenddata.data.push({ 'value': element[innerindex], 'label': element[0] });
                        }
                    }
                }));
                tempinnerarray.push(obj_1);
            }
        }));
        this.data = [];
        tempinnerarray.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            _this.data.push(element);
        }));
        /** @type {?} */
        var maxY = 0;
        /** @type {?} */
        var yaxismaxArray = [];
        //find max for yaxis
        this.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            var _loop_1 = function (key, value) {
                _this.keyArray.forEach((/**
                 * @param {?} key1
                 * @return {?}
                 */
                function (key1) {
                    if (key == key1) {
                        maxY = maxY + value;
                    }
                })); //keyarray loop ends here
            };
            try {
                for (var _a = tslib_1.__values(Object.entries(element)), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                    _loop_1(key, value);
                } //for ends here
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
            }
            yaxismaxArray.push(maxY);
            maxY = 0;
            var e_1, _d;
        })); // foreach ends
        // foreach ends
        /** @type {?} */
        var tempLarge = 0;
        /** @type {?} */
        var i;
        for (i = 0; i < yaxismaxArray.length; i++) {
            if (yaxismaxArray[i] > tempLarge) {
                this.maxYValue = yaxismaxArray[i];
            } //if ends
        } // for ends
        this.legends = [];
        this.keyArray.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            /** @type {?} */
            var legenddata = _this.legendArray[element];
            if (_this.color.length > 0) {
                /** @type {?} */
                var object = { 'label': element, 'color': _this.color[index], 'data': legenddata.data };
                _this.legends.push(object);
            }
            else {
                /** @type {?} */
                var object = { 'label': element, 'color': _this.predefinedcolors[index], 'data': legenddata.data };
                _this.legends.push(object);
            }
        }));
    };
    /**
     * @return {?}
     */
    BarstackComponent.prototype.plotChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var tooltip = this.toolTip(d3);
        /** @type {?} */
        var margin = { top: 30, right: 30, bottom: 90, left: 60 };
        /** @type {?} */
        var colors = this.predefinedcolors;
        if (this.device.IsDesktop()) {
            //RESIZE STEP 1
            if (this.wt) {
                this.svgwidth = this.wt;
            }
            else if (this.chartId) {
                this.svgwidth = this.chartId.nativeElement.offsetWidth;
            }
            //RESIZE STEP 1 ENDS HERE 
        }
        //this.svgwidth = this.chartId.nativeElement.offsetWidth;
        /** @type {?} */
        var data;
        data = this.data;
        /** @type {?} */
        var keysetarray = [];
        if (this.httpmethod && this.httpurl) {
            try {
                for (var _a = tslib_1.__values(Object.entries(this.data[0])), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                    keysetarray.push(key);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this.keyArray = keysetarray;
            this.keyArray.splice(0, 1);
        }
        /** @type {?} */
        var series = d3.stack().keys(this.keyArray)
            .offset(d3.stackOffsetDiverging)(this.data);
        /** @type {?} */
        var width = this.svgwidth - margin.left - margin.right;
        /** @type {?} */
        var height
        //  = this.svgheight - margin.bottom - margin.top;
        ;
        //  = this.svgheight - margin.bottom - margin.top;
        this.svg = d3.select("#" + this.componentId)
            .attr('viewBox', '0 0 ' + this.svgwidth + ' ' + this.svgheight);
        if (this.device.IsDesktop()) {
            this.offsetheight = this.chartId.nativeElement.offsetHeight;
            //  - margin.bottom -margin.top;
            height = this.offsetheight;
        }
        else {
            height = this.chartId.nativeElement.offsetHeight - 10;
        }
        /** @type {?} */
        var x = d3.scaleBand()
            .domain(data.map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return d[Object.keys(d)[0]];
        })))
            .rangeRound([margin.left, this.svgwidth - margin.right])
            .padding(0.35);
        /** @type {?} */
        var y = d3.scaleLinear()
            .domain([d3.min(this.stackMin(series)),
            this.maxYValue
            // d3.max(this.stackMax(series))
        ])
            .rangeRound([height - margin.bottom, margin.top]);
        if (this.device.IsDesktop() == true) {
            if (this.svgwidth <= 400) {
                this.svg.append("g")
                    .attr("transform", "translate(0," + y(0) + ")")
                    .call(d3.axisBottom(x)).
                    selectAll("text")
                    .attr("y", 0)
                    .attr("x", 9)
                    .attr("dy", ".35em")
                    .attr("transform", "rotate(60)")
                    .style("text-anchor", "start");
            }
            else {
                this.svg.append("g")
                    .attr("transform", "translate(0," + y(0) + ")")
                    .call(d3.axisBottom(x));
            }
        }
        else {
            this.svg.append("g")
                .attr("transform", "translate(0," + y(0) + ")")
                .call(d3.axisBottom(x)).
                selectAll("text")
                .attr("y", 0)
                .attr("x", 9)
                .attr("dy", ".35em")
                .attr("transform", "rotate(60)")
                .style("text-anchor", "start");
        }
        this.svg.append("g")
            .attr("transform", "translate(" + margin.left + ",0)")
            .call(d3.axisLeft(y).ticks(this.tickscount));
        this.plotLine(this.svg, x, y, height, width, margin.left);
        /** @type {?} */
        var svgRect = this.svg.append("g")
            .selectAll("g")
            .data(series)
            .enter().append("g")
            .attr("fill", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        function (d, index) {
            if (_this.color.length > 0) {
                if (_this.color[index]) {
                    return _this.color[index];
                }
                else {
                    return colors[index];
                }
            }
            else {
                return colors[index];
            }
        }))
            .selectAll("rect")
            .data((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return d;
        }));
        svgRect.enter().append("rect")
            .attr("width", x.bandwidth()).attr('id', (/**
         * @param {?} d
         * @param {?} i
         * @return {?}
         */
        function (d, i) {
            return d.data[i];
        }))
            .attr("x", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return x(+d.data[Object.keys(d.data)[0]]);
        }))
            .attr("y", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        function (d, index) {
            return y(d[1]);
        }))
            .attr("cursor", "pointer")
            .attr("height", (/**
         * @param {?} d
         * @param {?} index
         * @return {?}
         */
        function (d, index) {
            return y(d[0]) - y(d[1]);
        }))
            .on("mouseover", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "visible");
        }))
            .on("mousemove", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.html(_this.setKey(d))
                .style("top", (d3.event.pageY - 10) + "px")
                .style("left", (d3.event.pageX + 10) + "px");
        }))
            .on("mouseout", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return tooltip.style("visibility", "hidden");
        }))
            .on("click", (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.setBarClickText(d);
            _this.fordrillableClick(_this, d, event);
            return tooltip.style("visibility", "hidden");
            // this.chartClick(d);
        }));
        // -------------------------
        if (this.labelflag) {
            svgRect.enter()
                .append("text")
                .style("font-weight", "bold")
                .style("font-size", "1vw")
                .attr("text-anchor", "middle")
                .attr("fill", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (_this.labelcolor && _this.labelcolor.length > 0) {
                    return _this.labelcolor;
                }
                else {
                    return "black";
                }
            }))
                .attr("x", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return x(+d.data[Object.keys(d.data)[0]]) + x.bandwidth() / 2;
            }))
                .attr("y", (/**
             * @param {?} d
             * @param {?} index
             * @return {?}
             */
            function (d, index) {
                return y(d[1]) + 20;
            }))
                .text((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if ((d[Object.keys(d)[1]] - d[Object.keys(d)[0]]) > 0) {
                    return d[Object.keys(d)[1]] - d[Object.keys(d)[0]];
                }
            }))
                .attr("cursor", "pointer")
                .on("mouseover", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "visible");
            }))
                .on("mousemove", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.html(_this.setKey(d))
                    .style("top", (d3.event.pageY - 10) + "px")
                    .style("left", (d3.event.pageX + 10) + "px");
            }))
                .on("mouseout", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                return tooltip.style("visibility", "hidden");
            }))
                .on("click", (/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.setBarClickText(d);
                _this.fordrillableClick(_this, d, event);
                return tooltip.style("visibility", "hidden");
                // this.chartClick(d);
            }));
        }
        var e_2, _d;
    };
    /**
     * @param {?} serie
     * @return {?}
     */
    BarstackComponent.prototype.stackMin = /**
     * @param {?} serie
     * @return {?}
     */
    function (serie) {
        return d3.min(serie, (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d[0]; }));
    };
    //RESIZE STEP 4 STARTS
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    BarstackComponent.prototype.validateresize = 
    //RESIZE STEP 4 STARTS
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.wt) {
            }
            else {
                _this.resize();
            }
        }), 0);
    };
    //RESIZE STEP 4 ENDS
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    BarstackComponent.prototype.resize = 
    //RESIZE STEP 4 ENDS
    /**
     * @return {?}
     */
    function () {
        this.svg.selectAll("*").remove();
        this.resizeflag = true;
        if (this.wt) {
            this.svgwidth = this.wt;
        }
        else if (this.chartId) {
            this.svgwidth = this.chartId.nativeElement.offsetWidth;
        }
        this.cdf.detectChanges();
        this.plotChart();
    };
    /**
     * @param {?} svg
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @param {?} m
     * @return {?}
     */
    BarstackComponent.prototype.plotLine = /**
     * @param {?} svg
     * @param {?} x
     * @param {?} y
     * @param {?} height
     * @param {?} width
     * @param {?} m
     * @return {?}
     */
    function (svg, x, y, height, width, m) {
        if (this.hScale) {
            svg.append('g')
                .attr("transform", "translate(" + m + ",0)")
                .attr("color", "lightgrey")
                .call(d3.axisLeft(y).ticks(this.tickscount)
                .tickSize(-width).tickFormat(''));
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BarstackComponent.prototype.legendClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var obj = {};
        obj["label"] = event.label;
        /** @type {?} */
        var data = [];
        event.data.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var object = {};
            object[element.label] = element.value;
            data.push(object);
        }));
        obj["data"] = data;
        this.onLegendClick.emit(obj);
    };
    /**
     * @param {?} d
     * @return {?}
     */
    BarstackComponent.prototype.setKey = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var diff = d[0] - d[1];
        if (diff < 0) {
            diff = (diff * (-1));
        }
        try {
            for (var _a = tslib_1.__values(Object.entries(d.data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                if (value == diff) {
                    /** @type {?} */
                    var object = {};
                    object[key] = value;
                    object[this.xaxis] = d.data[Object.keys(d.data)[0]];
                    return (this.toolTipForBar(object));
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        var e_3, _d;
    };
    /**
     * @param {?} d
     * @return {?}
     */
    BarstackComponent.prototype.setBarClickText = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var diff = d[0] - d[1];
        if (diff < 0) {
            diff = (diff * (-1));
        }
        /** @type {?} */
        var object = {};
        try {
            for (var _a = tslib_1.__values(Object.entries(d.data)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                if (value == diff) {
                    object[key] = value;
                    object[this.xaxis] = d.data[Object.keys(d.data)[0]];
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_4) throw e_4.error; }
        }
        this.chartClick(object);
        var e_4, _d;
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    BarstackComponent.prototype.getResponseData = /**
     * @param {?} httpResponse
     * @return {?}
     */
    function (httpResponse) {
        /** @type {?} */
        var responsedata = httpResponse;
        if (this.datareader != null) {
            /** @type {?} */
            var dr = this.datareader.split('.');
            try {
                for (var dr_1 = tslib_1.__values(dr), dr_1_1 = dr_1.next(); !dr_1_1.done; dr_1_1 = dr_1.next()) {
                    var ir = dr_1_1.value;
                    responsedata = responsedata[ir];
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (dr_1_1 && !dr_1_1.done && (_a = dr_1.return)) _a.call(dr_1);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
        var e_5, _a;
    };
    BarstackComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amexio-d3-chart-barstack',
                    template: "<div #chartId *ngIf=\"drillableFlag\" (window:resize)=\"validateresize()\">\n    <table *ngIf=\"data1.length > 0\" style=\"width: 100%;\">\n            <ng-container *ngIf = \"title.length > 0\">\n        <tr>\n            <td style=\"font-size: 18px; font-weight: bold; \"> {{title}} </td>\n        </tr>\n            </ng-container>\n        <tr>\n            <td>\n                <svg [attr.height]=\"svgheight\" [attr.width]=\"svgwidth\" [attr.id]=\"componentId\">\n                </svg>\n            </td>\n        </tr>\n        <tr *ngIf=\"legend\">\n            <td style=\"display: block; padding: 5px;\">\n                <amexio-d3-legend *ngIf=\"legend\" [horizontal]=\"true\" (onClick)=\"legendClick($event)\" [data]=\"legends\"\n                    style=\"height:100%;\">\n                </amexio-d3-legend>\n            </td>\n\n        </tr>\n    </table>\n    <div *ngIf=\"data1.length < 1\" class=\"lmask\" style=\"padding-top:50%\">\n    </div>\n</div>",
                    styles: [""]
                },] },
    ];
    BarstackComponent.ctorParameters = function () { return [
        { type: CommanDataService },
        { type: ChangeDetectorRef },
        { type: DeviceQueryService }
    ]; };
    BarstackComponent.propDecorators = {
        data1: [{ type: Input, args: ['data',] }],
        barwidth: [{ type: Input }],
        title: [{ type: Input }],
        legend: [{ type: Input }],
        color: [{ type: Input }],
        svgwidth: [{ type: Input, args: ['width',] }],
        svgheight: [{ type: Input, args: ['height',] }],
        tickscount: [{ type: Input, args: ['yaxis-interval',] }],
        chartId: [{ type: ViewChild, args: ['chartId',] }],
        divid: [{ type: ViewChild, args: ['divid',] }],
        drillid: [{ type: ViewChild, args: ['drillid',] }],
        onLegendClick: [{ type: Output }]
    };
    return BarstackComponent;
}(AmexioD3BaseChartComponent));
export { BarstackComponent };
if (false) {
    /** @type {?} */
    BarstackComponent.prototype.legendArray;
    /** @type {?} */
    BarstackComponent.prototype.maxYValue;
    /** @type {?} */
    BarstackComponent.prototype.keyArray;
    /** @type {?} */
    BarstackComponent.prototype.predefinedcolors;
    /** @type {?} */
    BarstackComponent.prototype.legends;
    /** @type {?} */
    BarstackComponent.prototype.charttype;
    /** @type {?} */
    BarstackComponent.prototype.data;
    /** @type {?} */
    BarstackComponent.prototype.datareaderdata;
    /** @type {?} */
    BarstackComponent.prototype.xaxis;
    /** @type {?} */
    BarstackComponent.prototype.wt;
    /** @type {?} */
    BarstackComponent.prototype.data1;
    /** @type {?} */
    BarstackComponent.prototype.barwidth;
    /** @type {?} */
    BarstackComponent.prototype.title;
    /** @type {?} */
    BarstackComponent.prototype.legend;
    /** @type {?} */
    BarstackComponent.prototype.color;
    /** @type {?} */
    BarstackComponent.prototype.svgwidth;
    /** @type {?} */
    BarstackComponent.prototype.svgheight;
    /** @type {?} */
    BarstackComponent.prototype.tickscount;
    /** @type {?} */
    BarstackComponent.prototype.chartId;
    /** @type {?} */
    BarstackComponent.prototype.divid;
    /** @type {?} */
    BarstackComponent.prototype.drillid;
    /** @type {?} */
    BarstackComponent.prototype.onLegendClick;
    /** @type {?} */
    BarstackComponent.prototype.httpresponse;
    /** @type {?} */
    BarstackComponent.prototype.svg;
    /** @type {?} */
    BarstackComponent.prototype.offsetheight;
    /**
     * @type {?}
     * @private
     */
    BarstackComponent.prototype.myservice;
    /**
     * @type {?}
     * @private
     */
    BarstackComponent.prototype.cdf;
    /**
     * @type {?}
     * @private
     */
    BarstackComponent.prototype.device;
}
//# sourceMappingURL=data:application/json;base64,